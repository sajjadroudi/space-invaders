
space-invaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008524  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008908  08008908  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008908  08008908  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008908  08008908  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008908  08008908  00018908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800890c  0800890c  0001890c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00001ff0  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200021c8  200021c8  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025d7a  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c27  00000000  00000000  00045f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b20  00000000  00000000  0004abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001950  00000000  00000000  0004c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229eb  00000000  00000000  0004e020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002055c  00000000  00000000  00070a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4b0d  00000000  00000000  00090f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00155a74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b78  00000000  00000000  00155ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0015d640  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0015d664  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800869c 	.word	0x0800869c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800869c 	.word	0x0800869c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08e      	sub	sp, #56	; 0x38
 8000274:	af0a      	add	r7, sp, #40	; 0x28
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	4608      	mov	r0, r1
 800027a:	4611      	mov	r1, r2
 800027c:	461a      	mov	r2, r3
 800027e:	4603      	mov	r3, r0
 8000280:	817b      	strh	r3, [r7, #10]
 8000282:	460b      	mov	r3, r1
 8000284:	813b      	strh	r3, [r7, #8]
 8000286:	4613      	mov	r3, r2
 8000288:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800028a:	4b1d      	ldr	r3, [pc, #116]	; (8000300 <LiquidCrystal+0x90>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d019      	beq.n	80002c6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000292:	8939      	ldrh	r1, [r7, #8]
 8000294:	897a      	ldrh	r2, [r7, #10]
 8000296:	2300      	movs	r3, #0
 8000298:	9308      	str	r3, [sp, #32]
 800029a:	2300      	movs	r3, #0
 800029c:	9307      	str	r3, [sp, #28]
 800029e:	2300      	movs	r3, #0
 80002a0:	9306      	str	r3, [sp, #24]
 80002a2:	2300      	movs	r3, #0
 80002a4:	9305      	str	r3, [sp, #20]
 80002a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002a8:	9304      	str	r3, [sp, #16]
 80002aa:	8c3b      	ldrh	r3, [r7, #32]
 80002ac:	9303      	str	r3, [sp, #12]
 80002ae:	8bbb      	ldrh	r3, [r7, #28]
 80002b0:	9302      	str	r3, [sp, #8]
 80002b2:	8b3b      	ldrh	r3, [r7, #24]
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	88fb      	ldrh	r3, [r7, #6]
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	460b      	mov	r3, r1
 80002bc:	68f9      	ldr	r1, [r7, #12]
 80002be:	2001      	movs	r0, #1
 80002c0:	f000 f820 	bl	8000304 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002c4:	e018      	b.n	80002f8 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002c6:	8939      	ldrh	r1, [r7, #8]
 80002c8:	897a      	ldrh	r2, [r7, #10]
 80002ca:	2300      	movs	r3, #0
 80002cc:	9308      	str	r3, [sp, #32]
 80002ce:	2300      	movs	r3, #0
 80002d0:	9307      	str	r3, [sp, #28]
 80002d2:	2300      	movs	r3, #0
 80002d4:	9306      	str	r3, [sp, #24]
 80002d6:	2300      	movs	r3, #0
 80002d8:	9305      	str	r3, [sp, #20]
 80002da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002dc:	9304      	str	r3, [sp, #16]
 80002de:	8c3b      	ldrh	r3, [r7, #32]
 80002e0:	9303      	str	r3, [sp, #12]
 80002e2:	8bbb      	ldrh	r3, [r7, #28]
 80002e4:	9302      	str	r3, [sp, #8]
 80002e6:	8b3b      	ldrh	r3, [r7, #24]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	460b      	mov	r3, r1
 80002f0:	68f9      	ldr	r1, [r7, #12]
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 f806 	bl	8000304 <init>
}
 80002f8:	bf00      	nop
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000000 	.word	0x20000000

08000304 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	60b9      	str	r1, [r7, #8]
 800030c:	4611      	mov	r1, r2
 800030e:	461a      	mov	r2, r3
 8000310:	4603      	mov	r3, r0
 8000312:	73fb      	strb	r3, [r7, #15]
 8000314:	460b      	mov	r3, r1
 8000316:	81bb      	strh	r3, [r7, #12]
 8000318:	4613      	mov	r3, r2
 800031a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <init+0x84>)
 800031e:	89bb      	ldrh	r3, [r7, #12]
 8000320:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000322:	4a1a      	ldr	r2, [pc, #104]	; (800038c <init+0x88>)
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000328:	4a19      	ldr	r2, [pc, #100]	; (8000390 <init+0x8c>)
 800032a:	8b3b      	ldrh	r3, [r7, #24]
 800032c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <init+0x90>)
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000334:	4a18      	ldr	r2, [pc, #96]	; (8000398 <init+0x94>)
 8000336:	8bbb      	ldrh	r3, [r7, #28]
 8000338:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800033a:	4a17      	ldr	r2, [pc, #92]	; (8000398 <init+0x94>)
 800033c:	8c3b      	ldrh	r3, [r7, #32]
 800033e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000340:	4a15      	ldr	r2, [pc, #84]	; (8000398 <init+0x94>)
 8000342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000344:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000346:	4a14      	ldr	r2, [pc, #80]	; (8000398 <init+0x94>)
 8000348:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800034a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800034c:	4a12      	ldr	r2, [pc, #72]	; (8000398 <init+0x94>)
 800034e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000350:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000352:	4a11      	ldr	r2, [pc, #68]	; (8000398 <init+0x94>)
 8000354:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000356:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000358:	4a0f      	ldr	r2, [pc, #60]	; (8000398 <init+0x94>)
 800035a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800035c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <init+0x94>)
 8000360:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000362:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000364:	7bfb      	ldrb	r3, [r7, #15]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d003      	beq.n	8000372 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <init+0x98>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
 8000370:	e002      	b.n	8000378 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <init+0x98>)
 8000374:	2210      	movs	r2, #16
 8000376:	701a      	strb	r2, [r3, #0]
  
  begin(20, 4);
 8000378:	2104      	movs	r1, #4
 800037a:	2014      	movs	r0, #20
 800037c:	f000 f810 	bl	80003a0 <begin>
}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20001d3c 	.word	0x20001d3c
 800038c:	20001d1c 	.word	0x20001d1c
 8000390:	20001d3a 	.word	0x20001d3a
 8000394:	20001d20 	.word	0x20001d20
 8000398:	20001d28 	.word	0x20001d28
 800039c:	20001d39 	.word	0x20001d39

080003a0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	460a      	mov	r2, r1
 80003aa:	71fb      	strb	r3, [r7, #7]
 80003ac:	4613      	mov	r3, r2
 80003ae:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003b0:	79bb      	ldrb	r3, [r7, #6]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d906      	bls.n	80003c4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003b6:	4b77      	ldr	r3, [pc, #476]	; (8000594 <begin+0x1f4>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	b2da      	uxtb	r2, r3
 80003c0:	4b74      	ldr	r3, [pc, #464]	; (8000594 <begin+0x1f4>)
 80003c2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003c4:	4a74      	ldr	r2, [pc, #464]	; (8000598 <begin+0x1f8>)
 80003c6:	79bb      	ldrb	r3, [r7, #6]
 80003c8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003ca:	79fa      	ldrb	r2, [r7, #7]
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	3340      	adds	r3, #64	; 0x40
 80003d0:	2140      	movs	r1, #64	; 0x40
 80003d2:	2000      	movs	r0, #0
 80003d4:	f000 f988 	bl	80006e8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003d8:	4b70      	ldr	r3, [pc, #448]	; (800059c <begin+0x1fc>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d009      	beq.n	80003f4 <begin+0x54>
 80003e0:	79bb      	ldrb	r3, [r7, #6]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d106      	bne.n	80003f4 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003e6:	4b6b      	ldr	r3, [pc, #428]	; (8000594 <begin+0x1f4>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4b68      	ldr	r3, [pc, #416]	; (8000594 <begin+0x1f4>)
 80003f2:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 80003f4:	f000 f8e4 	bl	80005c0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f8:	2303      	movs	r3, #3
 80003fa:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000400:	4b67      	ldr	r3, [pc, #412]	; (80005a0 <begin+0x200>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d01b      	beq.n	8000440 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000408:	4b66      	ldr	r3, [pc, #408]	; (80005a4 <begin+0x204>)
 800040a:	881a      	ldrh	r2, [r3, #0]
 800040c:	4b66      	ldr	r3, [pc, #408]	; (80005a8 <begin+0x208>)
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	4313      	orrs	r3, r2
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b65      	ldr	r3, [pc, #404]	; (80005ac <begin+0x20c>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	4313      	orrs	r3, r2
 800041a:	b29a      	uxth	r2, r3
 800041c:	4b64      	ldr	r3, [pc, #400]	; (80005b0 <begin+0x210>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b62      	ldr	r3, [pc, #392]	; (80005b0 <begin+0x210>)
 8000426:	885b      	ldrh	r3, [r3, #2]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b60      	ldr	r3, [pc, #384]	; (80005b0 <begin+0x210>)
 800042e:	889b      	ldrh	r3, [r3, #4]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b5e      	ldr	r3, [pc, #376]	; (80005b0 <begin+0x210>)
 8000436:	88db      	ldrh	r3, [r3, #6]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29b      	uxth	r3, r3
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	e02a      	b.n	8000496 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000440:	4b58      	ldr	r3, [pc, #352]	; (80005a4 <begin+0x204>)
 8000442:	881a      	ldrh	r2, [r3, #0]
 8000444:	4b58      	ldr	r3, [pc, #352]	; (80005a8 <begin+0x208>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29a      	uxth	r2, r3
 800044c:	4b57      	ldr	r3, [pc, #348]	; (80005ac <begin+0x20c>)
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	4313      	orrs	r3, r2
 8000452:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000454:	4b56      	ldr	r3, [pc, #344]	; (80005b0 <begin+0x210>)
 8000456:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800045c:	4b54      	ldr	r3, [pc, #336]	; (80005b0 <begin+0x210>)
 800045e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b52      	ldr	r3, [pc, #328]	; (80005b0 <begin+0x210>)
 8000466:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b50      	ldr	r3, [pc, #320]	; (80005b0 <begin+0x210>)
 800046e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
 8000474:	4b4e      	ldr	r3, [pc, #312]	; (80005b0 <begin+0x210>)
 8000476:	891b      	ldrh	r3, [r3, #8]
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b4c      	ldr	r3, [pc, #304]	; (80005b0 <begin+0x210>)
 800047e:	895b      	ldrh	r3, [r3, #10]
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4a      	ldr	r3, [pc, #296]	; (80005b0 <begin+0x210>)
 8000486:	899b      	ldrh	r3, [r3, #12]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b48      	ldr	r3, [pc, #288]	; (80005b0 <begin+0x210>)
 800048e:	89db      	ldrh	r3, [r3, #14]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000494:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8000496:	4b47      	ldr	r3, [pc, #284]	; (80005b4 <begin+0x214>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f107 020c 	add.w	r2, r7, #12
 800049e:	4611      	mov	r1, r2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f001 fbbf 	bl	8001c24 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  osDelay(50);
 80004a6:	2032      	movs	r0, #50	; 0x32
 80004a8:	f003 ff0a 	bl	80042c0 <osDelay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004ac:	4b41      	ldr	r3, [pc, #260]	; (80005b4 <begin+0x214>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a3c      	ldr	r2, [pc, #240]	; (80005a4 <begin+0x204>)
 80004b2:	8811      	ldrh	r1, [r2, #0]
 80004b4:	2200      	movs	r2, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 fd2e 	bl	8001f18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004bc:	4b3d      	ldr	r3, [pc, #244]	; (80005b4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3a      	ldr	r2, [pc, #232]	; (80005ac <begin+0x20c>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fd26 	bl	8001f18 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004cc:	4b36      	ldr	r3, [pc, #216]	; (80005a8 <begin+0x208>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	2bff      	cmp	r3, #255	; 0xff
 80004d2:	d007      	beq.n	80004e4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004d4:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <begin+0x214>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a33      	ldr	r2, [pc, #204]	; (80005a8 <begin+0x208>)
 80004da:	8811      	ldrh	r1, [r2, #0]
 80004dc:	2200      	movs	r2, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 fd1a 	bl	8001f18 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004e4:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <begin+0x1f4>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	f003 0310 	and.w	r3, r3, #16
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d115      	bne.n	800051c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 fa19 	bl	8000928 <write4bits>
    osDelay(5); // wait min 4.1ms
 80004f6:	2005      	movs	r0, #5
 80004f8:	f003 fee2 	bl	80042c0 <osDelay>

    // second try
    write4bits(0x03);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 fa13 	bl	8000928 <write4bits>
    osDelay(5); // wait min 4.1ms
 8000502:	2005      	movs	r0, #5
 8000504:	f003 fedc 	bl	80042c0 <osDelay>
    
    // third go!
    write4bits(0x03); 
 8000508:	2003      	movs	r0, #3
 800050a:	f000 fa0d 	bl	8000928 <write4bits>
    osDelay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f003 fed6 	bl	80042c0 <osDelay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000514:	2002      	movs	r0, #2
 8000516:	f000 fa07 	bl	8000928 <write4bits>
 800051a:	e01d      	b.n	8000558 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <begin+0x1f4>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	f043 0320 	orr.w	r3, r3, #32
 8000524:	b2db      	uxtb	r3, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f979 	bl	800081e <command>
    osDelay(5);  // wait more than 4.1ms
 800052c:	2005      	movs	r0, #5
 800052e:	f003 fec7 	bl	80042c0 <osDelay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <begin+0x1f4>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f96e 	bl	800081e <command>
    osDelay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f003 febc 	bl	80042c0 <osDelay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <begin+0x1f4>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	b2db      	uxtb	r3, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f963 	bl	800081e <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f95b 	bl	800081e <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <begin+0x218>)
 800056a:	2204      	movs	r2, #4
 800056c:	701a      	strb	r2, [r3, #0]
  display();
 800056e:	f000 f917 	bl	80007a0 <display>

  // clear it off
  clear();
 8000572:	f000 f8d9 	bl	8000728 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <begin+0x21c>)
 8000578:	2202      	movs	r2, #2
 800057a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <begin+0x21c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	b2db      	uxtb	r3, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f949 	bl	800081e <command>

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20001d39 	.word	0x20001d39
 8000598:	20001d25 	.word	0x20001d25
 800059c:	200001f4 	.word	0x200001f4
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20001d3c 	.word	0x20001d3c
 80005a8:	20001d1c 	.word	0x20001d1c
 80005ac:	20001d3a 	.word	0x20001d3a
 80005b0:	20001d28 	.word	0x20001d28
 80005b4:	20001d20 	.word	0x20001d20
 80005b8:	20001d24 	.word	0x20001d24
 80005bc:	20001d38 	.word	0x20001d38

080005c0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005c0:	b480      	push	{r7}
 80005c2:	b089      	sub	sp, #36	; 0x24
 80005c4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005c6:	4b41      	ldr	r3, [pc, #260]	; (80006cc <enableClock+0x10c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005ce:	d10c      	bne.n	80005ea <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	4b3f      	ldr	r3, [pc, #252]	; (80006d0 <enableClock+0x110>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a3e      	ldr	r2, [pc, #248]	; (80006d0 <enableClock+0x110>)
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	6153      	str	r3, [r2, #20]
 80005dc:	4b3c      	ldr	r3, [pc, #240]	; (80006d0 <enableClock+0x110>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e4:	61fb      	str	r3, [r7, #28]
 80005e6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005e8:	e06a      	b.n	80006c0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005ea:	4b38      	ldr	r3, [pc, #224]	; (80006cc <enableClock+0x10c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a39      	ldr	r2, [pc, #228]	; (80006d4 <enableClock+0x114>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d10c      	bne.n	800060e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <enableClock+0x110>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a35      	ldr	r2, [pc, #212]	; (80006d0 <enableClock+0x110>)
 80005fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005fe:	6153      	str	r3, [r2, #20]
 8000600:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <enableClock+0x110>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000608:	61bb      	str	r3, [r7, #24]
 800060a:	69bb      	ldr	r3, [r7, #24]
}
 800060c:	e058      	b.n	80006c0 <enableClock+0x100>
  else if(_port == GPIOB)
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <enableClock+0x10c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a30      	ldr	r2, [pc, #192]	; (80006d4 <enableClock+0x114>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d10c      	bne.n	8000632 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000618:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <enableClock+0x110>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	4a2c      	ldr	r2, [pc, #176]	; (80006d0 <enableClock+0x110>)
 800061e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000622:	6153      	str	r3, [r2, #20]
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <enableClock+0x110>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	697b      	ldr	r3, [r7, #20]
}
 8000630:	e046      	b.n	80006c0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <enableClock+0x10c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a28      	ldr	r2, [pc, #160]	; (80006d8 <enableClock+0x118>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d10c      	bne.n	8000656 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800063c:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <enableClock+0x110>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a23      	ldr	r2, [pc, #140]	; (80006d0 <enableClock+0x110>)
 8000642:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000646:	6153      	str	r3, [r2, #20]
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <enableClock+0x110>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	693b      	ldr	r3, [r7, #16]
}
 8000654:	e034      	b.n	80006c0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <enableClock+0x10c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <enableClock+0x11c>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d10c      	bne.n	800067a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <enableClock+0x110>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a1a      	ldr	r2, [pc, #104]	; (80006d0 <enableClock+0x110>)
 8000666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066a:	6153      	str	r3, [r2, #20]
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <enableClock+0x110>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
}
 8000678:	e022      	b.n	80006c0 <enableClock+0x100>
	else if(_port == GPIOE)
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <enableClock+0x10c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <enableClock+0x120>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d10c      	bne.n	800069e <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <enableClock+0x110>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <enableClock+0x110>)
 800068a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800068e:	6153      	str	r3, [r2, #20]
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <enableClock+0x110>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
}
 800069c:	e010      	b.n	80006c0 <enableClock+0x100>
	else if(_port == GPIOF)
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <enableClock+0x10c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <enableClock+0x124>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d10b      	bne.n	80006c0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <enableClock+0x110>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <enableClock+0x110>)
 80006ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006b2:	6153      	str	r3, [r2, #20]
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <enableClock+0x110>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	bf00      	nop
 80006c2:	3724      	adds	r7, #36	; 0x24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	20001d20 	.word	0x20001d20
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000400 	.word	0x48000400
 80006d8:	48000800 	.word	0x48000800
 80006dc:	48000c00 	.word	0x48000c00
 80006e0:	48001000 	.word	0x48001000
 80006e4:	48001400 	.word	0x48001400

080006e8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <setRowOffsets+0x3c>)
 80006fc:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <setRowOffsets+0x3c>)
 8000704:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <setRowOffsets+0x3c>)
 800070c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <setRowOffsets+0x3c>)
 8000714:	70da      	strb	r2, [r3, #3]
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20001d18 	.word	0x20001d18

08000728 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800072c:	2001      	movs	r0, #1
 800072e:	f000 f876 	bl	800081e <command>
  osDelay(2);  // this command takes a long time!
 8000732:	2002      	movs	r0, #2
 8000734:	f003 fdc4 	bl	80042c0 <osDelay>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  osDelay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800074c:	2304      	movs	r3, #4
 800074e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	429a      	cmp	r2, r3
 8000756:	d803      	bhi.n	8000760 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	3b01      	subs	r3, #1
 800075e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <setCursor+0x5c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	429a      	cmp	r2, r3
 8000768:	d303      	bcc.n	8000772 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <setCursor+0x5c>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3b01      	subs	r3, #1
 8000770:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <setCursor+0x60>)
 8000776:	5cd2      	ldrb	r2, [r2, r3]
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4413      	add	r3, r2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	b25b      	sxtb	r3, r3
 8000780:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000784:	b25b      	sxtb	r3, r3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f848 	bl	800081e <command>
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20001d25 	.word	0x20001d25
 800079c:	20001d18 	.word	0x20001d18

080007a0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <display+0x28>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <display+0x28>)
 80007b0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <display+0x28>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f82e 	bl	800081e <command>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20001d24 	.word	0x20001d24

080007cc <createChar>:
  return n;
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f815 	bl	800081e <command>
  for (int i=0; i<8; i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	e009      	b.n	800080e <createChar+0x42>
    write(charmap[i]);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f819 	bl	800083a <write>
  for (int i=0; i<8; i++) {
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3301      	adds	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b07      	cmp	r3, #7
 8000812:	ddf2      	ble.n	80007fa <createChar+0x2e>
  }
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f813 	bl	8000858 <send>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <write>:

inline size_t write(uint8_t value) {
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2101      	movs	r1, #1
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f805 	bl	8000858 <send>
  return 1; // assume sucess
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <send+0x6c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <send+0x70>)
 800086e:	8811      	ldrh	r1, [r2, #0]
 8000870:	79ba      	ldrb	r2, [r7, #6]
 8000872:	4618      	mov	r0, r3
 8000874:	f001 fb50 	bl	8001f18 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <send+0x74>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	2bff      	cmp	r3, #255	; 0xff
 800087e:	d007      	beq.n	8000890 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <send+0x6c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a11      	ldr	r2, [pc, #68]	; (80008cc <send+0x74>)
 8000886:	8811      	ldrh	r1, [r2, #0]
 8000888:	2200      	movs	r2, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f001 fb44 	bl	8001f18 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <send+0x78>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	f003 0310 	and.w	r3, r3, #16
 8000898:	2b00      	cmp	r3, #0
 800089a:	d004      	beq.n	80008a6 <send+0x4e>
    write8bits(value); 
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f86c 	bl	800097c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 80008a4:	e009      	b.n	80008ba <send+0x62>
    write4bits(value>>4);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f83b 	bl	8000928 <write4bits>
    write4bits(value);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f837 	bl	8000928 <write4bits>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20001d20 	.word	0x20001d20
 80008c8:	20001d3c 	.word	0x20001d3c
 80008cc:	20001d1c 	.word	0x20001d1c
 80008d0:	20001d39 	.word	0x20001d39

080008d4 <pulseEnable>:

void pulseEnable(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <pulseEnable+0x4c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a11      	ldr	r2, [pc, #68]	; (8000924 <pulseEnable+0x50>)
 80008de:	8811      	ldrh	r1, [r2, #0]
 80008e0:	2200      	movs	r2, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fb18 	bl	8001f18 <HAL_GPIO_WritePin>
  osDelay(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f003 fce9 	bl	80042c0 <osDelay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <pulseEnable+0x4c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <pulseEnable+0x50>)
 80008f4:	8811      	ldrh	r1, [r2, #0]
 80008f6:	2201      	movs	r2, #1
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 fb0d 	bl	8001f18 <HAL_GPIO_WritePin>
  osDelay(1);    // enable pulse must be >450ns
 80008fe:	2001      	movs	r0, #1
 8000900:	f003 fcde 	bl	80042c0 <osDelay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <pulseEnable+0x4c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <pulseEnable+0x50>)
 800090a:	8811      	ldrh	r1, [r2, #0]
 800090c:	2200      	movs	r2, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fb02 	bl	8001f18 <HAL_GPIO_WritePin>
  osDelay(1);   // commands need > 37us to settle
 8000914:	2001      	movs	r0, #1
 8000916:	f003 fcd3 	bl	80042c0 <osDelay>
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20001d20 	.word	0x20001d20
 8000924:	20001d3a 	.word	0x20001d3a

08000928 <write4bits>:

void write4bits(uint8_t value) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	e013      	b.n	8000960 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <write4bits+0x4c>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <write4bits+0x50>)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000944:	79fa      	ldrb	r2, [r7, #7]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	fa42 f303 	asr.w	r3, r2, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	f001 fadf 	bl	8001f18 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3301      	adds	r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b03      	cmp	r3, #3
 8000964:	dde8      	ble.n	8000938 <write4bits+0x10>
  }

  pulseEnable();
 8000966:	f7ff ffb5 	bl	80008d4 <pulseEnable>
}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20001d20 	.word	0x20001d20
 8000978:	20001d28 	.word	0x20001d28

0800097c <write8bits>:

void write8bits(uint8_t value) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	e013      	b.n	80009b4 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <write8bits+0x4c>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <write8bits+0x50>)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	fa42 f303 	asr.w	r3, r2, r3
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	461a      	mov	r2, r3
 80009aa:	f001 fab5 	bl	8001f18 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3301      	adds	r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2b07      	cmp	r3, #7
 80009b8:	dde8      	ble.n	800098c <write8bits+0x10>
  }
  
  pulseEnable();
 80009ba:	f7ff ff8b 	bl	80008d4 <pulseEnable>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20001d20 	.word	0x20001d20
 80009cc:	20001d28 	.word	0x20001d28

080009d0 <shoot>:

Bullet bullets[MAX_BULLET_COUNT];

int bulletCount = 0;

void shoot(int startRow, int startCol, Dir dir) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	4613      	mov	r3, r2
 80009dc:	71fb      	strb	r3, [r7, #7]
	if(bulletCount >= MAX_BULLET_COUNT)
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <shoot+0x84>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	dc31      	bgt.n	8000a4a <shoot+0x7a>
		return;

	bullets[bulletCount].row = startRow;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <shoot+0x84>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	491b      	ldr	r1, [pc, #108]	; (8000a58 <shoot+0x88>)
 80009ec:	4613      	mov	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	4413      	add	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	440b      	add	r3, r1
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	601a      	str	r2, [r3, #0]
	bullets[bulletCount].col = startCol;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <shoot+0x84>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4916      	ldr	r1, [pc, #88]	; (8000a58 <shoot+0x88>)
 8000a00:	4613      	mov	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	440b      	add	r3, r1
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	601a      	str	r2, [r3, #0]
	bullets[bulletCount].direction = dir;
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <shoot+0x84>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4910      	ldr	r1, [pc, #64]	; (8000a58 <shoot+0x88>)
 8000a16:	4613      	mov	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	440b      	add	r3, r1
 8000a20:	3308      	adds	r3, #8
 8000a22:	79fa      	ldrb	r2, [r7, #7]
 8000a24:	701a      	strb	r2, [r3, #0]

	putBullet(bullets[bulletCount]);
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <shoot+0x84>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	490b      	ldr	r1, [pc, #44]	; (8000a58 <shoot+0x88>)
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	440b      	add	r3, r1
 8000a36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a3a:	f000 fa89 	bl	8000f50 <putBullet>

	bulletCount++;
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <shoot+0x84>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <shoot+0x84>)
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	e000      	b.n	8000a4c <shoot+0x7c>
		return;
 8000a4a:	bf00      	nop
}
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200001f8 	.word	0x200001f8
 8000a58:	20001d40 	.word	0x20001d40

08000a5c <removeBullet>:

void removeBullet(int index) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	for(int i = index + 1; i < getBulletCount(); i++) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3301      	adds	r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e015      	b.n	8000a98 <removeBullet+0x3c>
		bullets[i - 1] = bullets[i];
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	4911      	ldr	r1, [pc, #68]	; (8000ab8 <removeBullet+0x5c>)
 8000a72:	4613      	mov	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	18c8      	adds	r0, r1, r3
 8000a7c:	490e      	ldr	r1, [pc, #56]	; (8000ab8 <removeBullet+0x5c>)
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	18ca      	adds	r2, r1, r3
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(int i = index + 1; i < getBulletCount(); i++) {
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	3301      	adds	r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	f000 f870 	bl	8000b7c <getBulletCount>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	dbe3      	blt.n	8000a6c <removeBullet+0x10>
	}
	bulletCount--;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <removeBullet+0x60>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <removeBullet+0x60>)
 8000aac:	6013      	str	r3, [r2, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20001d40 	.word	0x20001d40
 8000abc:	200001f8 	.word	0x200001f8

08000ac0 <moveBullet>:

void moveBullet(int bulletIndex) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

	clearAt(bullets[bulletIndex].row, bullets[bulletIndex].col);
 8000ac8:	492b      	ldr	r1, [pc, #172]	; (8000b78 <moveBullet+0xb8>)
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4613      	mov	r3, r2
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	4927      	ldr	r1, [pc, #156]	; (8000b78 <moveBullet+0xb8>)
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4619      	mov	r1, r3
 8000aec:	f000 fa1a 	bl	8000f24 <clearAt>

	if(bullets[bulletIndex].direction == UP) {
 8000af0:	4921      	ldr	r1, [pc, #132]	; (8000b78 <moveBullet+0xb8>)
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	4613      	mov	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	440b      	add	r3, r1
 8000afe:	3308      	adds	r3, #8
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d111      	bne.n	8000b2a <moveBullet+0x6a>
		bullets[bulletIndex].row--;
 8000b06:	491c      	ldr	r1, [pc, #112]	; (8000b78 <moveBullet+0xb8>)
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	440b      	add	r3, r1
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	1e59      	subs	r1, r3, #1
 8000b18:	4817      	ldr	r0, [pc, #92]	; (8000b78 <moveBullet+0xb8>)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4403      	add	r3, r0
 8000b26:	6019      	str	r1, [r3, #0]
 8000b28:	e010      	b.n	8000b4c <moveBullet+0x8c>
	} else {
		bullets[bulletIndex].row++;
 8000b2a:	4913      	ldr	r1, [pc, #76]	; (8000b78 <moveBullet+0xb8>)
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	440b      	add	r3, r1
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	1c59      	adds	r1, r3, #1
 8000b3c:	480e      	ldr	r0, [pc, #56]	; (8000b78 <moveBullet+0xb8>)
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4403      	add	r3, r0
 8000b4a:	6019      	str	r1, [r3, #0]
	}

	int row = bullets[bulletIndex].row;
 8000b4c:	490a      	ldr	r1, [pc, #40]	; (8000b78 <moveBullet+0xb8>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	440b      	add	r3, r1
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
	if(row < 0 || row >= VERTICAL_LCD_ROWS) {
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db02      	blt.n	8000b6a <moveBullet+0xaa>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b13      	cmp	r3, #19
 8000b68:	dd02      	ble.n	8000b70 <moveBullet+0xb0>
		removeBullet(bulletIndex);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff76 	bl	8000a5c <removeBullet>
	}
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20001d40 	.word	0x20001d40

08000b7c <getBulletCount>:

int getBulletCount() {
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
	return bulletCount;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <getBulletCount+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	200001f8 	.word	0x200001f8

08000b94 <getBullet>:

Bullet getBullet(int index) {
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	return bullets[index];
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <getBullet+0x30>)
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	4413      	add	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	18ca      	adds	r2, r1, r3
 8000bae:	4603      	mov	r3, r0
 8000bb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20001d40 	.word	0x20001d40

08000bc8 <moveAllBullets>:

void moveAllBullets() {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	for(int i = 0; i < getBulletCount(); i++) {
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	e005      	b.n	8000be0 <moveAllBullets+0x18>
		moveBullet(i);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff73 	bl	8000ac0 <moveBullet>
	for(int i = 0; i < getBulletCount(); i++) {
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	f7ff ffcc 	bl	8000b7c <getBulletCount>
 8000be4:	4602      	mov	r2, r0
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4293      	cmp	r3, r2
 8000bea:	dbf3      	blt.n	8000bd4 <moveAllBullets+0xc>
	}
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <updateAllBulletsOnMatrix>:

void updateAllBulletsOnMatrix() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
	for(int i = 0; i < getBulletCount(); i++) {
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	e01c      	b.n	8000c3e <updateAllBulletsOnMatrix+0x46>
		int row = bullets[i].row;
 8000c04:	4913      	ldr	r1, [pc, #76]	; (8000c54 <updateAllBulletsOnMatrix+0x5c>)
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	440b      	add	r3, r1
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	603b      	str	r3, [r7, #0]
		if(row >= 0 && row < VERTICAL_LCD_ROWS) {
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0d      	blt.n	8000c38 <updateAllBulletsOnMatrix+0x40>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b13      	cmp	r3, #19
 8000c20:	dc0a      	bgt.n	8000c38 <updateAllBulletsOnMatrix+0x40>
			putBullet(bullets[i]);
 8000c22:	490c      	ldr	r1, [pc, #48]	; (8000c54 <updateAllBulletsOnMatrix+0x5c>)
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c34:	f000 f98c 	bl	8000f50 <putBullet>
	for(int i = 0; i < getBulletCount(); i++) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	f7ff ff9d 	bl	8000b7c <getBulletCount>
 8000c42:	4602      	mov	r2, r0
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4293      	cmp	r3, r2
 8000c48:	dbdc      	blt.n	8000c04 <updateAllBulletsOnMatrix+0xc>
		}
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20001d40 	.word	0x20001d40

08000c58 <handleHittingEnemy>:

void handleHittingEnemy() {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
	for(int i = getBulletCount() - 1; i >= 0; i--) {
 8000c5e:	f7ff ff8d 	bl	8000b7c <getBulletCount>
 8000c62:	4603      	mov	r3, r0
 8000c64:	3b01      	subs	r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	e01c      	b.n	8000ca4 <handleHittingEnemy+0x4c>
		Bullet bullet = getBullet(i);
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	68f9      	ldr	r1, [r7, #12]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff90 	bl	8000b94 <getBullet>
		if(isEnemy(bullet.row, bullet.col)) {
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f9f4 	bl	8001068 <isEnemy>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00b      	beq.n	8000c9e <handleHittingEnemy+0x46>
			incrementKilledEnemyCount();
 8000c86:	f000 f857 	bl	8000d38 <incrementKilledEnemyCount>
			clearAt(bullet.row, bullet.col);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f947 	bl	8000f24 <clearAt>
			removeBullet(i);
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f7ff fee0 	bl	8000a5c <removeBullet>
			break;
		}
	}
}
 8000c9c:	e005      	b.n	8000caa <handleHittingEnemy+0x52>
	for(int i = getBulletCount() - 1; i >= 0; i--) {
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	dadf      	bge.n	8000c6a <handleHittingEnemy+0x12>
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <handleHittingHero>:

void handleHittingHero() {
 8000cb2:	b590      	push	{r4, r7, lr}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
	for(int i = 0; i < getBulletCount(); i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	e019      	b.n	8000cf2 <handleHittingHero+0x40>
		Bullet bullet = getBullet(i);
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	68f9      	ldr	r1, [r7, #12]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff66 	bl	8000b94 <getBullet>
		if(bullet.row == getHeroRow() && bullet.col == getHeroCol()) {
 8000cc8:	683c      	ldr	r4, [r7, #0]
 8000cca:	f000 f979 	bl	8000fc0 <getHeroRow>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	d10b      	bne.n	8000cec <handleHittingHero+0x3a>
 8000cd4:	687c      	ldr	r4, [r7, #4]
 8000cd6:	f000 f951 	bl	8000f7c <getHeroCol>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	429c      	cmp	r4, r3
 8000cde:	d105      	bne.n	8000cec <handleHittingHero+0x3a>
			decrementHeroLevelHealth();
 8000ce0:	f000 f838 	bl	8000d54 <decrementHeroLevelHealth>
			removeBullet(i);
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f7ff feb9 	bl	8000a5c <removeBullet>
			break;
		}
	}
}
 8000cea:	e008      	b.n	8000cfe <handleHittingHero+0x4c>
	for(int i = 0; i < getBulletCount(); i++) {
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	f7ff ff43 	bl	8000b7c <getBulletCount>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	dbdf      	blt.n	8000cbe <handleHittingHero+0xc>
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}
	...

08000d08 <getHeroLevelHealth>:

int getMoveEnemiesDownInterval() {
	return moveEnemiesDownInterval;
}

int getHeroLevelHealth() {
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
	return heroLevelHealth;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <getHeroLevelHealth+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	2000001c 	.word	0x2000001c

08000d20 <getKilledEnemyCountToWin>:

int getKilledEnemyCountToWin() {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	return killedEnemyCountToWin;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <getKilledEnemyCountToWin+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000020 	.word	0x20000020

08000d38 <incrementKilledEnemyCount>:

void incrementKilledEnemyCount() {
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	killedEnemyCountToWin++;
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <incrementKilledEnemyCount+0x18>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <incrementKilledEnemyCount+0x18>)
 8000d44:	6013      	str	r3, [r2, #0]
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	20000020 	.word	0x20000020

08000d54 <decrementHeroLevelHealth>:

void decrementHeroLevelHealth() {
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	heroLevelHealth--;
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <decrementHeroLevelHealth+0x18>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	4a03      	ldr	r2, [pc, #12]	; (8000d6c <decrementHeroLevelHealth+0x18>)
 8000d60:	6013      	str	r3, [r2, #0]
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	2000001c 	.word	0x2000001c

08000d70 <setLoc>:
		{ CT_SPACE, CT_HERO, CT_SPACE, CT_SPACE },
};

int copyLcdMat[VERTICAL_LCD_ROWS][VERTICAL_LCD_COLUMNS] = { 0 };

void setLoc(int row, int col) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
	setCursor(row, VERTICAL_LCD_COLUMNS - col - 1);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	f1c3 0303 	rsb	r3, r3, #3
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	f7ff fcd6 	bl	800073c <setCursor>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <doCopy>:

void doCopy() {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
	for(int r = 0; r < VERTICAL_LCD_ROWS; r++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	e019      	b.n	8000dd8 <doCopy+0x40>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	e010      	b.n	8000dcc <doCopy+0x34>
			copyLcdMat[r][c] = lcdMat[r][c];
 8000daa:	4910      	ldr	r1, [pc, #64]	; (8000dec <doCopy+0x54>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	009a      	lsls	r2, r3, #2
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <doCopy+0x58>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	0099      	lsls	r1, r3, #2
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	440b      	add	r3, r1
 8000dc2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	ddeb      	ble.n	8000daa <doCopy+0x12>
	for(int r = 0; r < VERTICAL_LCD_ROWS; r++) {
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b13      	cmp	r3, #19
 8000ddc:	dde2      	ble.n	8000da4 <doCopy+0xc>
		}
	}
}
 8000dde:	bf00      	nop
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	20000024 	.word	0x20000024
 8000df0:	20000204 	.word	0x20000204

08000df4 <initLcd>:

void initLcd() {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af04      	add	r7, sp, #16
	osMutexAcquire(lcdMutexHandle, osWaitForever);
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <initLcd+0x78>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fb24 	bl	8004450 <osMutexAcquire>
	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8000e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e0c:	9303      	str	r3, [sp, #12]
 8000e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2c:	4810      	ldr	r0, [pc, #64]	; (8000e70 <initLcd+0x7c>)
 8000e2e:	f7ff fa1f 	bl	8000270 <LiquidCrystal>
	begin(VERTICAL_LCD_ROWS, VERTICAL_LCD_COLUMNS);
 8000e32:	2104      	movs	r1, #4
 8000e34:	2014      	movs	r0, #20
 8000e36:	f7ff fab3 	bl	80003a0 <begin>
	createChar(CT_SPACE, spaceByte);
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <initLcd+0x80>)
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fcc5 	bl	80007cc <createChar>
	createChar(CT_HERO, heroByte);
 8000e42:	490d      	ldr	r1, [pc, #52]	; (8000e78 <initLcd+0x84>)
 8000e44:	2001      	movs	r0, #1
 8000e46:	f7ff fcc1 	bl	80007cc <createChar>
	createChar(CT_ENEMY, enemyByte);
 8000e4a:	490c      	ldr	r1, [pc, #48]	; (8000e7c <initLcd+0x88>)
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f7ff fcbd 	bl	80007cc <createChar>
	createChar(CT_BULLET, bulletByte);
 8000e52:	490b      	ldr	r1, [pc, #44]	; (8000e80 <initLcd+0x8c>)
 8000e54:	2003      	movs	r0, #3
 8000e56:	f7ff fcb9 	bl	80007cc <createChar>
	osMutexRelease(lcdMutexHandle);
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <initLcd+0x78>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 fb54 	bl	800450c <osMutexRelease>
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20001d80 	.word	0x20001d80
 8000e70:	48000c00 	.word	0x48000c00
 8000e74:	200001fc 	.word	0x200001fc
 8000e78:	2000000c 	.word	0x2000000c
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	20000014 	.word	0x20000014

08000e84 <updateLcd>:

void updateLcd() {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
	for(int r = 0; r < VERTICAL_LCD_ROWS; r++) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	e03a      	b.n	8000f06 <updateLcd+0x82>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	e031      	b.n	8000efa <updateLcd+0x76>
			if(copyLcdMat[r][c] == lcdMat[r][c])
 8000e96:	4920      	ldr	r1, [pc, #128]	; (8000f18 <updateLcd+0x94>)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	009a      	lsls	r2, r3, #2
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000ea4:	481d      	ldr	r0, [pc, #116]	; (8000f1c <updateLcd+0x98>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	0099      	lsls	r1, r3, #2
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	440b      	add	r3, r1
 8000eae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d01d      	beq.n	8000ef2 <updateLcd+0x6e>
				continue;

			osMutexAcquire(lcdMutexHandle, osWaitForever);
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <updateLcd+0x9c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 fac6 	bl	8004450 <osMutexAcquire>
			setLoc(r, c);
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f7ff ff52 	bl	8000d70 <setLoc>
			int type = lcdMat[r][c];
 8000ecc:	4913      	ldr	r1, [pc, #76]	; (8000f1c <updateLcd+0x98>)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	009a      	lsls	r2, r3, #2
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eda:	607b      	str	r3, [r7, #4]
			write(type);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fcaa 	bl	800083a <write>
			osMutexRelease(lcdMutexHandle);
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <updateLcd+0x9c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fb0e 	bl	800450c <osMutexRelease>
 8000ef0:	e000      	b.n	8000ef4 <updateLcd+0x70>
				continue;
 8000ef2:	bf00      	nop
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	ddca      	ble.n	8000e96 <updateLcd+0x12>
	for(int r = 0; r < VERTICAL_LCD_ROWS; r++) {
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3301      	adds	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2b13      	cmp	r3, #19
 8000f0a:	ddc1      	ble.n	8000e90 <updateLcd+0xc>
		}
	}

	doCopy();
 8000f0c:	f7ff ff44 	bl	8000d98 <doCopy>
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000204 	.word	0x20000204
 8000f1c:	20000024 	.word	0x20000024
 8000f20:	20001d80 	.word	0x20001d80

08000f24 <clearAt>:

void clearAt(int row, int col) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	lcdMat[row][col] = CT_SPACE;
 8000f2e:	4907      	ldr	r1, [pc, #28]	; (8000f4c <clearAt+0x28>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	009a      	lsls	r2, r3, #2
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000024 	.word	0x20000024

08000f50 <putBullet>:

void putBullet(Bullet bullet) {
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	lcdMat[bullet.row][bullet.col] = CT_BULLET;
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	4905      	ldr	r1, [pc, #20]	; (8000f78 <putBullet+0x28>)
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	2203      	movs	r2, #3
 8000f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20000024 	.word	0x20000024

08000f7c <getHeroCol>:

int getHeroCol() {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
	for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	e00d      	b.n	8000fa4 <getHeroCol+0x28>
		if(lcdMat[HERO_ROW][c] == CT_HERO)
 8000f88:	2313      	movs	r3, #19
 8000f8a:	490c      	ldr	r1, [pc, #48]	; (8000fbc <getHeroCol+0x40>)
 8000f8c:	009a      	lsls	r2, r3, #2
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d101      	bne.n	8000f9e <getHeroCol+0x22>
			return c;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	e007      	b.n	8000fae <getHeroCol+0x32>
	for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	ddee      	ble.n	8000f88 <getHeroCol+0xc>
	}
	return -1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000024 	.word	0x20000024

08000fc0 <getHeroRow>:

int getHeroRow() {
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	return HERO_ROW;
 8000fc4:	2313      	movs	r3, #19
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <findLastRowOfEnemies>:
		}
	}
	return UNDEFINED;
}

int findLastRowOfEnemies() {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	for(int r = VERTICAL_LCD_ROWS; r >= 0; r--) {
 8000fd6:	2314      	movs	r3, #20
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	e016      	b.n	800100a <findLastRowOfEnemies+0x3a>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	e00d      	b.n	8000ffe <findLastRowOfEnemies+0x2e>
			if(lcdMat[r][c] == CT_ENEMY)
 8000fe2:	490f      	ldr	r1, [pc, #60]	; (8001020 <findLastRowOfEnemies+0x50>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	009a      	lsls	r2, r3, #2
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d101      	bne.n	8000ff8 <findLastRowOfEnemies+0x28>
				return r;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	e00d      	b.n	8001014 <findLastRowOfEnemies+0x44>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b03      	cmp	r3, #3
 8001002:	ddee      	ble.n	8000fe2 <findLastRowOfEnemies+0x12>
	for(int r = VERTICAL_LCD_ROWS; r >= 0; r--) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	dae5      	bge.n	8000fdc <findLastRowOfEnemies+0xc>
		}
	}
	return UNDEFINED;
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20000024 	.word	0x20000024

08001024 <findRandomEnemyCol>:

int findRandomEnemyCol(int row) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	int index = (rand() % 4);
 800102c:	f006 fbe8 	bl	8007800 <rand>
 8001030:	4603      	mov	r3, r0
 8001032:	425a      	negs	r2, r3
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	f002 0203 	and.w	r2, r2, #3
 800103c:	bf58      	it	pl
 800103e:	4253      	negpl	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
	if(lcdMat[row][index] == CT_ENEMY)
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <findRandomEnemyCol+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	009a      	lsls	r2, r3, #2
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d101      	bne.n	8001058 <findRandomEnemyCol+0x34>
		return index;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	e001      	b.n	800105c <findRandomEnemyCol+0x38>
	return UNDEFINED;
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000024 	.word	0x20000024

08001068 <isEnemy>:
				moveDown(r, c);
		}
	}
}

int isEnemy(int row, int col) {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	return lcdMat[row][col] == CT_ENEMY;
 8001072:	4909      	ldr	r1, [pc, #36]	; (8001098 <isEnemy+0x30>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	009a      	lsls	r2, r3, #2
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	4413      	add	r3, r2
 800107c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001080:	2b02      	cmp	r3, #2
 8001082:	bf0c      	ite	eq
 8001084:	2301      	moveq	r3, #1
 8001086:	2300      	movne	r3, #0
 8001088:	b2db      	uxtb	r3, r3
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000024 	.word	0x20000024

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	srand(time(NULL));
 80010a0:	2000      	movs	r0, #0
 80010a2:	f006 fcab 	bl	80079fc <time>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4613      	mov	r3, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f006 fb79 	bl	80077a4 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b2:	f000 fc9f 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b6:	f000 f841 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ba:	f000 f941 	bl	8001340 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010be:	f000 f89f 	bl	8001200 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010c2:	f000 f8dd 	bl	8001280 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80010c6:	f000 f919 	bl	80012fc <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010ca:	f002 ffe7 	bl	800409c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  lcdMutexHandle = osMutexNew(&lcdMutex_attributes);
 80010ce:	4810      	ldr	r0, [pc, #64]	; (8001110 <main+0x74>)
 80010d0:	f003 f924 	bl	800431c <osMutexNew>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <main+0x78>)
 80010d8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of updateLcdTask */
  updateLcdTaskHandle = osThreadNew(StartUpdateLcdTask, NULL, &updateLcdTask_attributes);
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <main+0x7c>)
 80010dc:	2100      	movs	r1, #0
 80010de:	480f      	ldr	r0, [pc, #60]	; (800111c <main+0x80>)
 80010e0:	f003 f844 	bl	800416c <osThreadNew>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <main+0x84>)
 80010e8:	6013      	str	r3, [r2, #0]

  /* creation of updateBulletsTa */
  updateBulletsTaHandle = osThreadNew(StartUpdateBulletsTask, NULL, &updateBulletsTa_attributes);
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <main+0x88>)
 80010ec:	2100      	movs	r1, #0
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <main+0x8c>)
 80010f0:	f003 f83c 	bl	800416c <osThreadNew>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a0d      	ldr	r2, [pc, #52]	; (800112c <main+0x90>)
 80010f8:	6013      	str	r3, [r2, #0]

  /* creation of enemyShootTask */
  enemyShootTaskHandle = osThreadNew(StartEnemyShootTask, NULL, &enemyShootTask_attributes);
 80010fa:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <main+0x94>)
 80010fc:	2100      	movs	r1, #0
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <main+0x98>)
 8001100:	f003 f834 	bl	800416c <osThreadNew>
 8001104:	4603      	mov	r3, r0
 8001106:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <main+0x9c>)
 8001108:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800110a:	f002 fffb 	bl	8004104 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800110e:	e7fe      	b.n	800110e <main+0x72>
 8001110:	08008774 	.word	0x08008774
 8001114:	20001d80 	.word	0x20001d80
 8001118:	08008708 	.word	0x08008708
 800111c:	08001469 	.word	0x08001469
 8001120:	20001d7c 	.word	0x20001d7c
 8001124:	0800872c 	.word	0x0800872c
 8001128:	08001481 	.word	0x08001481
 800112c:	20001dd0 	.word	0x20001dd0
 8001130:	08008750 	.word	0x08008750
 8001134:	080014ab 	.word	0x080014ab
 8001138:	20001dd4 	.word	0x20001dd4

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b09e      	sub	sp, #120	; 0x78
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001146:	2228      	movs	r2, #40	; 0x28
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f006 fac7 	bl	80076de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	463b      	mov	r3, r7
 8001162:	223c      	movs	r2, #60	; 0x3c
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f006 fab9 	bl	80076de <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800116c:	2303      	movs	r3, #3
 800116e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001174:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117a:	2301      	movs	r3, #1
 800117c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117e:	2310      	movs	r3, #16
 8001180:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001182:	2302      	movs	r3, #2
 8001184:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800118c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001190:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001196:	4618      	mov	r0, r3
 8001198:	f001 f8da 	bl	8002350 <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80011a2:	f000 f9b7 	bl	8001514 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2302      	movs	r3, #2
 80011ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 ffcc 	bl	8003160 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ce:	f000 f9a1 	bl	8001514 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <SystemClock_Config+0xc0>)
 80011d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80011da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fa02 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80011ee:	f000 f991 	bl	8001514 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3778      	adds	r7, #120	; 0x78
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	00020020 	.word	0x00020020

08001200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_I2C1_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_I2C1_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_I2C1_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <MX_I2C1_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_I2C1_Init+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_I2C1_Init+0x74>)
 800123c:	f000 fe84 	bl	8001f48 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001246:	f000 f965 	bl	8001514 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_I2C1_Init+0x74>)
 800124e:	f000 ff0a 	bl	8002066 <HAL_I2CEx_ConfigAnalogFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 f95c 	bl	8001514 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_I2C1_Init+0x74>)
 8001260:	f000 ff4c 	bl	80020fc <HAL_I2CEx_ConfigDigitalFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 f953 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20001d84 	.word	0x20001d84
 8001278:	40005400 	.word	0x40005400
 800127c:	2000090e 	.word	0x2000090e

08001280 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_SPI1_Init+0x74>)
 8001286:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <MX_SPI1_Init+0x78>)
 8001288:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_SPI1_Init+0x74>)
 800128c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001290:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_SPI1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_SPI1_Init+0x74>)
 800129a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800129e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_SPI1_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_SPI1_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_SPI1_Init+0x74>)
 80012ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_SPI1_Init+0x74>)
 80012b6:	2208      	movs	r2, #8
 80012b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_SPI1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_SPI1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_SPI1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_SPI1_Init+0x74>)
 80012ce:	2207      	movs	r2, #7
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_SPI1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_SPI1_Init+0x74>)
 80012da:	2208      	movs	r2, #8
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_SPI1_Init+0x74>)
 80012e0:	f002 fb34 	bl	800394c <HAL_SPI_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012ea:	f000 f913 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20001dd8 	.word	0x20001dd8
 80012f8:	40013000 	.word	0x40013000

080012fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <MX_USB_PCD_Init+0x3c>)
 8001302:	4a0e      	ldr	r2, [pc, #56]	; (800133c <MX_USB_PCD_Init+0x40>)
 8001304:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_USB_PCD_Init+0x3c>)
 8001308:	2208      	movs	r2, #8
 800130a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <MX_USB_PCD_Init+0x3c>)
 800130e:	2202      	movs	r2, #2
 8001310:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_USB_PCD_Init+0x3c>)
 8001314:	2202      	movs	r2, #2
 8001316:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <MX_USB_PCD_Init+0x3c>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_USB_PCD_Init+0x3c>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <MX_USB_PCD_Init+0x3c>)
 8001326:	f000 ff35 	bl	8002194 <HAL_PCD_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001330:	f000 f8f0 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20001e3c 	.word	0x20001e3c
 800133c:	40005c00 	.word	0x40005c00

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <MX_GPIO_Init+0x120>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	4a41      	ldr	r2, [pc, #260]	; (8001460 <MX_GPIO_Init+0x120>)
 800135c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001360:	6153      	str	r3, [r2, #20]
 8001362:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <MX_GPIO_Init+0x120>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <MX_GPIO_Init+0x120>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a3b      	ldr	r2, [pc, #236]	; (8001460 <MX_GPIO_Init+0x120>)
 8001374:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001378:	6153      	str	r3, [r2, #20]
 800137a:	4b39      	ldr	r3, [pc, #228]	; (8001460 <MX_GPIO_Init+0x120>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001386:	4b36      	ldr	r3, [pc, #216]	; (8001460 <MX_GPIO_Init+0x120>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a35      	ldr	r2, [pc, #212]	; (8001460 <MX_GPIO_Init+0x120>)
 800138c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001390:	6153      	str	r3, [r2, #20]
 8001392:	4b33      	ldr	r3, [pc, #204]	; (8001460 <MX_GPIO_Init+0x120>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <MX_GPIO_Init+0x120>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <MX_GPIO_Init+0x120>)
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	6153      	str	r3, [r2, #20]
 80013aa:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <MX_GPIO_Init+0x120>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <MX_GPIO_Init+0x120>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <MX_GPIO_Init+0x120>)
 80013bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c0:	6153      	str	r3, [r2, #20]
 80013c2:	4b27      	ldr	r3, [pc, #156]	; (8001460 <MX_GPIO_Init+0x120>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80013ce:	2200      	movs	r2, #0
 80013d0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80013d4:	4823      	ldr	r0, [pc, #140]	; (8001464 <MX_GPIO_Init+0x124>)
 80013d6:	f000 fd9f 	bl	8001f18 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2106      	movs	r1, #6
 80013de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e2:	f000 fd99 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80013e6:	f64f 7308 	movw	r3, #65288	; 0xff08
 80013ea:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4819      	ldr	r0, [pc, #100]	; (8001464 <MX_GPIO_Init+0x124>)
 8001400:	f000 fc10 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
 8001404:	2331      	movs	r3, #49	; 0x31
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001408:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4812      	ldr	r0, [pc, #72]	; (8001464 <MX_GPIO_Init+0x124>)
 800141a:	f000 fc03 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800141e:	2301      	movs	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f000 fbf6 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001438:	2306      	movs	r3, #6
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f000 fbe7 	bl	8001c24 <HAL_GPIO_Init>

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000
 8001464:	48001000 	.word	0x48001000

08001468 <StartUpdateLcdTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUpdateLcdTask */
void StartUpdateLcdTask(void *argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	initLcd();
 8001470:	f7ff fcc0 	bl	8000df4 <initLcd>

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001474:	2064      	movs	r0, #100	; 0x64
 8001476:	f002 ff23 	bl	80042c0 <osDelay>
	updateLcd();
 800147a:	f7ff fd03 	bl	8000e84 <updateLcd>
    osDelay(100);
 800147e:	e7f9      	b.n	8001474 <StartUpdateLcdTask+0xc>

08001480 <StartUpdateBulletsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateBulletsTask */
void StartUpdateBulletsTask(void *argument)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpdateBulletsTask */

  /* Infinite loop */
  for(;;) {
    osDelay(1000);
 8001488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148c:	f002 ff18 	bl	80042c0 <osDelay>
    moveAllBullets();
 8001490:	f7ff fb9a 	bl	8000bc8 <moveAllBullets>

    handleHittingHero();
 8001494:	f7ff fc0d 	bl	8000cb2 <handleHittingHero>
	if(getHeroLevelHealth() == 0) { // If hero kooshte shod
 8001498:	f7ff fc36 	bl	8000d08 <getHeroLevelHealth>
		// TODO
	}

    handleHittingEnemy();
 800149c:	f7ff fbdc 	bl	8000c58 <handleHittingEnemy>
	if(getKilledEnemyCountToWin() == 0) {
 80014a0:	f7ff fc3e 	bl	8000d20 <getKilledEnemyCountToWin>
		// TODO
	}

	updateAllBulletsOnMatrix();
 80014a4:	f7ff fba8 	bl	8000bf8 <updateAllBulletsOnMatrix>
    osDelay(1000);
 80014a8:	e7ee      	b.n	8001488 <StartUpdateBulletsTask+0x8>

080014aa <StartEnemyShootTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEnemyShootTask */
void StartEnemyShootTask(void *argument)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEnemyShootTask */
  /* Infinite loop */
  for(;;) {
	osDelay(5000);
 80014b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80014b6:	f002 ff03 	bl	80042c0 <osDelay>
    if(rand() % 8 == 0) {
 80014ba:	f006 f9a1 	bl	8007800 <rand>
 80014be:	4603      	mov	r3, r0
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f4      	bne.n	80014b2 <StartEnemyShootTask+0x8>
    	int lastRow = findLastRowOfEnemies();
 80014c8:	f7ff fd82 	bl	8000fd0 <findLastRowOfEnemies>
 80014cc:	60f8      	str	r0, [r7, #12]
    	int col = findRandomEnemyCol(lastRow);
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff fda8 	bl	8001024 <findRandomEnemyCol>
 80014d4:	60b8      	str	r0, [r7, #8]
    	if(col != UNDEFINED) {
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d0e9      	beq.n	80014b2 <StartEnemyShootTask+0x8>
    		shoot(lastRow + 1, 1, DOWN);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3301      	adds	r3, #1
 80014e2:	2201      	movs	r2, #1
 80014e4:	2101      	movs	r1, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fa72 	bl	80009d0 <shoot>
	osDelay(5000);
 80014ec:	e7e1      	b.n	80014b2 <StartEnemyShootTask+0x8>
	...

080014f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a04      	ldr	r2, [pc, #16]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001502:	f000 fa8d 	bl	8001a20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40012c00 	.word	0x40012c00

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151c:	e7fe      	b.n	800151c <Error_Handler+0x8>
	...

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_MspInit+0x4c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <HAL_MspInit+0x4c>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_MspInit+0x4c>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_MspInit+0x4c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_MspInit+0x4c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_MspInit+0x4c>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	210f      	movs	r1, #15
 800155a:	f06f 0001 	mvn.w	r0, #1
 800155e:	f000 fb37 	bl	8001bd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_I2C_MspInit+0x7c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d127      	bne.n	80015e2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_I2C_MspInit+0x80>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <HAL_I2C_MspInit+0x80>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6153      	str	r3, [r2, #20]
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_I2C_MspInit+0x80>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80015aa:	23c0      	movs	r3, #192	; 0xc0
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ae:	2312      	movs	r3, #18
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ba:	2304      	movs	r3, #4
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <HAL_I2C_MspInit+0x84>)
 80015c6:	f000 fb2d 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_I2C_MspInit+0x80>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_I2C_MspInit+0x80>)
 80015d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_I2C_MspInit+0x80>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40005400 	.word	0x40005400
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000400 	.word	0x48000400

080015f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_SPI_MspInit+0x7c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d128      	bne.n	800166c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_SPI_MspInit+0x80>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a16      	ldr	r2, [pc, #88]	; (8001678 <HAL_SPI_MspInit+0x80>)
 8001620:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_SPI_MspInit+0x80>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_SPI_MspInit+0x80>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_SPI_MspInit+0x80>)
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_SPI_MspInit+0x80>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800164a:	23e0      	movs	r3, #224	; 0xe0
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800165a:	2305      	movs	r3, #5
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f000 fadc 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40013000 	.word	0x40013000
 8001678:	40021000 	.word	0x40021000

0800167c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a18      	ldr	r2, [pc, #96]	; (80016fc <HAL_PCD_MspInit+0x80>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d129      	bne.n	80016f2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_PCD_MspInit+0x84>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_PCD_MspInit+0x84>)
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	6153      	str	r3, [r2, #20]
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_PCD_MspInit+0x84>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80016b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80016c8:	230e      	movs	r3, #14
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f000 faa5 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_PCD_MspInit+0x84>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_PCD_MspInit+0x84>)
 80016e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_PCD_MspInit+0x84>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	; 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40005c00 	.word	0x40005c00
 8001700:	40021000 	.word	0x40021000

08001704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	2019      	movs	r0, #25
 800171a:	f000 fa59 	bl	8001bd0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800171e:	2019      	movs	r0, #25
 8001720:	f000 fa72 	bl	8001c08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_InitTick+0x9c>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <HAL_InitTick+0x9c>)
 800172a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_InitTick+0x9c>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800173c:	f107 0210 	add.w	r2, r7, #16
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f001 ff1e 	bl	8003588 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800174c:	f001 fefa 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8001750:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <HAL_InitTick+0xa0>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0c9b      	lsrs	r3, r3, #18
 800175c:	3b01      	subs	r3, #1
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_InitTick+0xa4>)
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <HAL_InitTick+0xa8>)
 8001764:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_InitTick+0xa4>)
 8001768:	f240 32e7 	movw	r2, #999	; 0x3e7
 800176c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800176e:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <HAL_InitTick+0xa4>)
 8001770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001772:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <HAL_InitTick+0xa4>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_InitTick+0xa4>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001780:	4809      	ldr	r0, [pc, #36]	; (80017a8 <HAL_InitTick+0xa4>)
 8001782:	f002 f98e 	bl	8003aa2 <HAL_TIM_Base_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d104      	bne.n	8001796 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <HAL_InitTick+0xa4>)
 800178e:	f002 f9e9 	bl	8003b64 <HAL_TIM_Base_Start_IT>
 8001792:	4603      	mov	r3, r0
 8001794:	e000      	b.n	8001798 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3730      	adds	r7, #48	; 0x30
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	431bde83 	.word	0x431bde83
 80017a8:	20002128 	.word	0x20002128
 80017ac:	40012c00 	.word	0x40012c00

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80017e2:	f002 fa29 	bl	8003c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20002128 	.word	0x20002128

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
	return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800180a:	f005 fe37 	bl	800747c <__errno>
 800180e:	4603      	mov	r3, r0
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
	return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001832:	e7fe      	b.n	8001832 <_exit+0x12>

08001834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
	}

return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
	}
	return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f005 fd9c 	bl	800747c <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000a000 	.word	0x2000a000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000344 	.word	0x20000344
 8001978:	200021c8 	.word	0x200021c8

0800197c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <LoopForever+0x6>)
  ldr r1, =_edata
 80019a6:	490e      	ldr	r1, [pc, #56]	; (80019e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a8:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <LoopForever+0xe>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019bc:	4c0b      	ldr	r4, [pc, #44]	; (80019ec <LoopForever+0x16>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ca:	f7ff ffd7 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ce:	f005 fe51 	bl	8007674 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019d2:	f7ff fb63 	bl	800109c <main>

080019d6 <LoopForever>:

LoopForever:
    b LoopForever
 80019d6:	e7fe      	b.n	80019d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019e4:	08008910 	.word	0x08008910
  ldr r2, =_sbss
 80019e8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019ec:	200021c8 	.word	0x200021c8

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_Init+0x28>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_Init+0x28>)
 80019fe:	f043 0310 	orr.w	r3, r3, #16
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f8d8 	bl	8001bba <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f7ff fe7a 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a10:	f7ff fd86 	bl	8001520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000

08001a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	2000016c 	.word	0x2000016c
 8001a44:	20002174 	.word	0x20002174

08001a48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20002174 	.word	0x20002174

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff4c 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be2:	f7ff ff61 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	6978      	ldr	r0, [r7, #20]
 8001bee:	f7ff ffb1 	bl	8001b54 <NVIC_EncodePriority>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff80 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff54 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c32:	e154      	b.n	8001ede <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8146 	beq.w	8001ed8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d005      	beq.n	8001c64 <HAL_GPIO_Init+0x40>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d130      	bne.n	8001cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f003 0201 	and.w	r2, r3, #1
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d017      	beq.n	8001d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d123      	bne.n	8001d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	08da      	lsrs	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3208      	adds	r2, #8
 8001d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	220f      	movs	r2, #15
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	08da      	lsrs	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3208      	adds	r2, #8
 8001d50:	6939      	ldr	r1, [r7, #16]
 8001d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0203 	and.w	r2, r3, #3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80a0 	beq.w	8001ed8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d98:	4b58      	ldr	r3, [pc, #352]	; (8001efc <HAL_GPIO_Init+0x2d8>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a57      	ldr	r2, [pc, #348]	; (8001efc <HAL_GPIO_Init+0x2d8>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b55      	ldr	r3, [pc, #340]	; (8001efc <HAL_GPIO_Init+0x2d8>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001db0:	4a53      	ldr	r2, [pc, #332]	; (8001f00 <HAL_GPIO_Init+0x2dc>)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dda:	d019      	beq.n	8001e10 <HAL_GPIO_Init+0x1ec>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a49      	ldr	r2, [pc, #292]	; (8001f04 <HAL_GPIO_Init+0x2e0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d013      	beq.n	8001e0c <HAL_GPIO_Init+0x1e8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a48      	ldr	r2, [pc, #288]	; (8001f08 <HAL_GPIO_Init+0x2e4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00d      	beq.n	8001e08 <HAL_GPIO_Init+0x1e4>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a47      	ldr	r2, [pc, #284]	; (8001f0c <HAL_GPIO_Init+0x2e8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d007      	beq.n	8001e04 <HAL_GPIO_Init+0x1e0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a46      	ldr	r2, [pc, #280]	; (8001f10 <HAL_GPIO_Init+0x2ec>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d101      	bne.n	8001e00 <HAL_GPIO_Init+0x1dc>
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	e008      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e00:	2305      	movs	r3, #5
 8001e02:	e006      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e04:	2303      	movs	r3, #3
 8001e06:	e004      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e002      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_GPIO_Init+0x1ee>
 8001e10:	2300      	movs	r3, #0
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	f002 0203 	and.w	r2, r2, #3
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	4093      	lsls	r3, r2
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e22:	4937      	ldr	r1, [pc, #220]	; (8001f00 <HAL_GPIO_Init+0x2dc>)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e54:	4a2f      	ldr	r2, [pc, #188]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e5a:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e7e:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ea8:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f47f aea3 	bne.w	8001c34 <HAL_GPIO_Init+0x10>
  }
}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000
 8001f04:	48000400 	.word	0x48000400
 8001f08:	48000800 	.word	0x48000800
 8001f0c:	48000c00 	.word	0x48000c00
 8001f10:	48001000 	.word	0x48001000
 8001f14:	40010400 	.word	0x40010400

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e081      	b.n	800205e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff fafe 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	e006      	b.n	8001fd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d104      	bne.n	8001fe2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002004:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69d9      	ldr	r1, [r3, #28]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b20      	cmp	r3, #32
 800207a:	d138      	bne.n	80020ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002086:	2302      	movs	r3, #2
 8002088:	e032      	b.n	80020f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2224      	movs	r2, #36	; 0x24
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
  }
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b20      	cmp	r3, #32
 8002110:	d139      	bne.n	8002186 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800211c:	2302      	movs	r3, #2
 800211e:	e033      	b.n	8002188 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2224      	movs	r2, #36	; 0x24
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800214e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002186:	2302      	movs	r3, #2
  }
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002196:	b08b      	sub	sp, #44	; 0x2c
 8002198:	af06      	add	r7, sp, #24
 800219a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0d0      	b.n	8002348 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fa5e 	bl	800167c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2203      	movs	r2, #3
 80021c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 ff29 	bl	8004024 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	e04c      	b.n	8002272 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	3301      	adds	r3, #1
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	7bfa      	ldrb	r2, [r7, #15]
 8002200:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	b298      	uxth	r0, r3
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	3336      	adds	r3, #54	; 0x36
 8002216:	4602      	mov	r2, r0
 8002218:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	3303      	adds	r3, #3
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	3338      	adds	r3, #56	; 0x38
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	333c      	adds	r3, #60	; 0x3c
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	3340      	adds	r3, #64	; 0x40
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	3301      	adds	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	d3ad      	bcc.n	80021d8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e044      	b.n	800230c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	3301      	adds	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	d3b5      	bcc.n	8002282 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	687e      	ldr	r6, [r7, #4]
 800231e:	466d      	mov	r5, sp
 8002320:	f106 0410 	add.w	r4, r6, #16
 8002324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	602b      	str	r3, [r5, #0]
 800232c:	1d33      	adds	r3, r6, #4
 800232e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002330:	6838      	ldr	r0, [r7, #0]
 8002332:	f001 fe92 	bl	800405a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002356:	af00      	add	r7, sp, #0
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	f000 bef4 	b.w	8003152 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 816a 	beq.w	800264e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800237a:	4bb3      	ldr	r3, [pc, #716]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b04      	cmp	r3, #4
 8002384:	d00c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002386:	4bb0      	ldr	r3, [pc, #704]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b08      	cmp	r3, #8
 8002390:	d159      	bne.n	8002446 <HAL_RCC_OscConfig+0xf6>
 8002392:	4bad      	ldr	r3, [pc, #692]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239e:	d152      	bne.n	8002446 <HAL_RCC_OscConfig+0xf6>
 80023a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d102      	bne.n	80023d2 <HAL_RCC_OscConfig+0x82>
 80023cc:	4b9e      	ldr	r3, [pc, #632]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0xae>
 80023d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80023fa:	4b93      	ldr	r3, [pc, #588]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002402:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002406:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800240a:	fa92 f2a2 	rbit	r2, r2
 800240e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002412:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002416:	fab2 f282 	clz	r2, r2
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	f042 0220 	orr.w	r2, r2, #32
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f002 021f 	and.w	r2, r2, #31
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 810c 	beq.w	800264c <HAL_RCC_OscConfig+0x2fc>
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 8106 	bne.w	800264c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	f000 be86 	b.w	8003152 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x110>
 8002452:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7c      	ldr	r2, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e030      	b.n	80024c2 <HAL_RCC_OscConfig+0x172>
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x134>
 800246a:	4b77      	ldr	r3, [pc, #476]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a76      	ldr	r2, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 8002470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b74      	ldr	r3, [pc, #464]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a73      	ldr	r2, [pc, #460]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 800247c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01e      	b.n	80024c2 <HAL_RCC_OscConfig+0x172>
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800248e:	d10c      	bne.n	80024aa <HAL_RCC_OscConfig+0x15a>
 8002490:	4b6d      	ldr	r3, [pc, #436]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a6c      	ldr	r2, [pc, #432]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 8002496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a69      	ldr	r2, [pc, #420]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 80024a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	e00b      	b.n	80024c2 <HAL_RCC_OscConfig+0x172>
 80024aa:	4b67      	ldr	r3, [pc, #412]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a66      	ldr	r2, [pc, #408]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 80024b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b64      	ldr	r3, [pc, #400]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a63      	ldr	r2, [pc, #396]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 80024bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024c2:	4b61      	ldr	r3, [pc, #388]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	f023 020f 	bic.w	r2, r3, #15
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	495d      	ldr	r1, [pc, #372]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d059      	beq.n	8002594 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fab2 	bl	8001a48 <HAL_GetTick>
 80024e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ea:	f7ff faad 	bl	8001a48 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d902      	bls.n	8002500 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	f000 be29 	b.w	8003152 <HAL_RCC_OscConfig+0xe02>
 8002500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002504:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002514:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d102      	bne.n	8002532 <HAL_RCC_OscConfig+0x1e2>
 800252c:	4b46      	ldr	r3, [pc, #280]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x20e>
 8002532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002536:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800254a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800254e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002562:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002566:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800256a:	fa92 f2a2 	rbit	r2, r2
 800256e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002572:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002576:	fab2 f282 	clz	r2, r2
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	f042 0220 	orr.w	r2, r2, #32
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	f002 021f 	and.w	r2, r2, #31
 8002586:	2101      	movs	r1, #1
 8002588:	fa01 f202 	lsl.w	r2, r1, r2
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0ab      	beq.n	80024ea <HAL_RCC_OscConfig+0x19a>
 8002592:	e05c      	b.n	800264e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff fa58 	bl	8001a48 <HAL_GetTick>
 8002598:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259e:	f7ff fa53 	bl	8001a48 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d902      	bls.n	80025b4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	f000 bdcf 	b.w	8003152 <HAL_RCC_OscConfig+0xe02>
 80025b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80025c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_OscConfig+0x296>
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x2c2>
 80025e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002602:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_RCC_OscConfig+0x2f8>)
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002616:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800261a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800261e:	fa92 f2a2 	rbit	r2, r2
 8002622:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002626:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800262a:	fab2 f282 	clz	r2, r2
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f042 0220 	orr.w	r2, r2, #32
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f002 021f 	and.w	r2, r2, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ab      	bne.n	800259e <HAL_RCC_OscConfig+0x24e>
 8002646:	e002      	b.n	800264e <HAL_RCC_OscConfig+0x2fe>
 8002648:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 816f 	beq.w	800293c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800265e:	4bd0      	ldr	r3, [pc, #832]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800266a:	4bcd      	ldr	r3, [pc, #820]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b08      	cmp	r3, #8
 8002674:	d16c      	bne.n	8002750 <HAL_RCC_OscConfig+0x400>
 8002676:	4bca      	ldr	r3, [pc, #808]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d166      	bne.n	8002750 <HAL_RCC_OscConfig+0x400>
 8002682:	2302      	movs	r3, #2
 8002684:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002694:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d102      	bne.n	80026b2 <HAL_RCC_OscConfig+0x362>
 80026ac:	4bbc      	ldr	r3, [pc, #752]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	e013      	b.n	80026da <HAL_RCC_OscConfig+0x38a>
 80026b2:	2302      	movs	r3, #2
 80026b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026c4:	2302      	movs	r3, #2
 80026c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80026d6:	4bb2      	ldr	r3, [pc, #712]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	2202      	movs	r2, #2
 80026dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80026e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026e4:	fa92 f2a2 	rbit	r2, r2
 80026e8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80026ec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_RCC_OscConfig+0x3cc>
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d002      	beq.n	800271c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f000 bd1b 	b.w	8003152 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4ba0      	ldr	r3, [pc, #640]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	21f8      	movs	r1, #248	; 0xf8
 800272c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002734:	fa91 f1a1 	rbit	r1, r1
 8002738:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800273c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002740:	fab1 f181 	clz	r1, r1
 8002744:	b2c9      	uxtb	r1, r1
 8002746:	408b      	lsls	r3, r1
 8002748:	4995      	ldr	r1, [pc, #596]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274e:	e0f5      	b.n	800293c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8085 	beq.w	8002866 <HAL_RCC_OscConfig+0x516>
 800275c:	2301      	movs	r3, #1
 800275e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800276e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800277c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	461a      	mov	r2, r3
 8002784:	2301      	movs	r3, #1
 8002786:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff f95e 	bl	8001a48 <HAL_GetTick>
 800278c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002792:	f7ff f959 	bl	8001a48 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d902      	bls.n	80027a8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	f000 bcd5 	b.w	8003152 <HAL_RCC_OscConfig+0xe02>
 80027a8:	2302      	movs	r3, #2
 80027aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80027ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <HAL_RCC_OscConfig+0x488>
 80027d2:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	e013      	b.n	8002800 <HAL_RCC_OscConfig+0x4b0>
 80027d8:	2302      	movs	r3, #2
 80027da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027ea:	2302      	movs	r3, #2
 80027ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80027fc:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	2202      	movs	r2, #2
 8002802:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002806:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800280a:	fa92 f2a2 	rbit	r2, r2
 800280e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002812:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002816:	fab2 f282 	clz	r2, r2
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f042 0220 	orr.w	r2, r2, #32
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	f002 021f 	and.w	r2, r2, #31
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0af      	beq.n	8002792 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002832:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	21f8      	movs	r1, #248	; 0xf8
 8002842:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800284a:	fa91 f1a1 	rbit	r1, r1
 800284e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002852:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002856:	fab1 f181 	clz	r1, r1
 800285a:	b2c9      	uxtb	r1, r1
 800285c:	408b      	lsls	r3, r1
 800285e:	4950      	ldr	r1, [pc, #320]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]
 8002864:	e06a      	b.n	800293c <HAL_RCC_OscConfig+0x5ec>
 8002866:	2301      	movs	r3, #1
 8002868:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002878:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002886:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	461a      	mov	r2, r3
 800288e:	2300      	movs	r3, #0
 8002890:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7ff f8d9 	bl	8001a48 <HAL_GetTick>
 8002896:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289c:	f7ff f8d4 	bl	8001a48 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d902      	bls.n	80028b2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	f000 bc50 	b.w	8003152 <HAL_RCC_OscConfig+0xe02>
 80028b2:	2302      	movs	r3, #2
 80028b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80028c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_OscConfig+0x592>
 80028dc:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	e013      	b.n	800290a <HAL_RCC_OscConfig+0x5ba>
 80028e2:	2302      	movs	r3, #2
 80028e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028f4:	2302      	movs	r3, #2
 80028f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80028fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002906:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <HAL_RCC_OscConfig+0x650>)
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2202      	movs	r2, #2
 800290c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002910:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002914:	fa92 f2a2 	rbit	r2, r2
 8002918:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800291c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002920:	fab2 f282 	clz	r2, r2
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f042 0220 	orr.w	r2, r2, #32
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f002 021f 	and.w	r2, r2, #31
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f202 	lsl.w	r2, r1, r2
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1af      	bne.n	800289c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80da 	beq.w	8002b00 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d069      	beq.n	8002a2a <HAL_RCC_OscConfig+0x6da>
 8002956:	2301      	movs	r3, #1
 8002958:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_OscConfig+0x654>)
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	461a      	mov	r2, r3
 800297c:	2301      	movs	r3, #1
 800297e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7ff f862 	bl	8001a48 <HAL_GetTick>
 8002984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002988:	e00e      	b.n	80029a8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298a:	f7ff f85d 	bl	8001a48 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d906      	bls.n	80029a8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e3d9      	b.n	8003152 <HAL_RCC_OscConfig+0xe02>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	10908120 	.word	0x10908120
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80029be:	2202      	movs	r2, #2
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f2a3 	rbit	r2, r3
 80029cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80029d6:	2202      	movs	r2, #2
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fa93 f2a3 	rbit	r2, r3
 80029e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	4ba5      	ldr	r3, [pc, #660]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 80029ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029f2:	2102      	movs	r1, #2
 80029f4:	6019      	str	r1, [r3, #0]
 80029f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fa93 f1a3 	rbit	r1, r3
 8002a00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a04:	6019      	str	r1, [r3, #0]
  return result;
 8002a06:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0b0      	beq.n	800298a <HAL_RCC_OscConfig+0x63a>
 8002a28:	e06a      	b.n	8002b00 <HAL_RCC_OscConfig+0x7b0>
 8002a2a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a40:	601a      	str	r2, [r3, #0]
  return result;
 8002a42:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a46:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4b8c      	ldr	r3, [pc, #560]	; (8002c84 <HAL_RCC_OscConfig+0x934>)
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	461a      	mov	r2, r3
 8002a58:	2300      	movs	r3, #0
 8002a5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fff4 	bl	8001a48 <HAL_GetTick>
 8002a60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a64:	e009      	b.n	8002a7a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a66:	f7fe ffef 	bl	8001a48 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e36b      	b.n	8003152 <HAL_RCC_OscConfig+0xe02>
 8002a7a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a7e:	2202      	movs	r2, #2
 8002a80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fa93 f2a3 	rbit	r2, r3
 8002a8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a96:	2202      	movs	r2, #2
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	fa93 f2a3 	rbit	r2, r3
 8002aa4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002aae:	2202      	movs	r2, #2
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	fa93 f2a3 	rbit	r2, r3
 8002abc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ac0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac2:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002aca:	2102      	movs	r1, #2
 8002acc:	6019      	str	r1, [r3, #0]
 8002ace:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	fa93 f1a3 	rbit	r1, r3
 8002ad8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002adc:	6019      	str	r1, [r3, #0]
  return result;
 8002ade:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1b2      	bne.n	8002a66 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8158 	beq.w	8002dc0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b5a      	ldr	r3, [pc, #360]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d112      	bne.n	8002b48 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b57      	ldr	r3, [pc, #348]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4a56      	ldr	r2, [pc, #344]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	61d3      	str	r3, [r2, #28]
 8002b2e:	4b54      	ldr	r3, [pc, #336]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b36:	f107 0308 	add.w	r3, r7, #8
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f107 0308 	add.w	r3, r7, #8
 8002b40:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	4b4f      	ldr	r3, [pc, #316]	; (8002c88 <HAL_RCC_OscConfig+0x938>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11a      	bne.n	8002b8a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b54:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <HAL_RCC_OscConfig+0x938>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a4b      	ldr	r2, [pc, #300]	; (8002c88 <HAL_RCC_OscConfig+0x938>)
 8002b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b60:	f7fe ff72 	bl	8001a48 <HAL_GetTick>
 8002b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b68:	e009      	b.n	8002b7e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6a:	f7fe ff6d 	bl	8001a48 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e2e9      	b.n	8003152 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b42      	ldr	r3, [pc, #264]	; (8002c88 <HAL_RCC_OscConfig+0x938>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ef      	beq.n	8002b6a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x852>
 8002b94:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4a39      	ldr	r2, [pc, #228]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6213      	str	r3, [r2, #32]
 8002ba0:	e02f      	b.n	8002c02 <HAL_RCC_OscConfig+0x8b2>
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x876>
 8002bac:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4a33      	ldr	r2, [pc, #204]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	6213      	str	r3, [r2, #32]
 8002bb8:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4a30      	ldr	r2, [pc, #192]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	6213      	str	r3, [r2, #32]
 8002bc4:	e01d      	b.n	8002c02 <HAL_RCC_OscConfig+0x8b2>
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d10c      	bne.n	8002bea <HAL_RCC_OscConfig+0x89a>
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a2a      	ldr	r2, [pc, #168]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6213      	str	r3, [r2, #32]
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	e00b      	b.n	8002c02 <HAL_RCC_OscConfig+0x8b2>
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d06b      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0c:	f7fe ff1c 	bl	8001a48 <HAL_GetTick>
 8002c10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	e00b      	b.n	8002c2e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fe ff17 	bl	8001a48 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e291      	b.n	8003152 <HAL_RCC_OscConfig+0xe02>
 8002c2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c32:	2202      	movs	r2, #2
 8002c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	fa93 f2a3 	rbit	r2, r3
 8002c40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f2a3 	rbit	r2, r3
 8002c58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c5c:	601a      	str	r2, [r3, #0]
  return result;
 8002c5e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d109      	bne.n	8002c8c <HAL_RCC_OscConfig+0x93c>
 8002c78:	4b01      	ldr	r3, [pc, #4]	; (8002c80 <HAL_RCC_OscConfig+0x930>)
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	e014      	b.n	8002ca8 <HAL_RCC_OscConfig+0x958>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	10908120 	.word	0x10908120
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c90:	2202      	movs	r2, #2
 8002c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	fa93 f2a3 	rbit	r2, r3
 8002c9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	4bbb      	ldr	r3, [pc, #748]	; (8002f94 <HAL_RCC_OscConfig+0xc44>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cac:	2102      	movs	r1, #2
 8002cae:	6011      	str	r1, [r2, #0]
 8002cb0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	fa92 f1a2 	rbit	r1, r2
 8002cba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002cbe:	6011      	str	r1, [r2, #0]
  return result;
 8002cc0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	fab2 f282 	clz	r2, r2
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	f002 021f 	and.w	r2, r2, #31
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d099      	beq.n	8002c16 <HAL_RCC_OscConfig+0x8c6>
 8002ce2:	e063      	b.n	8002dac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce4:	f7fe feb0 	bl	8001a48 <HAL_GetTick>
 8002ce8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7fe feab 	bl	8001a48 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e225      	b.n	8003152 <HAL_RCC_OscConfig+0xe02>
 8002d06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	fa93 f2a3 	rbit	r2, r3
 8002d18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d22:	2202      	movs	r2, #2
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	fa93 f2a3 	rbit	r2, r3
 8002d30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d34:	601a      	str	r2, [r3, #0]
  return result;
 8002d36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f043 0302 	orr.w	r3, r3, #2
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d102      	bne.n	8002d56 <HAL_RCC_OscConfig+0xa06>
 8002d50:	4b90      	ldr	r3, [pc, #576]	; (8002f94 <HAL_RCC_OscConfig+0xc44>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	e00d      	b.n	8002d72 <HAL_RCC_OscConfig+0xa22>
 8002d56:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	4b89      	ldr	r3, [pc, #548]	; (8002f94 <HAL_RCC_OscConfig+0xc44>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d76:	2102      	movs	r1, #2
 8002d78:	6011      	str	r1, [r2, #0]
 8002d7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	fa92 f1a2 	rbit	r1, r2
 8002d84:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002d88:	6011      	str	r1, [r2, #0]
  return result;
 8002d8a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f002 021f 	and.w	r2, r2, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1a0      	bne.n	8002cee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db4:	4b77      	ldr	r3, [pc, #476]	; (8002f94 <HAL_RCC_OscConfig+0xc44>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	4a76      	ldr	r2, [pc, #472]	; (8002f94 <HAL_RCC_OscConfig+0xc44>)
 8002dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc0:	1d3b      	adds	r3, r7, #4
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 81c2 	beq.w	8003150 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dcc:	4b71      	ldr	r3, [pc, #452]	; (8002f94 <HAL_RCC_OscConfig+0xc44>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	f000 819c 	beq.w	8003112 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	f040 8114 	bne.w	800300e <HAL_RCC_OscConfig+0xcbe>
 8002de6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002dea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	fa93 f2a3 	rbit	r2, r3
 8002dfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002dfe:	601a      	str	r2, [r3, #0]
  return result;
 8002e00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e04:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	461a      	mov	r2, r3
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fe14 	bl	8001a48 <HAL_GetTick>
 8002e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e24:	e009      	b.n	8002e3a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e26:	f7fe fe0f 	bl	8001a48 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e18b      	b.n	8003152 <HAL_RCC_OscConfig+0xe02>
 8002e3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	fa93 f2a3 	rbit	r2, r3
 8002e4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e52:	601a      	str	r2, [r3, #0]
  return result;
 8002e54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d102      	bne.n	8002e74 <HAL_RCC_OscConfig+0xb24>
 8002e6e:	4b49      	ldr	r3, [pc, #292]	; (8002f94 <HAL_RCC_OscConfig+0xc44>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	e01b      	b.n	8002eac <HAL_RCC_OscConfig+0xb5c>
 8002e74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	fa93 f2a3 	rbit	r2, r3
 8002e88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	fa93 f2a3 	rbit	r2, r3
 8002ea2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCC_OscConfig+0xc44>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002eb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002eb4:	6011      	str	r1, [r2, #0]
 8002eb6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	fa92 f1a2 	rbit	r1, r2
 8002ec0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002ec4:	6011      	str	r1, [r2, #0]
  return result;
 8002ec6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	fab2 f282 	clz	r2, r2
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	f042 0220 	orr.w	r2, r2, #32
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	f002 021f 	and.w	r2, r2, #31
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d19e      	bne.n	8002e26 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee8:	4b2a      	ldr	r3, [pc, #168]	; (8002f94 <HAL_RCC_OscConfig+0xc44>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	4925      	ldr	r1, [pc, #148]	; (8002f94 <HAL_RCC_OscConfig+0xc44>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
 8002f04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f1c:	601a      	str	r2, [r3, #0]
  return result;
 8002f1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f22:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	461a      	mov	r2, r3
 8002f36:	2301      	movs	r3, #1
 8002f38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fd85 	bl	8001a48 <HAL_GetTick>
 8002f3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f42:	e009      	b.n	8002f58 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe fd80 	bl	8001a48 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0fc      	b.n	8003152 <HAL_RCC_OscConfig+0xe02>
 8002f58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	fa93 f2a3 	rbit	r2, r3
 8002f6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f70:	601a      	str	r2, [r3, #0]
  return result;
 8002f72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCC_OscConfig+0xc48>
 8002f8c:	4b01      	ldr	r3, [pc, #4]	; (8002f94 <HAL_RCC_OscConfig+0xc44>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	e01e      	b.n	8002fd0 <HAL_RCC_OscConfig+0xc80>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fa93 f2a3 	rbit	r2, r3
 8002fac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa93 f2a3 	rbit	r2, r3
 8002fc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	4b63      	ldr	r3, [pc, #396]	; (800315c <HAL_RCC_OscConfig+0xe0c>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fd8:	6011      	str	r1, [r2, #0]
 8002fda:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	fa92 f1a2 	rbit	r1, r2
 8002fe4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002fe8:	6011      	str	r1, [r2, #0]
  return result;
 8002fea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	fab2 f282 	clz	r2, r2
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	f042 0220 	orr.w	r2, r2, #32
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	f002 021f 	and.w	r2, r2, #31
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f202 	lsl.w	r2, r1, r2
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d09b      	beq.n	8002f44 <HAL_RCC_OscConfig+0xbf4>
 800300c:	e0a0      	b.n	8003150 <HAL_RCC_OscConfig+0xe00>
 800300e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003012:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	fa93 f2a3 	rbit	r2, r3
 8003022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003026:	601a      	str	r2, [r3, #0]
  return result;
 8003028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800302c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003038:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	461a      	mov	r2, r3
 8003040:	2300      	movs	r3, #0
 8003042:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fd00 	bl	8001a48 <HAL_GetTick>
 8003048:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304c:	e009      	b.n	8003062 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe fcfb 	bl	8001a48 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e077      	b.n	8003152 <HAL_RCC_OscConfig+0xe02>
 8003062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800306a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	fa93 f2a3 	rbit	r2, r3
 8003076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307a:	601a      	str	r2, [r3, #0]
  return result;
 800307c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003080:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d102      	bne.n	800309c <HAL_RCC_OscConfig+0xd4c>
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_RCC_OscConfig+0xe0c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	e01b      	b.n	80030d4 <HAL_RCC_OscConfig+0xd84>
 800309c:	f107 0320 	add.w	r3, r7, #32
 80030a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f107 0320 	add.w	r3, r7, #32
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f2a3 	rbit	r2, r3
 80030b0:	f107 031c 	add.w	r3, r7, #28
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f107 0318 	add.w	r3, r7, #24
 80030ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f107 0318 	add.w	r3, r7, #24
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	fa93 f2a3 	rbit	r2, r3
 80030ca:	f107 0314 	add.w	r3, r7, #20
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	4b22      	ldr	r3, [pc, #136]	; (800315c <HAL_RCC_OscConfig+0xe0c>)
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f107 0210 	add.w	r2, r7, #16
 80030d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030dc:	6011      	str	r1, [r2, #0]
 80030de:	f107 0210 	add.w	r2, r7, #16
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	fa92 f1a2 	rbit	r1, r2
 80030e8:	f107 020c 	add.w	r2, r7, #12
 80030ec:	6011      	str	r1, [r2, #0]
  return result;
 80030ee:	f107 020c 	add.w	r2, r7, #12
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f002 021f 	and.w	r2, r2, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f202 	lsl.w	r2, r1, r2
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d19e      	bne.n	800304e <HAL_RCC_OscConfig+0xcfe>
 8003110:	e01e      	b.n	8003150 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003112:	1d3b      	adds	r3, r7, #4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e018      	b.n	8003152 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCC_OscConfig+0xe0c>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003128:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800312c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	429a      	cmp	r2, r3
 8003138:	d108      	bne.n	800314c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800313a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800313e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000

08003160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b09e      	sub	sp, #120	; 0x78
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e162      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b90      	ldr	r3, [pc, #576]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d910      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b8d      	ldr	r3, [pc, #564]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 0207 	bic.w	r2, r3, #7
 800318e:	498b      	ldr	r1, [pc, #556]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b89      	ldr	r3, [pc, #548]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e14a      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b4:	4b82      	ldr	r3, [pc, #520]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	497f      	ldr	r1, [pc, #508]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80dc 	beq.w	800338c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d13c      	bne.n	8003256 <HAL_RCC_ClockConfig+0xf6>
 80031dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d102      	bne.n	8003206 <HAL_RCC_ClockConfig+0xa6>
 8003200:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	e00f      	b.n	8003226 <HAL_RCC_ClockConfig+0xc6>
 8003206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800320a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	667b      	str	r3, [r7, #100]	; 0x64
 8003214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003218:	663b      	str	r3, [r7, #96]	; 0x60
 800321a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003222:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800322a:	65ba      	str	r2, [r7, #88]	; 0x58
 800322c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800322e:	fa92 f2a2 	rbit	r2, r2
 8003232:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003234:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003236:	fab2 f282 	clz	r2, r2
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	f042 0220 	orr.w	r2, r2, #32
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	f002 021f 	and.w	r2, r2, #31
 8003246:	2101      	movs	r1, #1
 8003248:	fa01 f202 	lsl.w	r2, r1, r2
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d17b      	bne.n	800334a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0f3      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d13c      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x178>
 800325e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003262:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800326c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d102      	bne.n	8003288 <HAL_RCC_ClockConfig+0x128>
 8003282:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	e00f      	b.n	80032a8 <HAL_RCC_ClockConfig+0x148>
 8003288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	647b      	str	r3, [r7, #68]	; 0x44
 8003296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329a:	643b      	str	r3, [r7, #64]	; 0x40
 800329c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a4:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80032ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032b0:	fa92 f2a2 	rbit	r2, r2
 80032b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f042 0220 	orr.w	r2, r2, #32
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f002 021f 	and.w	r2, r2, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d13a      	bne.n	800334a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0b2      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
 80032d8:	2302      	movs	r3, #2
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d102      	bne.n	8003300 <HAL_RCC_ClockConfig+0x1a0>
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	e00d      	b.n	800331c <HAL_RCC_ClockConfig+0x1bc>
 8003300:	2302      	movs	r3, #2
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	2302      	movs	r3, #2
 800330e:	623b      	str	r3, [r7, #32]
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	61fb      	str	r3, [r7, #28]
 8003318:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	2202      	movs	r2, #2
 800331e:	61ba      	str	r2, [r7, #24]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	fa92 f2a2 	rbit	r2, r2
 8003326:	617a      	str	r2, [r7, #20]
  return result;
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	fab2 f282 	clz	r2, r2
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	f002 021f 	and.w	r2, r2, #31
 800333a:	2101      	movs	r1, #1
 800333c:	fa01 f202 	lsl.w	r2, r1, r2
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e079      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f023 0203 	bic.w	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	491a      	ldr	r1, [pc, #104]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800335c:	f7fe fb74 	bl	8001a48 <HAL_GetTick>
 8003360:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	e00a      	b.n	800337a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003364:	f7fe fb70 	bl	8001a48 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e061      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_RCC_ClockConfig+0x260>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 020c 	and.w	r2, r3, #12
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	429a      	cmp	r2, r3
 800338a:	d1eb      	bne.n	8003364 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d214      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 0207 	bic.w	r2, r3, #7
 80033a2:	4906      	ldr	r1, [pc, #24]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b04      	ldr	r3, [pc, #16]	; (80033bc <HAL_RCC_ClockConfig+0x25c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e040      	b.n	800343e <HAL_RCC_ClockConfig+0x2de>
 80033bc:	40022000 	.word	0x40022000
 80033c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCC_ClockConfig+0x2e8>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	491a      	ldr	r1, [pc, #104]	; (8003448 <HAL_RCC_ClockConfig+0x2e8>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ee:	4b16      	ldr	r3, [pc, #88]	; (8003448 <HAL_RCC_ClockConfig+0x2e8>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4912      	ldr	r1, [pc, #72]	; (8003448 <HAL_RCC_ClockConfig+0x2e8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003402:	f000 f829 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003406:	4601      	mov	r1, r0
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <HAL_RCC_ClockConfig+0x2e8>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003410:	22f0      	movs	r2, #240	; 0xf0
 8003412:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	fa92 f2a2 	rbit	r2, r2
 800341a:	60fa      	str	r2, [r7, #12]
  return result;
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	fab2 f282 	clz	r2, r2
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	40d3      	lsrs	r3, r2
 8003426:	4a09      	ldr	r2, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x2ec>)
 8003428:	5cd3      	ldrb	r3, [r2, r3]
 800342a:	fa21 f303 	lsr.w	r3, r1, r3
 800342e:	4a08      	ldr	r2, [pc, #32]	; (8003450 <HAL_RCC_ClockConfig+0x2f0>)
 8003430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_RCC_ClockConfig+0x2f4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe f964 	bl	8001704 <HAL_InitTick>
  
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3778      	adds	r7, #120	; 0x78
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	08008784 	.word	0x08008784
 8003450:	20000164 	.word	0x20000164
 8003454:	20000168 	.word	0x20000168

08003458 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b08b      	sub	sp, #44	; 0x2c
 800345c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003472:	4b29      	ldr	r3, [pc, #164]	; (8003518 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b04      	cmp	r3, #4
 8003480:	d002      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x30>
 8003482:	2b08      	cmp	r3, #8
 8003484:	d003      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x36>
 8003486:	e03c      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003488:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_RCC_GetSysClockFreq+0xc4>)
 800348a:	623b      	str	r3, [r7, #32]
      break;
 800348c:	e03c      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003494:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003498:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	fa92 f2a2 	rbit	r2, r2
 80034a0:	607a      	str	r2, [r7, #4]
  return result;
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	fab2 f282 	clz	r2, r2
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	40d3      	lsrs	r3, r2
 80034ac:	4a1c      	ldr	r2, [pc, #112]	; (8003520 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034b2:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	220f      	movs	r2, #15
 80034bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	fa92 f2a2 	rbit	r2, r2
 80034c4:	60fa      	str	r2, [r7, #12]
  return result;
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	fab2 f282 	clz	r2, r2
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	40d3      	lsrs	r3, r2
 80034d0:	4a14      	ldr	r2, [pc, #80]	; (8003524 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034e0:	4a0e      	ldr	r2, [pc, #56]	; (800351c <HAL_RCC_GetSysClockFreq+0xc4>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
 80034f0:	e004      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	623b      	str	r3, [r7, #32]
      break;
 8003500:	e002      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003504:	623b      	str	r3, [r7, #32]
      break;
 8003506:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003508:	6a3b      	ldr	r3, [r7, #32]
}
 800350a:	4618      	mov	r0, r3
 800350c:	372c      	adds	r7, #44	; 0x2c
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	007a1200 	.word	0x007a1200
 8003520:	0800879c 	.word	0x0800879c
 8003524:	080087ac 	.word	0x080087ac
 8003528:	003d0900 	.word	0x003d0900

0800352c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003530:	4b03      	ldr	r3, [pc, #12]	; (8003540 <HAL_RCC_GetHCLKFreq+0x14>)
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000164 	.word	0x20000164

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800354a:	f7ff ffef 	bl	800352c <HAL_RCC_GetHCLKFreq>
 800354e:	4601      	mov	r1, r0
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003558:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800355c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	fa92 f2a2 	rbit	r2, r2
 8003564:	603a      	str	r2, [r7, #0]
  return result;
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	fab2 f282 	clz	r2, r2
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	40d3      	lsrs	r3, r2
 8003570:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003572:	5cd3      	ldrb	r3, [r2, r3]
 8003574:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000
 8003584:	08008794 	.word	0x08008794

08003588 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	220f      	movs	r2, #15
 8003596:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_RCC_GetClockConfig+0x5c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0203 	and.w	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <HAL_RCC_GetClockConfig+0x5c>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <HAL_RCC_GetClockConfig+0x5c>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035bc:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_GetClockConfig+0x5c>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	08db      	lsrs	r3, r3, #3
 80035c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <HAL_RCC_GetClockConfig+0x60>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0207 	and.w	r2, r3, #7
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	601a      	str	r2, [r3, #0]
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40022000 	.word	0x40022000

080035ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b092      	sub	sp, #72	; 0x48
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80d4 	beq.w	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003610:	4b4e      	ldr	r3, [pc, #312]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10e      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	4b4b      	ldr	r3, [pc, #300]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	4a4a      	ldr	r2, [pc, #296]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003626:	61d3      	str	r3, [r2, #28]
 8003628:	4b48      	ldr	r3, [pc, #288]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363a:	4b45      	ldr	r3, [pc, #276]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d118      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003646:	4b42      	ldr	r3, [pc, #264]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a41      	ldr	r2, [pc, #260]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003652:	f7fe f9f9 	bl	8001a48 <HAL_GetTick>
 8003656:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	e008      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fe f9f5 	bl	8001a48 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b64      	cmp	r3, #100	; 0x64
 8003666:	d901      	bls.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e169      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003678:	4b34      	ldr	r3, [pc, #208]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8084 	beq.w	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003694:	429a      	cmp	r2, r3
 8003696:	d07c      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003698:	4b2c      	ldr	r3, [pc, #176]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	461a      	mov	r2, r3
 80036c2:	2301      	movs	r3, #1
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	461a      	mov	r2, r3
 80036e6:	2300      	movs	r3, #0
 80036e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036ea:	4a18      	ldr	r2, [pc, #96]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d04b      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fe f9a5 	bl	8001a48 <HAL_GetTick>
 80036fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7fe f9a1 	bl	8001a48 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e113      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003718:	2302      	movs	r3, #2
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
 8003724:	2302      	movs	r3, #2
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	61fb      	str	r3, [r7, #28]
  return result;
 8003730:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d108      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003746:	4b01      	ldr	r3, [pc, #4]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	e00d      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800374c:	40021000 	.word	0x40021000
 8003750:	40007000 	.word	0x40007000
 8003754:	10908100 	.word	0x10908100
 8003758:	2302      	movs	r3, #2
 800375a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	4b78      	ldr	r3, [pc, #480]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2202      	movs	r2, #2
 800376a:	613a      	str	r2, [r7, #16]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	fa92 f2a2 	rbit	r2, r2
 8003772:	60fa      	str	r2, [r7, #12]
  return result;
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	fab2 f282 	clz	r2, r2
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	f002 021f 	and.w	r2, r2, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0b7      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003792:	4b6d      	ldr	r3, [pc, #436]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	496a      	ldr	r1, [pc, #424]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d105      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ac:	4b66      	ldr	r3, [pc, #408]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	4a65      	ldr	r2, [pc, #404]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d008      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037c4:	4b60      	ldr	r3, [pc, #384]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	f023 0203 	bic.w	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	495d      	ldr	r1, [pc, #372]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e2:	4b59      	ldr	r3, [pc, #356]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	4956      	ldr	r1, [pc, #344]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003800:	4b51      	ldr	r3, [pc, #324]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	494e      	ldr	r1, [pc, #312]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380e:	4313      	orrs	r3, r2
 8003810:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800381e:	4b4a      	ldr	r3, [pc, #296]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f023 0210 	bic.w	r2, r3, #16
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	4947      	ldr	r1, [pc, #284]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800383c:	4b42      	ldr	r3, [pc, #264]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	493f      	ldr	r1, [pc, #252]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f023 0220 	bic.w	r2, r3, #32
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	4938      	ldr	r1, [pc, #224]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003868:	4313      	orrs	r3, r2
 800386a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003878:	4b33      	ldr	r3, [pc, #204]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	4930      	ldr	r1, [pc, #192]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003886:	4313      	orrs	r3, r2
 8003888:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003896:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	4929      	ldr	r1, [pc, #164]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038b4:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	4921      	ldr	r1, [pc, #132]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	491a      	ldr	r1, [pc, #104]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	4912      	ldr	r1, [pc, #72]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800390e:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	490b      	ldr	r1, [pc, #44]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800391c:	4313      	orrs	r3, r2
 800391e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003938:	4903      	ldr	r1, [pc, #12]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3748      	adds	r7, #72	; 0x48
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000

0800394c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e09d      	b.n	8003a9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396e:	d009      	beq.n	8003984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
 8003976:	e005      	b.n	8003984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd fe2a 	bl	80015f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c4:	d902      	bls.n	80039cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	e002      	b.n	80039d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039da:	d007      	beq.n	80039ec <HAL_SPI_Init+0xa0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039e4:	d002      	beq.n	80039ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	ea42 0103 	orr.w	r1, r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	0c1b      	lsrs	r3, r3, #16
 8003a48:	f003 0204 	and.w	r2, r3, #4
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a68:	ea42 0103 	orr.w	r1, r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e049      	b.n	8003b48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f841 	bl	8003b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f000 f9f1 	bl	8003ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d001      	beq.n	8003b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e04a      	b.n	8003c12 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d018      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba6:	d013      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00e      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1c      	ldr	r2, [pc, #112]	; (8003c28 <HAL_TIM_Base_Start_IT+0xc4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1a      	ldr	r2, [pc, #104]	; (8003c2c <HAL_TIM_Base_Start_IT+0xc8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d115      	bne.n	8003bfc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b06      	cmp	r3, #6
 8003be0:	d015      	beq.n	8003c0e <HAL_TIM_Base_Start_IT+0xaa>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d011      	beq.n	8003c0e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfa:	e008      	b.n	8003c0e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e000      	b.n	8003c10 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800
 8003c2c:	40013400 	.word	0x40013400
 8003c30:	40014000 	.word	0x40014000
 8003c34:	00010007 	.word	0x00010007

08003c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d122      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d11b      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0202 	mvn.w	r2, #2
 8003c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f905 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8f7 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f908 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d122      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d11b      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0204 	mvn.w	r2, #4
 8003cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f8db 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003cd4:	e005      	b.n	8003ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8cd 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f8de 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d122      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d11b      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0208 	mvn.w	r2, #8
 8003d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2204      	movs	r2, #4
 8003d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8b1 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003d28:	e005      	b.n	8003d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8a3 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f8b4 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0210 	mvn.w	r2, #16
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2208      	movs	r2, #8
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f887 	bl	8003e8a <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f879 	bl	8003e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f88a 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0201 	mvn.w	r2, #1
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fd fb9a 	bl	80014f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b80      	cmp	r3, #128	; 0x80
 8003dc8:	d10e      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f90a 	bl	8003ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	d10e      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b80      	cmp	r3, #128	; 0x80
 8003e04:	d107      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8fd 	bl	8004010 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d10e      	bne.n	8003e42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d107      	bne.n	8003e42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f838 	bl	8003eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d10e      	bne.n	8003e6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d107      	bne.n	8003e6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f06f 0220 	mvn.w	r2, #32
 8003e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f8bd 	bl	8003fe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a3c      	ldr	r2, [pc, #240]	; (8003fcc <TIM_Base_SetConfig+0x104>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00f      	beq.n	8003f00 <TIM_Base_SetConfig+0x38>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d00b      	beq.n	8003f00 <TIM_Base_SetConfig+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a39      	ldr	r2, [pc, #228]	; (8003fd0 <TIM_Base_SetConfig+0x108>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d007      	beq.n	8003f00 <TIM_Base_SetConfig+0x38>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a38      	ldr	r2, [pc, #224]	; (8003fd4 <TIM_Base_SetConfig+0x10c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_Base_SetConfig+0x38>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a37      	ldr	r2, [pc, #220]	; (8003fd8 <TIM_Base_SetConfig+0x110>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d108      	bne.n	8003f12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2d      	ldr	r2, [pc, #180]	; (8003fcc <TIM_Base_SetConfig+0x104>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01b      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f20:	d017      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2a      	ldr	r2, [pc, #168]	; (8003fd0 <TIM_Base_SetConfig+0x108>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <TIM_Base_SetConfig+0x10c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00f      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a28      	ldr	r2, [pc, #160]	; (8003fd8 <TIM_Base_SetConfig+0x110>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d007      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a26      	ldr	r2, [pc, #152]	; (8003fe0 <TIM_Base_SetConfig+0x118>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d003      	beq.n	8003f52 <TIM_Base_SetConfig+0x8a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a25      	ldr	r2, [pc, #148]	; (8003fe4 <TIM_Base_SetConfig+0x11c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d108      	bne.n	8003f64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <TIM_Base_SetConfig+0x104>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00f      	beq.n	8003fb0 <TIM_Base_SetConfig+0xe8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <TIM_Base_SetConfig+0x110>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <TIM_Base_SetConfig+0xe8>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <TIM_Base_SetConfig+0x114>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d007      	beq.n	8003fb0 <TIM_Base_SetConfig+0xe8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <TIM_Base_SetConfig+0x118>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <TIM_Base_SetConfig+0xe8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a0e      	ldr	r2, [pc, #56]	; (8003fe4 <TIM_Base_SetConfig+0x11c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d103      	bne.n	8003fb8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	615a      	str	r2, [r3, #20]
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	40000800 	.word	0x40000800
 8003fd8:	40013400 	.word	0x40013400
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40014400 	.word	0x40014400
 8003fe4:	40014800 	.word	0x40014800

08003fe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800402c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004030:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	b29b      	uxth	r3, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	b29b      	uxth	r3, r3
 8004042:	4013      	ands	r3, r2
 8004044:	b29a      	uxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800405a:	b084      	sub	sp, #16
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	f107 0014 	add.w	r0, r7, #20
 8004068:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	b004      	add	sp, #16
 800409a:	4770      	bx	lr

0800409c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040a2:	f3ef 8305 	mrs	r3, IPSR
 80040a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80040a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10f      	bne.n	80040ce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ae:	f3ef 8310 	mrs	r3, PRIMASK
 80040b2:	607b      	str	r3, [r7, #4]
  return(result);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <osKernelInitialize+0x32>
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <osKernelInitialize+0x64>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d109      	bne.n	80040d6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040c2:	f3ef 8311 	mrs	r3, BASEPRI
 80040c6:	603b      	str	r3, [r7, #0]
  return(result);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80040ce:	f06f 0305 	mvn.w	r3, #5
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e00c      	b.n	80040f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <osKernelInitialize+0x64>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d105      	bne.n	80040ea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <osKernelInitialize+0x64>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e002      	b.n	80040f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040f0:	68fb      	ldr	r3, [r7, #12]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000348 	.word	0x20000348

08004104 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800410a:	f3ef 8305 	mrs	r3, IPSR
 800410e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004110:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004116:	f3ef 8310 	mrs	r3, PRIMASK
 800411a:	607b      	str	r3, [r7, #4]
  return(result);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <osKernelStart+0x32>
 8004122:	4b11      	ldr	r3, [pc, #68]	; (8004168 <osKernelStart+0x64>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d109      	bne.n	800413e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800412a:	f3ef 8311 	mrs	r3, BASEPRI
 800412e:	603b      	str	r3, [r7, #0]
  return(result);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004136:	f06f 0305 	mvn.w	r3, #5
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	e00e      	b.n	800415c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <osKernelStart+0x64>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <osKernelStart+0x64>)
 8004148:	2202      	movs	r2, #2
 800414a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800414c:	f001 fbfa 	bl	8005944 <vTaskStartScheduler>
      stat = osOK;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e002      	b.n	800415c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004156:	f04f 33ff 	mov.w	r3, #4294967295
 800415a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800415c:	68fb      	ldr	r3, [r7, #12]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000348 	.word	0x20000348

0800416c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b092      	sub	sp, #72	; 0x48
 8004170:	af04      	add	r7, sp, #16
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800417c:	f3ef 8305 	mrs	r3, IPSR
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004184:	2b00      	cmp	r3, #0
 8004186:	f040 8094 	bne.w	80042b2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800418a:	f3ef 8310 	mrs	r3, PRIMASK
 800418e:	623b      	str	r3, [r7, #32]
  return(result);
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f040 808d 	bne.w	80042b2 <osThreadNew+0x146>
 8004198:	4b48      	ldr	r3, [pc, #288]	; (80042bc <osThreadNew+0x150>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d106      	bne.n	80041ae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041a0:	f3ef 8311 	mrs	r3, BASEPRI
 80041a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f040 8082 	bne.w	80042b2 <osThreadNew+0x146>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d07e      	beq.n	80042b2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80041b8:	2318      	movs	r3, #24
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80041bc:	2300      	movs	r3, #0
 80041be:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80041c0:	f107 031b 	add.w	r3, r7, #27
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d045      	beq.n	800425e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <osThreadNew+0x74>
        name = attr->name;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <osThreadNew+0x9a>
 80041f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f6:	2b38      	cmp	r3, #56	; 0x38
 80041f8:	d805      	bhi.n	8004206 <osThreadNew+0x9a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <osThreadNew+0x9e>
        return (NULL);
 8004206:	2300      	movs	r3, #0
 8004208:	e054      	b.n	80042b4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	089b      	lsrs	r3, r3, #2
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00e      	beq.n	8004240 <osThreadNew+0xd4>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2bbb      	cmp	r3, #187	; 0xbb
 8004228:	d90a      	bls.n	8004240 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800422e:	2b00      	cmp	r3, #0
 8004230:	d006      	beq.n	8004240 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <osThreadNew+0xd4>
        mem = 1;
 800423a:	2301      	movs	r3, #1
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
 800423e:	e010      	b.n	8004262 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10c      	bne.n	8004262 <osThreadNew+0xf6>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d108      	bne.n	8004262 <osThreadNew+0xf6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <osThreadNew+0xf6>
          mem = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
 800425c:	e001      	b.n	8004262 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	2b01      	cmp	r3, #1
 8004266:	d110      	bne.n	800428a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004270:	9202      	str	r2, [sp, #8]
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f001 f97c 	bl	800557c <xTaskCreateStatic>
 8004284:	4603      	mov	r3, r0
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e013      	b.n	80042b2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d110      	bne.n	80042b2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	b29a      	uxth	r2, r3
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f001 f9c6 	bl	8005634 <xTaskCreate>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d001      	beq.n	80042b2 <osThreadNew+0x146>
          hTask = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042b2:	697b      	ldr	r3, [r7, #20]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3738      	adds	r7, #56	; 0x38
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000348 	.word	0x20000348

080042c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042c8:	f3ef 8305 	mrs	r3, IPSR
 80042cc:	613b      	str	r3, [r7, #16]
  return(result);
 80042ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10f      	bne.n	80042f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d4:	f3ef 8310 	mrs	r3, PRIMASK
 80042d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <osDelay+0x34>
 80042e0:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <osDelay+0x58>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d109      	bne.n	80042fc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042e8:	f3ef 8311 	mrs	r3, BASEPRI
 80042ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <osDelay+0x3c>
    stat = osErrorISR;
 80042f4:	f06f 0305 	mvn.w	r3, #5
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	e007      	b.n	800430c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f001 fae8 	bl	80058dc <vTaskDelay>
    }
  }

  return (stat);
 800430c:	697b      	ldr	r3, [r7, #20]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000348 	.word	0x20000348

0800431c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004328:	f3ef 8305 	mrs	r3, IPSR
 800432c:	613b      	str	r3, [r7, #16]
  return(result);
 800432e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004330:	2b00      	cmp	r3, #0
 8004332:	f040 8085 	bne.w	8004440 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004336:	f3ef 8310 	mrs	r3, PRIMASK
 800433a:	60fb      	str	r3, [r7, #12]
  return(result);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d17e      	bne.n	8004440 <osMutexNew+0x124>
 8004342:	4b42      	ldr	r3, [pc, #264]	; (800444c <osMutexNew+0x130>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d105      	bne.n	8004356 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800434a:	f3ef 8311 	mrs	r3, BASEPRI
 800434e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d174      	bne.n	8004440 <osMutexNew+0x124>
    if (attr != NULL) {
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <osMutexNew+0x48>
      type = attr->attr_bits;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	623b      	str	r3, [r7, #32]
 8004362:	e001      	b.n	8004368 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <osMutexNew+0x5c>
      rmtx = 1U;
 8004372:	2301      	movs	r3, #1
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	e001      	b.n	800437c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d15c      	bne.n	8004440 <osMutexNew+0x124>
      mem = -1;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d015      	beq.n	80043be <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d006      	beq.n	80043a8 <osMutexNew+0x8c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b4f      	cmp	r3, #79	; 0x4f
 80043a0:	d902      	bls.n	80043a8 <osMutexNew+0x8c>
          mem = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	e00c      	b.n	80043c2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d108      	bne.n	80043c2 <osMutexNew+0xa6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <osMutexNew+0xa6>
            mem = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	e001      	b.n	80043c2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d112      	bne.n	80043ee <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	4619      	mov	r1, r3
 80043d4:	2004      	movs	r0, #4
 80043d6:	f000 fb43 	bl	8004a60 <xQueueCreateMutexStatic>
 80043da:	6278      	str	r0, [r7, #36]	; 0x24
 80043dc:	e016      	b.n	800440c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	4619      	mov	r1, r3
 80043e4:	2001      	movs	r0, #1
 80043e6:	f000 fb3b 	bl	8004a60 <xQueueCreateMutexStatic>
 80043ea:	6278      	str	r0, [r7, #36]	; 0x24
 80043ec:	e00e      	b.n	800440c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d004      	beq.n	8004404 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80043fa:	2004      	movs	r0, #4
 80043fc:	f000 fb18 	bl	8004a30 <xQueueCreateMutex>
 8004400:	6278      	str	r0, [r7, #36]	; 0x24
 8004402:	e003      	b.n	800440c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004404:	2001      	movs	r0, #1
 8004406:	f000 fb13 	bl	8004a30 <xQueueCreateMutex>
 800440a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <osMutexNew+0x110>
        if (attr != NULL) {
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <osMutexNew+0x104>
          name = attr->name;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e001      	b.n	8004424 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004424:	6979      	ldr	r1, [r7, #20]
 8004426:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004428:	f001 f84a 	bl	80054c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	2b00      	cmp	r3, #0
 8004430:	d006      	beq.n	8004440 <osMutexNew+0x124>
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004442:	4618      	mov	r0, r3
 8004444:	3728      	adds	r7, #40	; 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000348 	.word	0x20000348

08004450 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800446e:	f3ef 8305 	mrs	r3, IPSR
 8004472:	613b      	str	r3, [r7, #16]
  return(result);
 8004474:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10f      	bne.n	800449a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447a:	f3ef 8310 	mrs	r3, PRIMASK
 800447e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <osMutexAcquire+0x4a>
 8004486:	4b20      	ldr	r3, [pc, #128]	; (8004508 <osMutexAcquire+0xb8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d109      	bne.n	80044a2 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800448e:	f3ef 8311 	mrs	r3, BASEPRI
 8004492:	60bb      	str	r3, [r7, #8]
  return(result);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800449a:	f06f 0305 	mvn.w	r3, #5
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	e02c      	b.n	80044fc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d103      	bne.n	80044b0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80044a8:	f06f 0303 	mvn.w	r3, #3
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	e025      	b.n	80044fc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d011      	beq.n	80044da <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80044b6:	6839      	ldr	r1, [r7, #0]
 80044b8:	69b8      	ldr	r0, [r7, #24]
 80044ba:	f000 fb20 	bl	8004afe <xQueueTakeMutexRecursive>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d01b      	beq.n	80044fc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80044ca:	f06f 0301 	mvn.w	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	e014      	b.n	80044fc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80044d2:	f06f 0302 	mvn.w	r3, #2
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e010      	b.n	80044fc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80044da:	6839      	ldr	r1, [r7, #0]
 80044dc:	69b8      	ldr	r0, [r7, #24]
 80044de:	f000 fdbb 	bl	8005058 <xQueueSemaphoreTake>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d009      	beq.n	80044fc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80044ee:	f06f 0301 	mvn.w	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	e002      	b.n	80044fc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80044f6:	f06f 0302 	mvn.w	r3, #2
 80044fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80044fc:	69fb      	ldr	r3, [r7, #28]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000348 	.word	0x20000348

0800450c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004528:	f3ef 8305 	mrs	r3, IPSR
 800452c:	613b      	str	r3, [r7, #16]
  return(result);
 800452e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10f      	bne.n	8004554 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004534:	f3ef 8310 	mrs	r3, PRIMASK
 8004538:	60fb      	str	r3, [r7, #12]
  return(result);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <osMutexRelease+0x48>
 8004540:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <osMutexRelease+0x9c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d109      	bne.n	800455c <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004548:	f3ef 8311 	mrs	r3, BASEPRI
 800454c:	60bb      	str	r3, [r7, #8]
  return(result);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <osMutexRelease+0x50>
    stat = osErrorISR;
 8004554:	f06f 0305 	mvn.w	r3, #5
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	e01f      	b.n	800459c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004562:	f06f 0303 	mvn.w	r3, #3
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	e018      	b.n	800459c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d009      	beq.n	8004584 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004570:	69b8      	ldr	r0, [r7, #24]
 8004572:	f000 fa90 	bl	8004a96 <xQueueGiveMutexRecursive>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d00f      	beq.n	800459c <osMutexRelease+0x90>
        stat = osErrorResource;
 800457c:	f06f 0302 	mvn.w	r3, #2
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	e00b      	b.n	800459c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004584:	2300      	movs	r3, #0
 8004586:	2200      	movs	r2, #0
 8004588:	2100      	movs	r1, #0
 800458a:	69b8      	ldr	r0, [r7, #24]
 800458c:	f000 faee 	bl	8004b6c <xQueueGenericSend>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d002      	beq.n	800459c <osMutexRelease+0x90>
        stat = osErrorResource;
 8004596:	f06f 0302 	mvn.w	r3, #2
 800459a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800459c:	69fb      	ldr	r3, [r7, #28]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000348 	.word	0x20000348

080045ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80045bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4a06      	ldr	r2, [pc, #24]	; (80045dc <vApplicationGetIdleTaskMemory+0x30>)
 80045c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2280      	movs	r2, #128	; 0x80
 80045c8:	601a      	str	r2, [r3, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	2000034c 	.word	0x2000034c
 80045dc:	20000408 	.word	0x20000408

080045e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a07      	ldr	r2, [pc, #28]	; (800460c <vApplicationGetTimerTaskMemory+0x2c>)
 80045f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4a06      	ldr	r2, [pc, #24]	; (8004610 <vApplicationGetTimerTaskMemory+0x30>)
 80045f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045fe:	601a      	str	r2, [r3, #0]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	20000608 	.word	0x20000608
 8004610:	200006c4 	.word	0x200006c4

08004614 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f103 0208 	add.w	r2, r3, #8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f04f 32ff 	mov.w	r2, #4294967295
 800462c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f103 0208 	add.w	r2, r3, #8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f103 0208 	add.w	r2, r3, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046b6:	b480      	push	{r7}
 80046b8:	b085      	sub	sp, #20
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d103      	bne.n	80046d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e00c      	b.n	80046f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3308      	adds	r3, #8
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	e002      	b.n	80046e4 <vListInsert+0x2e>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d2f6      	bcs.n	80046de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	601a      	str	r2, [r3, #0]
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6892      	ldr	r2, [r2, #8]
 800473e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6852      	ldr	r2, [r2, #4]
 8004748:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	429a      	cmp	r2, r3
 8004752:	d103      	bne.n	800475c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	1e5a      	subs	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047a6:	f002 fb6d 	bl	8006e84 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	441a      	add	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	3b01      	subs	r3, #1
 80047d8:	68f9      	ldr	r1, [r7, #12]
 80047da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	441a      	add	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	22ff      	movs	r2, #255	; 0xff
 80047ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	22ff      	movs	r2, #255	; 0xff
 80047f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d114      	bne.n	8004826 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01a      	beq.n	800483a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3310      	adds	r3, #16
 8004808:	4618      	mov	r0, r3
 800480a:	f001 fb39 	bl	8005e80 <xTaskRemoveFromEventList>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d012      	beq.n	800483a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <xQueueGenericReset+0xcc>)
 8004816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	e009      	b.n	800483a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3310      	adds	r3, #16
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fef2 	bl	8004614 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3324      	adds	r3, #36	; 0x24
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff feed 	bl	8004614 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800483a:	f002 fb53 	bl	8006ee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800483e:	2301      	movs	r3, #1
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08e      	sub	sp, #56	; 0x38
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <xQueueGenericCreateStatic+0x52>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <xQueueGenericCreateStatic+0x56>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <xQueueGenericCreateStatic+0x58>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	623b      	str	r3, [r7, #32]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <xQueueGenericCreateStatic+0x7e>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <xQueueGenericCreateStatic+0x82>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <xQueueGenericCreateStatic+0x84>
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	61fb      	str	r3, [r7, #28]
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048ea:	2350      	movs	r3, #80	; 0x50
 80048ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b50      	cmp	r3, #80	; 0x50
 80048f2:	d00a      	beq.n	800490a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	61bb      	str	r3, [r7, #24]
}
 8004906:	bf00      	nop
 8004908:	e7fe      	b.n	8004908 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00d      	beq.n	8004930 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800491c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f843 	bl	80049b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004932:	4618      	mov	r0, r3
 8004934:	3730      	adds	r7, #48	; 0x30
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800493a:	b580      	push	{r7, lr}
 800493c:	b08a      	sub	sp, #40	; 0x28
 800493e:	af02      	add	r7, sp, #8
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	4613      	mov	r3, r2
 8004946:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <xQueueGenericCreate+0x2a>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	613b      	str	r3, [r7, #16]
}
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	e004      	b.n	800497a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	fb02 f303 	mul.w	r3, r2, r3
 8004978:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	3350      	adds	r3, #80	; 0x50
 800497e:	4618      	mov	r0, r3
 8004980:	f002 fba2 	bl	80070c8 <pvPortMalloc>
 8004984:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00f      	beq.n	80049ac <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	3350      	adds	r3, #80	; 0x50
 8004990:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800499a:	79fa      	ldrb	r2, [r7, #7]
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	4613      	mov	r3, r2
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f805 	bl	80049b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80049ac:	69bb      	ldr	r3, [r7, #24]
	}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	e002      	b.n	80049d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049e4:	2101      	movs	r1, #1
 80049e6:	69b8      	ldr	r0, [r7, #24]
 80049e8:	f7ff fec8 	bl	800477c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00e      	beq.n	8004a28 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2100      	movs	r1, #0
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8a2 	bl	8004b6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	461a      	mov	r2, r3
 8004a46:	6939      	ldr	r1, [r7, #16]
 8004a48:	6978      	ldr	r0, [r7, #20]
 8004a4a:	f7ff ff76 	bl	800493a <xQueueGenericCreate>
 8004a4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff ffd3 	bl	80049fc <prvInitialiseMutex>

		return pxNewQueue;
 8004a56:	68fb      	ldr	r3, [r7, #12]
	}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	4603      	mov	r3, r0
 8004a68:	6039      	str	r1, [r7, #0]
 8004a6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	6939      	ldr	r1, [r7, #16]
 8004a7e:	6978      	ldr	r0, [r7, #20]
 8004a80:	f7ff fee4 	bl	800484c <xQueueGenericCreateStatic>
 8004a84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7ff ffb8 	bl	80049fc <prvInitialiseMutex>

		return pxNewQueue;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
	}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004a96:	b590      	push	{r4, r7, lr}
 8004a98:	b087      	sub	sp, #28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	60fb      	str	r3, [r7, #12]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	685c      	ldr	r4, [r3, #4]
 8004ac2:	f001 fba5 	bl	8006210 <xTaskGetCurrentTaskHandle>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	429c      	cmp	r4, r3
 8004aca:	d111      	bne.n	8004af0 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	1e5a      	subs	r2, r3, #1
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	6938      	ldr	r0, [r7, #16]
 8004ae6:	f000 f841 	bl	8004b6c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004aea:	2301      	movs	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e001      	b.n	8004af4 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004af4:	697b      	ldr	r3, [r7, #20]
	}
 8004af6:	4618      	mov	r0, r3
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd90      	pop	{r4, r7, pc}

08004afe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004afe:	b590      	push	{r4, r7, lr}
 8004b00:	b087      	sub	sp, #28
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10a      	bne.n	8004b28 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60fb      	str	r3, [r7, #12]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	685c      	ldr	r4, [r3, #4]
 8004b2c:	f001 fb70 	bl	8006210 <xTaskGetCurrentTaskHandle>
 8004b30:	4603      	mov	r3, r0
 8004b32:	429c      	cmp	r4, r3
 8004b34:	d107      	bne.n	8004b46 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004b40:	2301      	movs	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e00c      	b.n	8004b60 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004b46:	6839      	ldr	r1, [r7, #0]
 8004b48:	6938      	ldr	r0, [r7, #16]
 8004b4a:	f000 fa85 	bl	8005058 <xQueueSemaphoreTake>
 8004b4e:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004b60:	697b      	ldr	r3, [r7, #20]
	}
 8004b62:	4618      	mov	r0, r3
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd90      	pop	{r4, r7, pc}
	...

08004b6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08e      	sub	sp, #56	; 0x38
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <xQueueGenericSend+0x32>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d103      	bne.n	8004bac <xQueueGenericSend+0x40>
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <xQueueGenericSend+0x44>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <xQueueGenericSend+0x46>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <xQueueGenericSend+0x60>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d103      	bne.n	8004bda <xQueueGenericSend+0x6e>
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <xQueueGenericSend+0x72>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <xQueueGenericSend+0x74>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <xQueueGenericSend+0x8e>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	623b      	str	r3, [r7, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bfa:	f001 fb19 	bl	8006230 <xTaskGetSchedulerState>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <xQueueGenericSend+0x9e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <xQueueGenericSend+0xa2>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <xQueueGenericSend+0xa4>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xQueueGenericSend+0xbe>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	61fb      	str	r3, [r7, #28]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c2a:	f002 f92b 	bl	8006e84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <xQueueGenericSend+0xd4>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d129      	bne.n	8004c94 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c46:	f000 fb2b 	bl	80052a0 <prvCopyDataToQueue>
 8004c4a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d010      	beq.n	8004c76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	3324      	adds	r3, #36	; 0x24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 f911 	bl	8005e80 <xTaskRemoveFromEventList>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c64:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <xQueueGenericSend+0x1f8>)
 8004c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	e00a      	b.n	8004c8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c7c:	4b39      	ldr	r3, [pc, #228]	; (8004d64 <xQueueGenericSend+0x1f8>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c8c:	f002 f92a 	bl	8006ee4 <vPortExitCritical>
				return pdPASS;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e063      	b.n	8004d5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c9a:	f002 f923 	bl	8006ee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e05c      	b.n	8004d5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	4618      	mov	r0, r3
 8004cae:	f001 f94b 	bl	8005f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cb6:	f002 f915 	bl	8006ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cba:	f000 feb3 	bl	8005a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cbe:	f002 f8e1 	bl	8006e84 <vPortEnterCritical>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cc8:	b25b      	sxtb	r3, r3
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d103      	bne.n	8004cd8 <xQueueGenericSend+0x16c>
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cde:	b25b      	sxtb	r3, r3
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d103      	bne.n	8004cee <xQueueGenericSend+0x182>
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cee:	f002 f8f9 	bl	8006ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cf2:	1d3a      	adds	r2, r7, #4
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 f93a 	bl	8005f74 <xTaskCheckForTimeOut>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d124      	bne.n	8004d50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d08:	f000 fbc2 	bl	8005490 <prvIsQueueFull>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d018      	beq.n	8004d44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	3310      	adds	r3, #16
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 f860 	bl	8005de0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d22:	f000 fb4d 	bl	80053c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d26:	f000 fe8b 	bl	8005a40 <xTaskResumeAll>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f47f af7c 	bne.w	8004c2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <xQueueGenericSend+0x1f8>)
 8004d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	e772      	b.n	8004c2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d46:	f000 fb3b 	bl	80053c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d4a:	f000 fe79 	bl	8005a40 <xTaskResumeAll>
 8004d4e:	e76c      	b.n	8004c2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d52:	f000 fb35 	bl	80053c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d56:	f000 fe73 	bl	8005a40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d5a:	2300      	movs	r3, #0
		}
	}
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3738      	adds	r7, #56	; 0x38
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	e000ed04 	.word	0xe000ed04

08004d68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08e      	sub	sp, #56	; 0x38
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <xQueueGenericSendFromISR+0x3c>
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <xQueueGenericSendFromISR+0x40>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <xQueueGenericSendFromISR+0x42>
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	623b      	str	r3, [r7, #32]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d103      	bne.n	8004dd2 <xQueueGenericSendFromISR+0x6a>
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <xQueueGenericSendFromISR+0x6e>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <xQueueGenericSendFromISR+0x70>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	61fb      	str	r3, [r7, #28]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004df2:	f002 f929 	bl	8007048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004df6:	f3ef 8211 	mrs	r2, BASEPRI
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	61ba      	str	r2, [r7, #24]
 8004e0c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e0e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <xQueueGenericSendFromISR+0xbc>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d12c      	bne.n	8004e7e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e34:	f000 fa34 	bl	80052a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e38:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d112      	bne.n	8004e68 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	3324      	adds	r3, #36	; 0x24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 f816 	bl	8005e80 <xTaskRemoveFromEventList>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00e      	beq.n	8004e78 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00b      	beq.n	8004e78 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e007      	b.n	8004e78 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	b25a      	sxtb	r2, r3
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004e7c:	e001      	b.n	8004e82 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3738      	adds	r7, #56	; 0x38
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08c      	sub	sp, #48	; 0x30
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <xQueueReceive+0x30>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	623b      	str	r3, [r7, #32]
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <xQueueReceive+0x3e>
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <xQueueReceive+0x42>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xQueueReceive+0x44>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <xQueueReceive+0x5e>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	61fb      	str	r3, [r7, #28]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ef6:	f001 f99b 	bl	8006230 <xTaskGetSchedulerState>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <xQueueReceive+0x6e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <xQueueReceive+0x72>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <xQueueReceive+0x74>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <xQueueReceive+0x8e>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	61bb      	str	r3, [r7, #24]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f26:	f001 ffad 	bl	8006e84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d01f      	beq.n	8004f76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f3a:	f000 fa1b 	bl	8005374 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	1e5a      	subs	r2, r3, #1
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00f      	beq.n	8004f6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	3310      	adds	r3, #16
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 ff94 	bl	8005e80 <xTaskRemoveFromEventList>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f5e:	4b3d      	ldr	r3, [pc, #244]	; (8005054 <xQueueReceive+0x1bc>)
 8004f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f6e:	f001 ffb9 	bl	8006ee4 <vPortExitCritical>
				return pdPASS;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e069      	b.n	800504a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d103      	bne.n	8004f84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f7c:	f001 ffb2 	bl	8006ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e062      	b.n	800504a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f8a:	f107 0310 	add.w	r3, r7, #16
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 ffda 	bl	8005f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f94:	2301      	movs	r3, #1
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f98:	f001 ffa4 	bl	8006ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f9c:	f000 fd42 	bl	8005a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fa0:	f001 ff70 	bl	8006e84 <vPortEnterCritical>
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004faa:	b25b      	sxtb	r3, r3
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d103      	bne.n	8004fba <xQueueReceive+0x122>
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fc0:	b25b      	sxtb	r3, r3
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d103      	bne.n	8004fd0 <xQueueReceive+0x138>
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd0:	f001 ff88 	bl	8006ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fd4:	1d3a      	adds	r2, r7, #4
 8004fd6:	f107 0310 	add.w	r3, r7, #16
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 ffc9 	bl	8005f74 <xTaskCheckForTimeOut>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d123      	bne.n	8005030 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fea:	f000 fa3b 	bl	8005464 <prvIsQueueEmpty>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d017      	beq.n	8005024 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	3324      	adds	r3, #36	; 0x24
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 feef 	bl	8005de0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005004:	f000 f9dc 	bl	80053c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005008:	f000 fd1a 	bl	8005a40 <xTaskResumeAll>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d189      	bne.n	8004f26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <xQueueReceive+0x1bc>)
 8005014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	e780      	b.n	8004f26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005026:	f000 f9cb 	bl	80053c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800502a:	f000 fd09 	bl	8005a40 <xTaskResumeAll>
 800502e:	e77a      	b.n	8004f26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005032:	f000 f9c5 	bl	80053c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005036:	f000 fd03 	bl	8005a40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800503a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800503c:	f000 fa12 	bl	8005464 <prvIsQueueEmpty>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	f43f af6f 	beq.w	8004f26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005048:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800504a:	4618      	mov	r0, r3
 800504c:	3730      	adds	r7, #48	; 0x30
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	e000ed04 	.word	0xe000ed04

08005058 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08e      	sub	sp, #56	; 0x38
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005062:	2300      	movs	r3, #0
 8005064:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800506a:	2300      	movs	r3, #0
 800506c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	623b      	str	r3, [r7, #32]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	61fb      	str	r3, [r7, #28]
}
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050a8:	f001 f8c2 	bl	8006230 <xTaskGetSchedulerState>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <xQueueSemaphoreTake+0x60>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <xQueueSemaphoreTake+0x64>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <xQueueSemaphoreTake+0x66>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	61bb      	str	r3, [r7, #24]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80050d8:	f001 fed4 	bl	8006e84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d024      	beq.n	8005132 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	1e5a      	subs	r2, r3, #1
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80050f8:	f001 fa1a 	bl	8006530 <pvTaskIncrementMutexHeldCount>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005100:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00f      	beq.n	800512a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	3310      	adds	r3, #16
 800510e:	4618      	mov	r0, r3
 8005110:	f000 feb6 	bl	8005e80 <xTaskRemoveFromEventList>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800511a:	4b54      	ldr	r3, [pc, #336]	; (800526c <xQueueSemaphoreTake+0x214>)
 800511c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800512a:	f001 fedb 	bl	8006ee4 <vPortExitCritical>
				return pdPASS;
 800512e:	2301      	movs	r3, #1
 8005130:	e097      	b.n	8005262 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d111      	bne.n	800515c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	617b      	str	r3, [r7, #20]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005154:	f001 fec6 	bl	8006ee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005158:	2300      	movs	r3, #0
 800515a:	e082      	b.n	8005262 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800515c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005162:	f107 030c 	add.w	r3, r7, #12
 8005166:	4618      	mov	r0, r3
 8005168:	f000 feee 	bl	8005f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800516c:	2301      	movs	r3, #1
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005170:	f001 feb8 	bl	8006ee4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005174:	f000 fc56 	bl	8005a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005178:	f001 fe84 	bl	8006e84 <vPortEnterCritical>
 800517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005182:	b25b      	sxtb	r3, r3
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d103      	bne.n	8005192 <xQueueSemaphoreTake+0x13a>
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005198:	b25b      	sxtb	r3, r3
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d103      	bne.n	80051a8 <xQueueSemaphoreTake+0x150>
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a8:	f001 fe9c 	bl	8006ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ac:	463a      	mov	r2, r7
 80051ae:	f107 030c 	add.w	r3, r7, #12
 80051b2:	4611      	mov	r1, r2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fedd 	bl	8005f74 <xTaskCheckForTimeOut>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d132      	bne.n	8005226 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051c2:	f000 f94f 	bl	8005464 <prvIsQueueEmpty>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d026      	beq.n	800521a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80051d4:	f001 fe56 	bl	8006e84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 f845 	bl	800626c <xTaskPriorityInherit>
 80051e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80051e4:	f001 fe7e 	bl	8006ee4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	3324      	adds	r3, #36	; 0x24
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	4611      	mov	r1, r2
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fdf5 	bl	8005de0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051f8:	f000 f8e2 	bl	80053c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051fc:	f000 fc20 	bl	8005a40 <xTaskResumeAll>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	f47f af68 	bne.w	80050d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005208:	4b18      	ldr	r3, [pc, #96]	; (800526c <xQueueSemaphoreTake+0x214>)
 800520a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	e75e      	b.n	80050d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800521a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800521c:	f000 f8d0 	bl	80053c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005220:	f000 fc0e 	bl	8005a40 <xTaskResumeAll>
 8005224:	e758      	b.n	80050d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005228:	f000 f8ca 	bl	80053c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800522c:	f000 fc08 	bl	8005a40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005232:	f000 f917 	bl	8005464 <prvIsQueueEmpty>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	f43f af4d 	beq.w	80050d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00d      	beq.n	8005260 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005244:	f001 fe1e 	bl	8006e84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800524a:	f000 f811 	bl	8005270 <prvGetDisinheritPriorityAfterTimeout>
 800524e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005256:	4618      	mov	r0, r3
 8005258:	f001 f8e4 	bl	8006424 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800525c:	f001 fe42 	bl	8006ee4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005260:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005262:	4618      	mov	r0, r3
 8005264:	3738      	adds	r7, #56	; 0x38
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	e000ed04 	.word	0xe000ed04

08005270 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e001      	b.n	8005292 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005292:	68fb      	ldr	r3, [r7, #12]
	}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10d      	bne.n	80052da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d14d      	bne.n	8005362 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 f83c 	bl	8006348 <xTaskPriorityDisinherit>
 80052d0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	605a      	str	r2, [r3, #4]
 80052d8:	e043      	b.n	8005362 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d119      	bne.n	8005314 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6898      	ldr	r0, [r3, #8]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	461a      	mov	r2, r3
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	f002 f9e9 	bl	80076c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	441a      	add	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	429a      	cmp	r2, r3
 8005308:	d32b      	bcc.n	8005362 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	609a      	str	r2, [r3, #8]
 8005312:	e026      	b.n	8005362 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	68d8      	ldr	r0, [r3, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	461a      	mov	r2, r3
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	f002 f9cf 	bl	80076c2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	425b      	negs	r3, r3
 800532e:	441a      	add	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d207      	bcs.n	8005350 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	425b      	negs	r3, r3
 800534a:	441a      	add	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d105      	bne.n	8005362 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	3b01      	subs	r3, #1
 8005360:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800536a:	697b      	ldr	r3, [r7, #20]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d018      	beq.n	80053b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	441a      	add	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d303      	bcc.n	80053a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68d9      	ldr	r1, [r3, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	461a      	mov	r2, r3
 80053b2:	6838      	ldr	r0, [r7, #0]
 80053b4:	f002 f985 	bl	80076c2 <memcpy>
	}
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053c8:	f001 fd5c 	bl	8006e84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053d4:	e011      	b.n	80053fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d012      	beq.n	8005404 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3324      	adds	r3, #36	; 0x24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fd4c 	bl	8005e80 <xTaskRemoveFromEventList>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053ee:	f000 fe23 	bl	8006038 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	dce9      	bgt.n	80053d6 <prvUnlockQueue+0x16>
 8005402:	e000      	b.n	8005406 <prvUnlockQueue+0x46>
					break;
 8005404:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	22ff      	movs	r2, #255	; 0xff
 800540a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800540e:	f001 fd69 	bl	8006ee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005412:	f001 fd37 	bl	8006e84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800541c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800541e:	e011      	b.n	8005444 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d012      	beq.n	800544e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3310      	adds	r3, #16
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fd27 	bl	8005e80 <xTaskRemoveFromEventList>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005438:	f000 fdfe 	bl	8006038 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800543c:	7bbb      	ldrb	r3, [r7, #14]
 800543e:	3b01      	subs	r3, #1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005448:	2b00      	cmp	r3, #0
 800544a:	dce9      	bgt.n	8005420 <prvUnlockQueue+0x60>
 800544c:	e000      	b.n	8005450 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800544e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	22ff      	movs	r2, #255	; 0xff
 8005454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005458:	f001 fd44 	bl	8006ee4 <vPortExitCritical>
}
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800546c:	f001 fd0a 	bl	8006e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005478:	2301      	movs	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	e001      	b.n	8005482 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005482:	f001 fd2f 	bl	8006ee4 <vPortExitCritical>

	return xReturn;
 8005486:	68fb      	ldr	r3, [r7, #12]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005498:	f001 fcf4 	bl	8006e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d102      	bne.n	80054ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054a8:	2301      	movs	r3, #1
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e001      	b.n	80054b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054b2:	f001 fd17 	bl	8006ee4 <vPortExitCritical>

	return xReturn;
 80054b6:	68fb      	ldr	r3, [r7, #12]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	e014      	b.n	80054fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054d0:	4a0f      	ldr	r2, [pc, #60]	; (8005510 <vQueueAddToRegistry+0x50>)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054dc:	490c      	ldr	r1, [pc, #48]	; (8005510 <vQueueAddToRegistry+0x50>)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054e6:	4a0a      	ldr	r2, [pc, #40]	; (8005510 <vQueueAddToRegistry+0x50>)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4413      	add	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80054f2:	e006      	b.n	8005502 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3301      	adds	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b07      	cmp	r3, #7
 80054fe:	d9e7      	bls.n	80054d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20002178 	.word	0x20002178

08005514 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005524:	f001 fcae 	bl	8006e84 <vPortEnterCritical>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800552e:	b25b      	sxtb	r3, r3
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d103      	bne.n	800553e <vQueueWaitForMessageRestricted+0x2a>
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005544:	b25b      	sxtb	r3, r3
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d103      	bne.n	8005554 <vQueueWaitForMessageRestricted+0x40>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005554:	f001 fcc6 	bl	8006ee4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	3324      	adds	r3, #36	; 0x24
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fc5d 	bl	8005e28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800556e:	6978      	ldr	r0, [r7, #20]
 8005570:	f7ff ff26 	bl	80053c0 <prvUnlockQueue>
	}
 8005574:	bf00      	nop
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08e      	sub	sp, #56	; 0x38
 8005580:	af04      	add	r7, sp, #16
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	623b      	str	r3, [r7, #32]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	61fb      	str	r3, [r7, #28]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055c2:	23bc      	movs	r3, #188	; 0xbc
 80055c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	2bbc      	cmp	r3, #188	; 0xbc
 80055ca:	d00a      	beq.n	80055e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	61bb      	str	r3, [r7, #24]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01e      	beq.n	8005626 <xTaskCreateStatic+0xaa>
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01b      	beq.n	8005626 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005600:	2300      	movs	r3, #0
 8005602:	9303      	str	r3, [sp, #12]
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	9302      	str	r3, [sp, #8]
 8005608:	f107 0314 	add.w	r3, r7, #20
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f851 	bl	80056c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800561e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005620:	f000 f8ec 	bl	80057fc <prvAddNewTaskToReadyList>
 8005624:	e001      	b.n	800562a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800562a:	697b      	ldr	r3, [r7, #20]
	}
 800562c:	4618      	mov	r0, r3
 800562e:	3728      	adds	r7, #40	; 0x28
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	; 0x30
 8005638:	af04      	add	r7, sp, #16
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4618      	mov	r0, r3
 800564a:	f001 fd3d 	bl	80070c8 <pvPortMalloc>
 800564e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005656:	20bc      	movs	r0, #188	; 0xbc
 8005658:	f001 fd36 	bl	80070c8 <pvPortMalloc>
 800565c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
 800566a:	e005      	b.n	8005678 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800566c:	6978      	ldr	r0, [r7, #20]
 800566e:	f001 fdef 	bl	8007250 <vPortFree>
 8005672:	e001      	b.n	8005678 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005674:	2300      	movs	r3, #0
 8005676:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d017      	beq.n	80056ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	2300      	movs	r3, #0
 800568a:	9303      	str	r3, [sp, #12]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	9302      	str	r3, [sp, #8]
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f80f 	bl	80056c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056a2:	69f8      	ldr	r0, [r7, #28]
 80056a4:	f000 f8aa 	bl	80057fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056a8:	2301      	movs	r3, #1
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	e002      	b.n	80056b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056ae:	f04f 33ff 	mov.w	r3, #4294967295
 80056b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056b4:	69bb      	ldr	r3, [r7, #24]
	}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	461a      	mov	r2, r3
 80056d8:	21a5      	movs	r1, #165	; 0xa5
 80056da:	f002 f800 	bl	80076de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056e8:	3b01      	subs	r3, #1
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f023 0307 	bic.w	r3, r3, #7
 80056f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	617b      	str	r3, [r7, #20]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005718:	2300      	movs	r3, #0
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	e012      	b.n	8005744 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	4413      	add	r3, r2
 8005724:	7819      	ldrb	r1, [r3, #0]
 8005726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	3334      	adds	r3, #52	; 0x34
 800572e:	460a      	mov	r2, r1
 8005730:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d006      	beq.n	800574c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3301      	adds	r3, #1
 8005742:	61fb      	str	r3, [r7, #28]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	d9e9      	bls.n	800571e <prvInitialiseNewTask+0x5e>
 800574a:	e000      	b.n	800574e <prvInitialiseNewTask+0x8e>
		{
			break;
 800574c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	2b37      	cmp	r3, #55	; 0x37
 800575a:	d901      	bls.n	8005760 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800575c:	2337      	movs	r3, #55	; 0x37
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005764:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800576a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	2200      	movs	r2, #0
 8005770:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	3304      	adds	r3, #4
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe ff6c 	bl	8004654 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	3318      	adds	r3, #24
 8005780:	4618      	mov	r0, r3
 8005782:	f7fe ff67 	bl	8004654 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800579a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	3354      	adds	r3, #84	; 0x54
 80057b0:	2260      	movs	r2, #96	; 0x60
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 ff92 	bl	80076de <memset>
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	4a0c      	ldr	r2, [pc, #48]	; (80057f0 <prvInitialiseNewTask+0x130>)
 80057be:	659a      	str	r2, [r3, #88]	; 0x58
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <prvInitialiseNewTask+0x134>)
 80057c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	4a0b      	ldr	r2, [pc, #44]	; (80057f8 <prvInitialiseNewTask+0x138>)
 80057ca:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	69b8      	ldr	r0, [r7, #24]
 80057d2:	f001 fa27 	bl	8006c24 <pxPortInitialiseStack>
 80057d6:	4602      	mov	r2, r0
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057e8:	bf00      	nop
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	080087dc 	.word	0x080087dc
 80057f4:	080087fc 	.word	0x080087fc
 80057f8:	080087bc 	.word	0x080087bc

080057fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005804:	f001 fb3e 	bl	8006e84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005808:	4b2d      	ldr	r3, [pc, #180]	; (80058c0 <prvAddNewTaskToReadyList+0xc4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	4a2c      	ldr	r2, [pc, #176]	; (80058c0 <prvAddNewTaskToReadyList+0xc4>)
 8005810:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005812:	4b2c      	ldr	r3, [pc, #176]	; (80058c4 <prvAddNewTaskToReadyList+0xc8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800581a:	4a2a      	ldr	r2, [pc, #168]	; (80058c4 <prvAddNewTaskToReadyList+0xc8>)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005820:	4b27      	ldr	r3, [pc, #156]	; (80058c0 <prvAddNewTaskToReadyList+0xc4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d110      	bne.n	800584a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005828:	f000 fc2a 	bl	8006080 <prvInitialiseTaskLists>
 800582c:	e00d      	b.n	800584a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800582e:	4b26      	ldr	r3, [pc, #152]	; (80058c8 <prvAddNewTaskToReadyList+0xcc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005836:	4b23      	ldr	r3, [pc, #140]	; (80058c4 <prvAddNewTaskToReadyList+0xc8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	429a      	cmp	r2, r3
 8005842:	d802      	bhi.n	800584a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005844:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <prvAddNewTaskToReadyList+0xc8>)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800584a:	4b20      	ldr	r3, [pc, #128]	; (80058cc <prvAddNewTaskToReadyList+0xd0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3301      	adds	r3, #1
 8005850:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <prvAddNewTaskToReadyList+0xd0>)
 8005852:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005854:	4b1d      	ldr	r3, [pc, #116]	; (80058cc <prvAddNewTaskToReadyList+0xd0>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <prvAddNewTaskToReadyList+0xd4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d903      	bls.n	8005870 <prvAddNewTaskToReadyList+0x74>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <prvAddNewTaskToReadyList+0xd4>)
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4a15      	ldr	r2, [pc, #84]	; (80058d4 <prvAddNewTaskToReadyList+0xd8>)
 800587e:	441a      	add	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3304      	adds	r3, #4
 8005884:	4619      	mov	r1, r3
 8005886:	4610      	mov	r0, r2
 8005888:	f7fe fef1 	bl	800466e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800588c:	f001 fb2a 	bl	8006ee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005890:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <prvAddNewTaskToReadyList+0xcc>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00e      	beq.n	80058b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005898:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <prvAddNewTaskToReadyList+0xc8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d207      	bcs.n	80058b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <prvAddNewTaskToReadyList+0xdc>)
 80058a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000f98 	.word	0x20000f98
 80058c4:	20000ac4 	.word	0x20000ac4
 80058c8:	20000fa4 	.word	0x20000fa4
 80058cc:	20000fb4 	.word	0x20000fb4
 80058d0:	20000fa0 	.word	0x20000fa0
 80058d4:	20000ac8 	.word	0x20000ac8
 80058d8:	e000ed04 	.word	0xe000ed04

080058dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d017      	beq.n	800591e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <vTaskDelay+0x60>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <vTaskDelay+0x30>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	60bb      	str	r3, [r7, #8]
}
 8005908:	bf00      	nop
 800590a:	e7fe      	b.n	800590a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800590c:	f000 f88a 	bl	8005a24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005910:	2100      	movs	r1, #0
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fe20 	bl	8006558 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005918:	f000 f892 	bl	8005a40 <xTaskResumeAll>
 800591c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d107      	bne.n	8005934 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <vTaskDelay+0x64>)
 8005926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000fc0 	.word	0x20000fc0
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	; 0x28
 8005948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800594a:	2300      	movs	r3, #0
 800594c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005952:	463a      	mov	r2, r7
 8005954:	1d39      	adds	r1, r7, #4
 8005956:	f107 0308 	add.w	r3, r7, #8
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe fe26 	bl	80045ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	9202      	str	r2, [sp, #8]
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	2300      	movs	r3, #0
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	2300      	movs	r3, #0
 8005970:	460a      	mov	r2, r1
 8005972:	4924      	ldr	r1, [pc, #144]	; (8005a04 <vTaskStartScheduler+0xc0>)
 8005974:	4824      	ldr	r0, [pc, #144]	; (8005a08 <vTaskStartScheduler+0xc4>)
 8005976:	f7ff fe01 	bl	800557c <xTaskCreateStatic>
 800597a:	4603      	mov	r3, r0
 800597c:	4a23      	ldr	r2, [pc, #140]	; (8005a0c <vTaskStartScheduler+0xc8>)
 800597e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005980:	4b22      	ldr	r3, [pc, #136]	; (8005a0c <vTaskStartScheduler+0xc8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005988:	2301      	movs	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e001      	b.n	8005992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d102      	bne.n	800599e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005998:	f000 fe32 	bl	8006600 <xTimerCreateTimerTask>
 800599c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d11b      	bne.n	80059dc <vTaskStartScheduler+0x98>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	613b      	str	r3, [r7, #16]
}
 80059b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059b8:	4b15      	ldr	r3, [pc, #84]	; (8005a10 <vTaskStartScheduler+0xcc>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3354      	adds	r3, #84	; 0x54
 80059be:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <vTaskStartScheduler+0xd0>)
 80059c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <vTaskStartScheduler+0xd4>)
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059ca:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <vTaskStartScheduler+0xd8>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80059d0:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <vTaskStartScheduler+0xdc>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059d6:	f001 f9b3 	bl	8006d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059da:	e00e      	b.n	80059fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e2:	d10a      	bne.n	80059fa <vTaskStartScheduler+0xb6>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	60fb      	str	r3, [r7, #12]
}
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <vTaskStartScheduler+0xb4>
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	080086f0 	.word	0x080086f0
 8005a08:	08006051 	.word	0x08006051
 8005a0c:	20000fbc 	.word	0x20000fbc
 8005a10:	20000ac4 	.word	0x20000ac4
 8005a14:	20000174 	.word	0x20000174
 8005a18:	20000fb8 	.word	0x20000fb8
 8005a1c:	20000fa4 	.word	0x20000fa4
 8005a20:	20000f9c 	.word	0x20000f9c

08005a24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a28:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <vTaskSuspendAll+0x18>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	4a03      	ldr	r2, [pc, #12]	; (8005a3c <vTaskSuspendAll+0x18>)
 8005a30:	6013      	str	r3, [r2, #0]
}
 8005a32:	bf00      	nop
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	20000fc0 	.word	0x20000fc0

08005a40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a4e:	4b42      	ldr	r3, [pc, #264]	; (8005b58 <xTaskResumeAll+0x118>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10a      	bne.n	8005a6c <xTaskResumeAll+0x2c>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	603b      	str	r3, [r7, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	e7fe      	b.n	8005a6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a6c:	f001 fa0a 	bl	8006e84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a70:	4b39      	ldr	r3, [pc, #228]	; (8005b58 <xTaskResumeAll+0x118>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	4a38      	ldr	r2, [pc, #224]	; (8005b58 <xTaskResumeAll+0x118>)
 8005a78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a7a:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <xTaskResumeAll+0x118>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d162      	bne.n	8005b48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a82:	4b36      	ldr	r3, [pc, #216]	; (8005b5c <xTaskResumeAll+0x11c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d05e      	beq.n	8005b48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a8a:	e02f      	b.n	8005aec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005a8c:	4b34      	ldr	r3, [pc, #208]	; (8005b60 <xTaskResumeAll+0x120>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3318      	adds	r3, #24
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fe fe45 	bl	8004728 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe fe40 	bl	8004728 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aac:	4b2d      	ldr	r3, [pc, #180]	; (8005b64 <xTaskResumeAll+0x124>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d903      	bls.n	8005abc <xTaskResumeAll+0x7c>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <xTaskResumeAll+0x124>)
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4a27      	ldr	r2, [pc, #156]	; (8005b68 <xTaskResumeAll+0x128>)
 8005aca:	441a      	add	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f7fe fdcb 	bl	800466e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005adc:	4b23      	ldr	r3, [pc, #140]	; (8005b6c <xTaskResumeAll+0x12c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d302      	bcc.n	8005aec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005ae6:	4b22      	ldr	r3, [pc, #136]	; (8005b70 <xTaskResumeAll+0x130>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aec:	4b1c      	ldr	r3, [pc, #112]	; (8005b60 <xTaskResumeAll+0x120>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1cb      	bne.n	8005a8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005afa:	f000 fb63 	bl	80061c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005afe:	4b1d      	ldr	r3, [pc, #116]	; (8005b74 <xTaskResumeAll+0x134>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d010      	beq.n	8005b2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b0a:	f000 f847 	bl	8005b9c <xTaskIncrementTick>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b14:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <xTaskResumeAll+0x130>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f1      	bne.n	8005b0a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005b26:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <xTaskResumeAll+0x134>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b2c:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <xTaskResumeAll+0x130>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d009      	beq.n	8005b48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b34:	2301      	movs	r3, #1
 8005b36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b38:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <xTaskResumeAll+0x138>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b48:	f001 f9cc 	bl	8006ee4 <vPortExitCritical>

	return xAlreadyYielded;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000fc0 	.word	0x20000fc0
 8005b5c:	20000f98 	.word	0x20000f98
 8005b60:	20000f58 	.word	0x20000f58
 8005b64:	20000fa0 	.word	0x20000fa0
 8005b68:	20000ac8 	.word	0x20000ac8
 8005b6c:	20000ac4 	.word	0x20000ac4
 8005b70:	20000fac 	.word	0x20000fac
 8005b74:	20000fa8 	.word	0x20000fa8
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <xTaskGetTickCount+0x1c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b88:	687b      	ldr	r3, [r7, #4]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000f9c 	.word	0x20000f9c

08005b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba6:	4b51      	ldr	r3, [pc, #324]	; (8005cec <xTaskIncrementTick+0x150>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 808e 	bne.w	8005ccc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bb0:	4b4f      	ldr	r3, [pc, #316]	; (8005cf0 <xTaskIncrementTick+0x154>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bb8:	4a4d      	ldr	r2, [pc, #308]	; (8005cf0 <xTaskIncrementTick+0x154>)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d120      	bne.n	8005c06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bc4:	4b4b      	ldr	r3, [pc, #300]	; (8005cf4 <xTaskIncrementTick+0x158>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	603b      	str	r3, [r7, #0]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <xTaskIncrementTick+0x46>
 8005be4:	4b43      	ldr	r3, [pc, #268]	; (8005cf4 <xTaskIncrementTick+0x158>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	4b43      	ldr	r3, [pc, #268]	; (8005cf8 <xTaskIncrementTick+0x15c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a41      	ldr	r2, [pc, #260]	; (8005cf4 <xTaskIncrementTick+0x158>)
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	4a41      	ldr	r2, [pc, #260]	; (8005cf8 <xTaskIncrementTick+0x15c>)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	4b40      	ldr	r3, [pc, #256]	; (8005cfc <xTaskIncrementTick+0x160>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	4a3f      	ldr	r2, [pc, #252]	; (8005cfc <xTaskIncrementTick+0x160>)
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	f000 fadf 	bl	80061c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c06:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <xTaskIncrementTick+0x164>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d34e      	bcc.n	8005cae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c10:	4b38      	ldr	r3, [pc, #224]	; (8005cf4 <xTaskIncrementTick+0x158>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <xTaskIncrementTick+0x82>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <xTaskIncrementTick+0x84>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c24:	4b36      	ldr	r3, [pc, #216]	; (8005d00 <xTaskIncrementTick+0x164>)
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	601a      	str	r2, [r3, #0]
					break;
 8005c2c:	e03f      	b.n	8005cae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c2e:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <xTaskIncrementTick+0x158>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d203      	bcs.n	8005c4e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c46:	4a2e      	ldr	r2, [pc, #184]	; (8005d00 <xTaskIncrementTick+0x164>)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6013      	str	r3, [r2, #0]
						break;
 8005c4c:	e02f      	b.n	8005cae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe fd68 	bl	8004728 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	3318      	adds	r3, #24
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fe fd5f 	bl	8004728 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6e:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <xTaskIncrementTick+0x168>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d903      	bls.n	8005c7e <xTaskIncrementTick+0xe2>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	4a22      	ldr	r2, [pc, #136]	; (8005d04 <xTaskIncrementTick+0x168>)
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4a1f      	ldr	r2, [pc, #124]	; (8005d08 <xTaskIncrementTick+0x16c>)
 8005c8c:	441a      	add	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f7fe fcea 	bl	800466e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <xTaskIncrementTick+0x170>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d3b3      	bcc.n	8005c10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cac:	e7b0      	b.n	8005c10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cae:	4b17      	ldr	r3, [pc, #92]	; (8005d0c <xTaskIncrementTick+0x170>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb4:	4914      	ldr	r1, [pc, #80]	; (8005d08 <xTaskIncrementTick+0x16c>)
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d907      	bls.n	8005cd6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e004      	b.n	8005cd6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ccc:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <xTaskIncrementTick+0x174>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	4a0f      	ldr	r2, [pc, #60]	; (8005d10 <xTaskIncrementTick+0x174>)
 8005cd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <xTaskIncrementTick+0x178>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ce2:	697b      	ldr	r3, [r7, #20]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000fc0 	.word	0x20000fc0
 8005cf0:	20000f9c 	.word	0x20000f9c
 8005cf4:	20000f50 	.word	0x20000f50
 8005cf8:	20000f54 	.word	0x20000f54
 8005cfc:	20000fb0 	.word	0x20000fb0
 8005d00:	20000fb8 	.word	0x20000fb8
 8005d04:	20000fa0 	.word	0x20000fa0
 8005d08:	20000ac8 	.word	0x20000ac8
 8005d0c:	20000ac4 	.word	0x20000ac4
 8005d10:	20000fa8 	.word	0x20000fa8
 8005d14:	20000fac 	.word	0x20000fac

08005d18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d1e:	4b2a      	ldr	r3, [pc, #168]	; (8005dc8 <vTaskSwitchContext+0xb0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d26:	4b29      	ldr	r3, [pc, #164]	; (8005dcc <vTaskSwitchContext+0xb4>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d2c:	e046      	b.n	8005dbc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005d2e:	4b27      	ldr	r3, [pc, #156]	; (8005dcc <vTaskSwitchContext+0xb4>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005d34:	4b26      	ldr	r3, [pc, #152]	; (8005dd0 <vTaskSwitchContext+0xb8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e010      	b.n	8005d5e <vTaskSwitchContext+0x46>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <vTaskSwitchContext+0x40>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	607b      	str	r3, [r7, #4]
}
 8005d54:	bf00      	nop
 8005d56:	e7fe      	b.n	8005d56 <vTaskSwitchContext+0x3e>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	491d      	ldr	r1, [pc, #116]	; (8005dd4 <vTaskSwitchContext+0xbc>)
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0e4      	beq.n	8005d3c <vTaskSwitchContext+0x24>
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4a15      	ldr	r2, [pc, #84]	; (8005dd4 <vTaskSwitchContext+0xbc>)
 8005d7e:	4413      	add	r3, r2
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	605a      	str	r2, [r3, #4]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	3308      	adds	r3, #8
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d104      	bne.n	8005da2 <vTaskSwitchContext+0x8a>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a0b      	ldr	r2, [pc, #44]	; (8005dd8 <vTaskSwitchContext+0xc0>)
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <vTaskSwitchContext+0xb8>)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005db2:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <vTaskSwitchContext+0xc0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3354      	adds	r3, #84	; 0x54
 8005db8:	4a08      	ldr	r2, [pc, #32]	; (8005ddc <vTaskSwitchContext+0xc4>)
 8005dba:	6013      	str	r3, [r2, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	20000fc0 	.word	0x20000fc0
 8005dcc:	20000fac 	.word	0x20000fac
 8005dd0:	20000fa0 	.word	0x20000fa0
 8005dd4:	20000ac8 	.word	0x20000ac8
 8005dd8:	20000ac4 	.word	0x20000ac4
 8005ddc:	20000174 	.word	0x20000174

08005de0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	60fb      	str	r3, [r7, #12]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e06:	4b07      	ldr	r3, [pc, #28]	; (8005e24 <vTaskPlaceOnEventList+0x44>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3318      	adds	r3, #24
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fe fc51 	bl	80046b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e14:	2101      	movs	r1, #1
 8005e16:	6838      	ldr	r0, [r7, #0]
 8005e18:	f000 fb9e 	bl	8006558 <prvAddCurrentTaskToDelayedList>
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000ac4 	.word	0x20000ac4

08005e28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	617b      	str	r3, [r7, #20]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <vTaskPlaceOnEventListRestricted+0x54>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3318      	adds	r3, #24
 8005e56:	4619      	mov	r1, r3
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7fe fc08 	bl	800466e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295
 8005e68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	68b8      	ldr	r0, [r7, #8]
 8005e6e:	f000 fb73 	bl	8006558 <prvAddCurrentTaskToDelayedList>
	}
 8005e72:	bf00      	nop
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000ac4 	.word	0x20000ac4

08005e80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	60fb      	str	r3, [r7, #12]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	3318      	adds	r3, #24
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe fc39 	bl	8004728 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eb6:	4b1e      	ldr	r3, [pc, #120]	; (8005f30 <xTaskRemoveFromEventList+0xb0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d11d      	bne.n	8005efa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe fc30 	bl	8004728 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <xTaskRemoveFromEventList+0xb4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d903      	bls.n	8005edc <xTaskRemoveFromEventList+0x5c>
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4a16      	ldr	r2, [pc, #88]	; (8005f34 <xTaskRemoveFromEventList+0xb4>)
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <xTaskRemoveFromEventList+0xb8>)
 8005eea:	441a      	add	r2, r3
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f7fe fbbb 	bl	800466e <vListInsertEnd>
 8005ef8:	e005      	b.n	8005f06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	3318      	adds	r3, #24
 8005efe:	4619      	mov	r1, r3
 8005f00:	480e      	ldr	r0, [pc, #56]	; (8005f3c <xTaskRemoveFromEventList+0xbc>)
 8005f02:	f7fe fbb4 	bl	800466e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0a:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <xTaskRemoveFromEventList+0xc0>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d905      	bls.n	8005f20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f14:	2301      	movs	r3, #1
 8005f16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <xTaskRemoveFromEventList+0xc4>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	e001      	b.n	8005f24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005f24:	697b      	ldr	r3, [r7, #20]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000fc0 	.word	0x20000fc0
 8005f34:	20000fa0 	.word	0x20000fa0
 8005f38:	20000ac8 	.word	0x20000ac8
 8005f3c:	20000f58 	.word	0x20000f58
 8005f40:	20000ac4 	.word	0x20000ac4
 8005f44:	20000fac 	.word	0x20000fac

08005f48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f50:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <vTaskInternalSetTimeOutState+0x24>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <vTaskInternalSetTimeOutState+0x28>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	605a      	str	r2, [r3, #4]
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	20000fb0 	.word	0x20000fb0
 8005f70:	20000f9c 	.word	0x20000f9c

08005f74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	613b      	str	r3, [r7, #16]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	60fb      	str	r3, [r7, #12]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005fb6:	f000 ff65 	bl	8006e84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fba:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <xTaskCheckForTimeOut+0xbc>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	d102      	bne.n	8005fda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	61fb      	str	r3, [r7, #28]
 8005fd8:	e023      	b.n	8006022 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b15      	ldr	r3, [pc, #84]	; (8006034 <xTaskCheckForTimeOut+0xc0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d007      	beq.n	8005ff6 <xTaskCheckForTimeOut+0x82>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d302      	bcc.n	8005ff6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	61fb      	str	r3, [r7, #28]
 8005ff4:	e015      	b.n	8006022 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d20b      	bcs.n	8006018 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	1ad2      	subs	r2, r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ff9b 	bl	8005f48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	e004      	b.n	8006022 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800601e:	2301      	movs	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006022:	f000 ff5f 	bl	8006ee4 <vPortExitCritical>

	return xReturn;
 8006026:	69fb      	ldr	r3, [r7, #28]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20000f9c 	.word	0x20000f9c
 8006034:	20000fb0 	.word	0x20000fb0

08006038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <vTaskMissedYield+0x14>)
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
}
 8006042:	bf00      	nop
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	20000fac 	.word	0x20000fac

08006050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006058:	f000 f852 	bl	8006100 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800605c:	4b06      	ldr	r3, [pc, #24]	; (8006078 <prvIdleTask+0x28>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d9f9      	bls.n	8006058 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006064:	4b05      	ldr	r3, [pc, #20]	; (800607c <prvIdleTask+0x2c>)
 8006066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006074:	e7f0      	b.n	8006058 <prvIdleTask+0x8>
 8006076:	bf00      	nop
 8006078:	20000ac8 	.word	0x20000ac8
 800607c:	e000ed04 	.word	0xe000ed04

08006080 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006086:	2300      	movs	r3, #0
 8006088:	607b      	str	r3, [r7, #4]
 800608a:	e00c      	b.n	80060a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4a12      	ldr	r2, [pc, #72]	; (80060e0 <prvInitialiseTaskLists+0x60>)
 8006098:	4413      	add	r3, r2
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe faba 	bl	8004614 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3301      	adds	r3, #1
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b37      	cmp	r3, #55	; 0x37
 80060aa:	d9ef      	bls.n	800608c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060ac:	480d      	ldr	r0, [pc, #52]	; (80060e4 <prvInitialiseTaskLists+0x64>)
 80060ae:	f7fe fab1 	bl	8004614 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060b2:	480d      	ldr	r0, [pc, #52]	; (80060e8 <prvInitialiseTaskLists+0x68>)
 80060b4:	f7fe faae 	bl	8004614 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060b8:	480c      	ldr	r0, [pc, #48]	; (80060ec <prvInitialiseTaskLists+0x6c>)
 80060ba:	f7fe faab 	bl	8004614 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060be:	480c      	ldr	r0, [pc, #48]	; (80060f0 <prvInitialiseTaskLists+0x70>)
 80060c0:	f7fe faa8 	bl	8004614 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060c4:	480b      	ldr	r0, [pc, #44]	; (80060f4 <prvInitialiseTaskLists+0x74>)
 80060c6:	f7fe faa5 	bl	8004614 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060ca:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <prvInitialiseTaskLists+0x78>)
 80060cc:	4a05      	ldr	r2, [pc, #20]	; (80060e4 <prvInitialiseTaskLists+0x64>)
 80060ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060d0:	4b0a      	ldr	r3, [pc, #40]	; (80060fc <prvInitialiseTaskLists+0x7c>)
 80060d2:	4a05      	ldr	r2, [pc, #20]	; (80060e8 <prvInitialiseTaskLists+0x68>)
 80060d4:	601a      	str	r2, [r3, #0]
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000ac8 	.word	0x20000ac8
 80060e4:	20000f28 	.word	0x20000f28
 80060e8:	20000f3c 	.word	0x20000f3c
 80060ec:	20000f58 	.word	0x20000f58
 80060f0:	20000f6c 	.word	0x20000f6c
 80060f4:	20000f84 	.word	0x20000f84
 80060f8:	20000f50 	.word	0x20000f50
 80060fc:	20000f54 	.word	0x20000f54

08006100 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006106:	e019      	b.n	800613c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006108:	f000 febc 	bl	8006e84 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800610c:	4b10      	ldr	r3, [pc, #64]	; (8006150 <prvCheckTasksWaitingTermination+0x50>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3304      	adds	r3, #4
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe fb05 	bl	8004728 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <prvCheckTasksWaitingTermination+0x54>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3b01      	subs	r3, #1
 8006124:	4a0b      	ldr	r2, [pc, #44]	; (8006154 <prvCheckTasksWaitingTermination+0x54>)
 8006126:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <prvCheckTasksWaitingTermination+0x58>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3b01      	subs	r3, #1
 800612e:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <prvCheckTasksWaitingTermination+0x58>)
 8006130:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006132:	f000 fed7 	bl	8006ee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f810 	bl	800615c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <prvCheckTasksWaitingTermination+0x58>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e1      	bne.n	8006108 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000f6c 	.word	0x20000f6c
 8006154:	20000f98 	.word	0x20000f98
 8006158:	20000f80 	.word	0x20000f80

0800615c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3354      	adds	r3, #84	; 0x54
 8006168:	4618      	mov	r0, r3
 800616a:	f001 fb97 	bl	800789c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006174:	2b00      	cmp	r3, #0
 8006176:	d108      	bne.n	800618a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	4618      	mov	r0, r3
 800617e:	f001 f867 	bl	8007250 <vPortFree>
				vPortFree( pxTCB );
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 f864 	bl	8007250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006188:	e018      	b.n	80061bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006190:	2b01      	cmp	r3, #1
 8006192:	d103      	bne.n	800619c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f001 f85b 	bl	8007250 <vPortFree>
	}
 800619a:	e00f      	b.n	80061bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d00a      	beq.n	80061bc <prvDeleteTCB+0x60>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	60fb      	str	r3, [r7, #12]
}
 80061b8:	bf00      	nop
 80061ba:	e7fe      	b.n	80061ba <prvDeleteTCB+0x5e>
	}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ca:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <prvResetNextTaskUnblockTime+0x44>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <prvResetNextTaskUnblockTime+0x14>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <prvResetNextTaskUnblockTime+0x16>
 80061d8:	2300      	movs	r3, #0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d004      	beq.n	80061e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061de:	4b0b      	ldr	r3, [pc, #44]	; (800620c <prvResetNextTaskUnblockTime+0x48>)
 80061e0:	f04f 32ff 	mov.w	r2, #4294967295
 80061e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061e6:	e008      	b.n	80061fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061e8:	4b07      	ldr	r3, [pc, #28]	; (8006208 <prvResetNextTaskUnblockTime+0x44>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	4a05      	ldr	r2, [pc, #20]	; (800620c <prvResetNextTaskUnblockTime+0x48>)
 80061f8:	6013      	str	r3, [r2, #0]
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	20000f50 	.word	0x20000f50
 800620c:	20000fb8 	.word	0x20000fb8

08006210 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <xTaskGetCurrentTaskHandle+0x1c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800621c:	687b      	ldr	r3, [r7, #4]
	}
 800621e:	4618      	mov	r0, r3
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20000ac4 	.word	0x20000ac4

08006230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006236:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <xTaskGetSchedulerState+0x34>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800623e:	2301      	movs	r3, #1
 8006240:	607b      	str	r3, [r7, #4]
 8006242:	e008      	b.n	8006256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006244:	4b08      	ldr	r3, [pc, #32]	; (8006268 <xTaskGetSchedulerState+0x38>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d102      	bne.n	8006252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800624c:	2302      	movs	r3, #2
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	e001      	b.n	8006256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006252:	2300      	movs	r3, #0
 8006254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006256:	687b      	ldr	r3, [r7, #4]
	}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	20000fa4 	.word	0x20000fa4
 8006268:	20000fc0 	.word	0x20000fc0

0800626c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d056      	beq.n	8006330 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006286:	4b2d      	ldr	r3, [pc, #180]	; (800633c <xTaskPriorityInherit+0xd0>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	429a      	cmp	r2, r3
 800628e:	d246      	bcs.n	800631e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	db06      	blt.n	80062a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006298:	4b28      	ldr	r3, [pc, #160]	; (800633c <xTaskPriorityInherit+0xd0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6959      	ldr	r1, [r3, #20]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4a22      	ldr	r2, [pc, #136]	; (8006340 <xTaskPriorityInherit+0xd4>)
 80062b8:	4413      	add	r3, r2
 80062ba:	4299      	cmp	r1, r3
 80062bc:	d101      	bne.n	80062c2 <xTaskPriorityInherit+0x56>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <xTaskPriorityInherit+0x58>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d022      	beq.n	800630e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fe fa2b 	bl	8004728 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062d2:	4b1a      	ldr	r3, [pc, #104]	; (800633c <xTaskPriorityInherit+0xd0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e0:	4b18      	ldr	r3, [pc, #96]	; (8006344 <xTaskPriorityInherit+0xd8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d903      	bls.n	80062f0 <xTaskPriorityInherit+0x84>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	4a15      	ldr	r2, [pc, #84]	; (8006344 <xTaskPriorityInherit+0xd8>)
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4a10      	ldr	r2, [pc, #64]	; (8006340 <xTaskPriorityInherit+0xd4>)
 80062fe:	441a      	add	r2, r3
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	3304      	adds	r3, #4
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f7fe f9b1 	bl	800466e <vListInsertEnd>
 800630c:	e004      	b.n	8006318 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800630e:	4b0b      	ldr	r3, [pc, #44]	; (800633c <xTaskPriorityInherit+0xd0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	e008      	b.n	8006330 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006322:	4b06      	ldr	r3, [pc, #24]	; (800633c <xTaskPriorityInherit+0xd0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	429a      	cmp	r2, r3
 800632a:	d201      	bcs.n	8006330 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800632c:	2301      	movs	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006330:	68fb      	ldr	r3, [r7, #12]
	}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000ac4 	.word	0x20000ac4
 8006340:	20000ac8 	.word	0x20000ac8
 8006344:	20000fa0 	.word	0x20000fa0

08006348 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d056      	beq.n	800640c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800635e:	4b2e      	ldr	r3, [pc, #184]	; (8006418 <xTaskPriorityDisinherit+0xd0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	429a      	cmp	r2, r3
 8006366:	d00a      	beq.n	800637e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	60fb      	str	r3, [r7, #12]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10a      	bne.n	800639c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	60bb      	str	r3, [r7, #8]
}
 8006398:	bf00      	nop
 800639a:	e7fe      	b.n	800639a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a0:	1e5a      	subs	r2, r3, #1
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d02c      	beq.n	800640c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d128      	bne.n	800640c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	3304      	adds	r3, #4
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe f9b2 	bl	8004728 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <xTaskPriorityDisinherit+0xd4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d903      	bls.n	80063ec <xTaskPriorityDisinherit+0xa4>
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	4a0c      	ldr	r2, [pc, #48]	; (800641c <xTaskPriorityDisinherit+0xd4>)
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	4613      	mov	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4a09      	ldr	r2, [pc, #36]	; (8006420 <xTaskPriorityDisinherit+0xd8>)
 80063fa:	441a      	add	r2, r3
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	3304      	adds	r3, #4
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f7fe f933 	bl	800466e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006408:	2301      	movs	r3, #1
 800640a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800640c:	697b      	ldr	r3, [r7, #20]
	}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000ac4 	.word	0x20000ac4
 800641c:	20000fa0 	.word	0x20000fa0
 8006420:	20000ac8 	.word	0x20000ac8

08006424 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006432:	2301      	movs	r3, #1
 8006434:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d06f      	beq.n	800651c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	60fb      	str	r3, [r7, #12]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d902      	bls.n	800646a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	e002      	b.n	8006470 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800646e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	429a      	cmp	r2, r3
 8006478:	d050      	beq.n	800651c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	429a      	cmp	r2, r3
 8006482:	d14b      	bne.n	800651c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006484:	4b27      	ldr	r3, [pc, #156]	; (8006524 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	429a      	cmp	r2, r3
 800648c:	d10a      	bne.n	80064a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	60bb      	str	r3, [r7, #8]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	db04      	blt.n	80064c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	6959      	ldr	r1, [r3, #20]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4613      	mov	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4a15      	ldr	r2, [pc, #84]	; (8006528 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80064d2:	4413      	add	r3, r2
 80064d4:	4299      	cmp	r1, r3
 80064d6:	d101      	bne.n	80064dc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80064d8:	2301      	movs	r3, #1
 80064da:	e000      	b.n	80064de <vTaskPriorityDisinheritAfterTimeout+0xba>
 80064dc:	2300      	movs	r3, #0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01c      	beq.n	800651c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	3304      	adds	r3, #4
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe f91e 	bl	8004728 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	4b0e      	ldr	r3, [pc, #56]	; (800652c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d903      	bls.n	8006500 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	4a0b      	ldr	r2, [pc, #44]	; (800652c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4a06      	ldr	r2, [pc, #24]	; (8006528 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800650e:	441a      	add	r2, r3
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	3304      	adds	r3, #4
 8006514:	4619      	mov	r1, r3
 8006516:	4610      	mov	r0, r2
 8006518:	f7fe f8a9 	bl	800466e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800651c:	bf00      	nop
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000ac4 	.word	0x20000ac4
 8006528:	20000ac8 	.word	0x20000ac8
 800652c:	20000fa0 	.word	0x20000fa0

08006530 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006534:	4b07      	ldr	r3, [pc, #28]	; (8006554 <pvTaskIncrementMutexHeldCount+0x24>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <pvTaskIncrementMutexHeldCount+0x24>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006542:	3201      	adds	r2, #1
 8006544:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006546:	4b03      	ldr	r3, [pc, #12]	; (8006554 <pvTaskIncrementMutexHeldCount+0x24>)
 8006548:	681b      	ldr	r3, [r3, #0]
	}
 800654a:	4618      	mov	r0, r3
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	20000ac4 	.word	0x20000ac4

08006558 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006562:	4b21      	ldr	r3, [pc, #132]	; (80065e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006568:	4b20      	ldr	r3, [pc, #128]	; (80065ec <prvAddCurrentTaskToDelayedList+0x94>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3304      	adds	r3, #4
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe f8da 	bl	8004728 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657a:	d10a      	bne.n	8006592 <prvAddCurrentTaskToDelayedList+0x3a>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d007      	beq.n	8006592 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006582:	4b1a      	ldr	r3, [pc, #104]	; (80065ec <prvAddCurrentTaskToDelayedList+0x94>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3304      	adds	r3, #4
 8006588:	4619      	mov	r1, r3
 800658a:	4819      	ldr	r0, [pc, #100]	; (80065f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800658c:	f7fe f86f 	bl	800466e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006590:	e026      	b.n	80065e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4413      	add	r3, r2
 8006598:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800659a:	4b14      	ldr	r3, [pc, #80]	; (80065ec <prvAddCurrentTaskToDelayedList+0x94>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d209      	bcs.n	80065be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065aa:	4b12      	ldr	r3, [pc, #72]	; (80065f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <prvAddCurrentTaskToDelayedList+0x94>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	f7fe f87d 	bl	80046b6 <vListInsert>
}
 80065bc:	e010      	b.n	80065e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065be:	4b0e      	ldr	r3, [pc, #56]	; (80065f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <prvAddCurrentTaskToDelayedList+0x94>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4619      	mov	r1, r3
 80065ca:	4610      	mov	r0, r2
 80065cc:	f7fe f873 	bl	80046b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d202      	bcs.n	80065e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065da:	4a08      	ldr	r2, [pc, #32]	; (80065fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	6013      	str	r3, [r2, #0]
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20000f9c 	.word	0x20000f9c
 80065ec:	20000ac4 	.word	0x20000ac4
 80065f0:	20000f84 	.word	0x20000f84
 80065f4:	20000f54 	.word	0x20000f54
 80065f8:	20000f50 	.word	0x20000f50
 80065fc:	20000fb8 	.word	0x20000fb8

08006600 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08a      	sub	sp, #40	; 0x28
 8006604:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800660a:	f000 facb 	bl	8006ba4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800660e:	4b1c      	ldr	r3, [pc, #112]	; (8006680 <xTimerCreateTimerTask+0x80>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d021      	beq.n	800665a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800661e:	1d3a      	adds	r2, r7, #4
 8006620:	f107 0108 	add.w	r1, r7, #8
 8006624:	f107 030c 	add.w	r3, r7, #12
 8006628:	4618      	mov	r0, r3
 800662a:	f7fd ffd9 	bl	80045e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	9202      	str	r2, [sp, #8]
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	2302      	movs	r3, #2
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	2300      	movs	r3, #0
 800663e:	460a      	mov	r2, r1
 8006640:	4910      	ldr	r1, [pc, #64]	; (8006684 <xTimerCreateTimerTask+0x84>)
 8006642:	4811      	ldr	r0, [pc, #68]	; (8006688 <xTimerCreateTimerTask+0x88>)
 8006644:	f7fe ff9a 	bl	800557c <xTaskCreateStatic>
 8006648:	4603      	mov	r3, r0
 800664a:	4a10      	ldr	r2, [pc, #64]	; (800668c <xTimerCreateTimerTask+0x8c>)
 800664c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800664e:	4b0f      	ldr	r3, [pc, #60]	; (800668c <xTimerCreateTimerTask+0x8c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006656:	2301      	movs	r3, #1
 8006658:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	613b      	str	r3, [r7, #16]
}
 8006672:	bf00      	nop
 8006674:	e7fe      	b.n	8006674 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006676:	697b      	ldr	r3, [r7, #20]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000ff4 	.word	0x20000ff4
 8006684:	080086f8 	.word	0x080086f8
 8006688:	080067ad 	.word	0x080067ad
 800668c:	20000ff8 	.word	0x20000ff8

08006690 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08a      	sub	sp, #40	; 0x28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800669e:	2300      	movs	r3, #0
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <xTimerGenericCommand+0x2e>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	623b      	str	r3, [r7, #32]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066be:	4b1a      	ldr	r3, [pc, #104]	; (8006728 <xTimerGenericCommand+0x98>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d02a      	beq.n	800671c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b05      	cmp	r3, #5
 80066d6:	dc18      	bgt.n	800670a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066d8:	f7ff fdaa 	bl	8006230 <xTaskGetSchedulerState>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d109      	bne.n	80066f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066e2:	4b11      	ldr	r3, [pc, #68]	; (8006728 <xTimerGenericCommand+0x98>)
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f107 0110 	add.w	r1, r7, #16
 80066ea:	2300      	movs	r3, #0
 80066ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ee:	f7fe fa3d 	bl	8004b6c <xQueueGenericSend>
 80066f2:	6278      	str	r0, [r7, #36]	; 0x24
 80066f4:	e012      	b.n	800671c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066f6:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <xTimerGenericCommand+0x98>)
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	f107 0110 	add.w	r1, r7, #16
 80066fe:	2300      	movs	r3, #0
 8006700:	2200      	movs	r2, #0
 8006702:	f7fe fa33 	bl	8004b6c <xQueueGenericSend>
 8006706:	6278      	str	r0, [r7, #36]	; 0x24
 8006708:	e008      	b.n	800671c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800670a:	4b07      	ldr	r3, [pc, #28]	; (8006728 <xTimerGenericCommand+0x98>)
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	f107 0110 	add.w	r1, r7, #16
 8006712:	2300      	movs	r3, #0
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	f7fe fb27 	bl	8004d68 <xQueueGenericSendFromISR>
 800671a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800671e:	4618      	mov	r0, r3
 8006720:	3728      	adds	r7, #40	; 0x28
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000ff4 	.word	0x20000ff4

0800672c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af02      	add	r7, sp, #8
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006736:	4b1c      	ldr	r3, [pc, #112]	; (80067a8 <prvProcessExpiredTimer+0x7c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	3304      	adds	r3, #4
 8006744:	4618      	mov	r0, r3
 8006746:	f7fd ffef 	bl	8004728 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d122      	bne.n	8006798 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	18d1      	adds	r1, r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	6978      	ldr	r0, [r7, #20]
 8006760:	f000 f8c8 	bl	80068f4 <prvInsertTimerInActiveList>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d016      	beq.n	8006798 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800676a:	2300      	movs	r3, #0
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	2300      	movs	r3, #0
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	2100      	movs	r1, #0
 8006774:	6978      	ldr	r0, [r7, #20]
 8006776:	f7ff ff8b 	bl	8006690 <xTimerGenericCommand>
 800677a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	60fb      	str	r3, [r7, #12]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	6978      	ldr	r0, [r7, #20]
 800679e:	4798      	blx	r3
}
 80067a0:	bf00      	nop
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000fec 	.word	0x20000fec

080067ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067b4:	f107 0308 	add.w	r3, r7, #8
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 f857 	bl	800686c <prvGetNextExpireTime>
 80067be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4619      	mov	r1, r3
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f803 	bl	80067d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067ca:	f000 f8d5 	bl	8006978 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067ce:	e7f1      	b.n	80067b4 <prvTimerTask+0x8>

080067d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067da:	f7ff f923 	bl	8005a24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067de:	f107 0308 	add.w	r3, r7, #8
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f866 	bl	80068b4 <prvSampleTimeNow>
 80067e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d130      	bne.n	8006852 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10a      	bne.n	800680c <prvProcessTimerOrBlockTask+0x3c>
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d806      	bhi.n	800680c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067fe:	f7ff f91f 	bl	8005a40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff91 	bl	800672c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800680a:	e024      	b.n	8006856 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006812:	4b13      	ldr	r3, [pc, #76]	; (8006860 <prvProcessTimerOrBlockTask+0x90>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <prvProcessTimerOrBlockTask+0x94>)
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	4619      	mov	r1, r3
 8006832:	f7fe fe6f 	bl	8005514 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006836:	f7ff f903 	bl	8005a40 <xTaskResumeAll>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006840:	4b09      	ldr	r3, [pc, #36]	; (8006868 <prvProcessTimerOrBlockTask+0x98>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
}
 8006850:	e001      	b.n	8006856 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006852:	f7ff f8f5 	bl	8005a40 <xTaskResumeAll>
}
 8006856:	bf00      	nop
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000ff0 	.word	0x20000ff0
 8006864:	20000ff4 	.word	0x20000ff4
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006874:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <prvGetNextExpireTime+0x44>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	bf0c      	ite	eq
 800687e:	2301      	moveq	r3, #1
 8006880:	2300      	movne	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	461a      	mov	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d105      	bne.n	800689e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006892:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <prvGetNextExpireTime+0x44>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	e001      	b.n	80068a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068a2:	68fb      	ldr	r3, [r7, #12]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	20000fec 	.word	0x20000fec

080068b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068bc:	f7ff f95e 	bl	8005b7c <xTaskGetTickCount>
 80068c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068c2:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <prvSampleTimeNow+0x3c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d205      	bcs.n	80068d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068cc:	f000 f908 	bl	8006ae0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	e002      	b.n	80068de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068de:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <prvSampleTimeNow+0x3c>)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068e4:	68fb      	ldr	r3, [r7, #12]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000ffc 	.word	0x20000ffc

080068f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	d812      	bhi.n	8006940 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e01b      	b.n	8006966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800692e:	4b10      	ldr	r3, [pc, #64]	; (8006970 <prvInsertTimerInActiveList+0x7c>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3304      	adds	r3, #4
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7fd febc 	bl	80046b6 <vListInsert>
 800693e:	e012      	b.n	8006966 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d206      	bcs.n	8006956 <prvInsertTimerInActiveList+0x62>
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d302      	bcc.n	8006956 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e007      	b.n	8006966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006956:	4b07      	ldr	r3, [pc, #28]	; (8006974 <prvInsertTimerInActiveList+0x80>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3304      	adds	r3, #4
 800695e:	4619      	mov	r1, r3
 8006960:	4610      	mov	r0, r2
 8006962:	f7fd fea8 	bl	80046b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006966:	697b      	ldr	r3, [r7, #20]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20000ff0 	.word	0x20000ff0
 8006974:	20000fec 	.word	0x20000fec

08006978 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08e      	sub	sp, #56	; 0x38
 800697c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800697e:	e09d      	b.n	8006abc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	da18      	bge.n	80069b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	3304      	adds	r3, #4
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	61fb      	str	r3, [r7, #28]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ae:	6850      	ldr	r0, [r2, #4]
 80069b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b2:	6892      	ldr	r2, [r2, #8]
 80069b4:	4611      	mov	r1, r2
 80069b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	db7d      	blt.n	8006aba <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	3304      	adds	r3, #4
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fd feaa 	bl	8004728 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069d4:	463b      	mov	r3, r7
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff ff6c 	bl	80068b4 <prvSampleTimeNow>
 80069dc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b09      	cmp	r3, #9
 80069e2:	d86b      	bhi.n	8006abc <prvProcessReceivedCommands+0x144>
 80069e4:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <prvProcessReceivedCommands+0x74>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	08006a15 	.word	0x08006a15
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a15 	.word	0x08006a15
 80069f8:	08006abd 	.word	0x08006abd
 80069fc:	08006a71 	.word	0x08006a71
 8006a00:	08006aa9 	.word	0x08006aa9
 8006a04:	08006a15 	.word	0x08006a15
 8006a08:	08006a15 	.word	0x08006a15
 8006a0c:	08006abd 	.word	0x08006abd
 8006a10:	08006a71 	.word	0x08006a71
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	18d1      	adds	r1, r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a22:	f7ff ff67 	bl	80068f4 <prvInsertTimerInActiveList>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d047      	beq.n	8006abc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a32:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d13f      	bne.n	8006abc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	441a      	add	r2, r3
 8006a44:	2300      	movs	r3, #0
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4e:	f7ff fe1f 	bl	8006690 <xTimerGenericCommand>
 8006a52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d130      	bne.n	8006abc <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	61bb      	str	r3, [r7, #24]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	617b      	str	r3, [r7, #20]
}
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	699a      	ldr	r2, [r3, #24]
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	18d1      	adds	r1, r2, r3
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa2:	f7ff ff27 	bl	80068f4 <prvInsertTimerInActiveList>
					break;
 8006aa6:	e009      	b.n	8006abc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab4:	f000 fbcc 	bl	8007250 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ab8:	e000      	b.n	8006abc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006aba:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006abc:	4b07      	ldr	r3, [pc, #28]	; (8006adc <prvProcessReceivedCommands+0x164>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	1d39      	adds	r1, r7, #4
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe f9e7 	bl	8004e98 <xQueueReceive>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f47f af57 	bne.w	8006980 <prvProcessReceivedCommands+0x8>
	}
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	3730      	adds	r7, #48	; 0x30
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000ff4 	.word	0x20000ff4

08006ae0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ae6:	e045      	b.n	8006b74 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ae8:	4b2c      	ldr	r3, [pc, #176]	; (8006b9c <prvSwitchTimerLists+0xbc>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006af2:	4b2a      	ldr	r3, [pc, #168]	; (8006b9c <prvSwitchTimerLists+0xbc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fd fe11 	bl	8004728 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d12e      	bne.n	8006b74 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d90e      	bls.n	8006b46 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b34:	4b19      	ldr	r3, [pc, #100]	; (8006b9c <prvSwitchTimerLists+0xbc>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f7fd fdb9 	bl	80046b6 <vListInsert>
 8006b44:	e016      	b.n	8006b74 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b46:	2300      	movs	r3, #0
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	2100      	movs	r1, #0
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f7ff fd9d 	bl	8006690 <xTimerGenericCommand>
 8006b56:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	603b      	str	r3, [r7, #0]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b74:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <prvSwitchTimerLists+0xbc>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1b4      	bne.n	8006ae8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b7e:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <prvSwitchTimerLists+0xbc>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <prvSwitchTimerLists+0xc0>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a04      	ldr	r2, [pc, #16]	; (8006b9c <prvSwitchTimerLists+0xbc>)
 8006b8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b8c:	4a04      	ldr	r2, [pc, #16]	; (8006ba0 <prvSwitchTimerLists+0xc0>)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6013      	str	r3, [r2, #0]
}
 8006b92:	bf00      	nop
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000fec 	.word	0x20000fec
 8006ba0:	20000ff0 	.word	0x20000ff0

08006ba4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006baa:	f000 f96b 	bl	8006e84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006bae:	4b15      	ldr	r3, [pc, #84]	; (8006c04 <prvCheckForValidListAndQueue+0x60>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d120      	bne.n	8006bf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bb6:	4814      	ldr	r0, [pc, #80]	; (8006c08 <prvCheckForValidListAndQueue+0x64>)
 8006bb8:	f7fd fd2c 	bl	8004614 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bbc:	4813      	ldr	r0, [pc, #76]	; (8006c0c <prvCheckForValidListAndQueue+0x68>)
 8006bbe:	f7fd fd29 	bl	8004614 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bc2:	4b13      	ldr	r3, [pc, #76]	; (8006c10 <prvCheckForValidListAndQueue+0x6c>)
 8006bc4:	4a10      	ldr	r2, [pc, #64]	; (8006c08 <prvCheckForValidListAndQueue+0x64>)
 8006bc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bc8:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <prvCheckForValidListAndQueue+0x70>)
 8006bca:	4a10      	ldr	r2, [pc, #64]	; (8006c0c <prvCheckForValidListAndQueue+0x68>)
 8006bcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bce:	2300      	movs	r3, #0
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <prvCheckForValidListAndQueue+0x74>)
 8006bd4:	4a11      	ldr	r2, [pc, #68]	; (8006c1c <prvCheckForValidListAndQueue+0x78>)
 8006bd6:	2110      	movs	r1, #16
 8006bd8:	200a      	movs	r0, #10
 8006bda:	f7fd fe37 	bl	800484c <xQueueGenericCreateStatic>
 8006bde:	4603      	mov	r3, r0
 8006be0:	4a08      	ldr	r2, [pc, #32]	; (8006c04 <prvCheckForValidListAndQueue+0x60>)
 8006be2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006be4:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <prvCheckForValidListAndQueue+0x60>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bec:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <prvCheckForValidListAndQueue+0x60>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	490b      	ldr	r1, [pc, #44]	; (8006c20 <prvCheckForValidListAndQueue+0x7c>)
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe fc64 	bl	80054c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bf8:	f000 f974 	bl	8006ee4 <vPortExitCritical>
}
 8006bfc:	bf00      	nop
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000ff4 	.word	0x20000ff4
 8006c08:	20000fc4 	.word	0x20000fc4
 8006c0c:	20000fd8 	.word	0x20000fd8
 8006c10:	20000fec 	.word	0x20000fec
 8006c14:	20000ff0 	.word	0x20000ff0
 8006c18:	200010a0 	.word	0x200010a0
 8006c1c:	20001000 	.word	0x20001000
 8006c20:	08008700 	.word	0x08008700

08006c24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3b04      	subs	r3, #4
 8006c34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3b04      	subs	r3, #4
 8006c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f023 0201 	bic.w	r2, r3, #1
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3b04      	subs	r3, #4
 8006c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c54:	4a0c      	ldr	r2, [pc, #48]	; (8006c88 <pxPortInitialiseStack+0x64>)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3b14      	subs	r3, #20
 8006c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3b04      	subs	r3, #4
 8006c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f06f 0202 	mvn.w	r2, #2
 8006c72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3b20      	subs	r3, #32
 8006c78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	08006c8d 	.word	0x08006c8d

08006c8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c96:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <prvTaskExitError+0x54>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9e:	d00a      	beq.n	8006cb6 <prvTaskExitError+0x2a>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <prvTaskExitError+0x28>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60bb      	str	r3, [r7, #8]
}
 8006cc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cca:	bf00      	nop
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0fc      	beq.n	8006ccc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	20000170 	.word	0x20000170
	...

08006cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <pxCurrentTCBConst2>)
 8006cf2:	6819      	ldr	r1, [r3, #0]
 8006cf4:	6808      	ldr	r0, [r1, #0]
 8006cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	f380 8809 	msr	PSP, r0
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f04f 0000 	mov.w	r0, #0
 8006d06:	f380 8811 	msr	BASEPRI, r0
 8006d0a:	4770      	bx	lr
 8006d0c:	f3af 8000 	nop.w

08006d10 <pxCurrentTCBConst2>:
 8006d10:	20000ac4 	.word	0x20000ac4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop

08006d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d18:	4808      	ldr	r0, [pc, #32]	; (8006d3c <prvPortStartFirstTask+0x24>)
 8006d1a:	6800      	ldr	r0, [r0, #0]
 8006d1c:	6800      	ldr	r0, [r0, #0]
 8006d1e:	f380 8808 	msr	MSP, r0
 8006d22:	f04f 0000 	mov.w	r0, #0
 8006d26:	f380 8814 	msr	CONTROL, r0
 8006d2a:	b662      	cpsie	i
 8006d2c:	b661      	cpsie	f
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	df00      	svc	0
 8006d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d3a:	bf00      	nop
 8006d3c:	e000ed08 	.word	0xe000ed08

08006d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d46:	4b46      	ldr	r3, [pc, #280]	; (8006e60 <xPortStartScheduler+0x120>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a46      	ldr	r2, [pc, #280]	; (8006e64 <xPortStartScheduler+0x124>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10a      	bne.n	8006d66 <xPortStartScheduler+0x26>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	613b      	str	r3, [r7, #16]
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d66:	4b3e      	ldr	r3, [pc, #248]	; (8006e60 <xPortStartScheduler+0x120>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a3f      	ldr	r2, [pc, #252]	; (8006e68 <xPortStartScheduler+0x128>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d10a      	bne.n	8006d86 <xPortStartScheduler+0x46>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60fb      	str	r3, [r7, #12]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d86:	4b39      	ldr	r3, [pc, #228]	; (8006e6c <xPortStartScheduler+0x12c>)
 8006d88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	22ff      	movs	r2, #255	; 0xff
 8006d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	4b31      	ldr	r3, [pc, #196]	; (8006e70 <xPortStartScheduler+0x130>)
 8006dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dae:	4b31      	ldr	r3, [pc, #196]	; (8006e74 <xPortStartScheduler+0x134>)
 8006db0:	2207      	movs	r2, #7
 8006db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006db4:	e009      	b.n	8006dca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006db6:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <xPortStartScheduler+0x134>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	4a2d      	ldr	r2, [pc, #180]	; (8006e74 <xPortStartScheduler+0x134>)
 8006dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd2:	2b80      	cmp	r3, #128	; 0x80
 8006dd4:	d0ef      	beq.n	8006db6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dd6:	4b27      	ldr	r3, [pc, #156]	; (8006e74 <xPortStartScheduler+0x134>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f1c3 0307 	rsb	r3, r3, #7
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d00a      	beq.n	8006df8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	60bb      	str	r3, [r7, #8]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006df8:	4b1e      	ldr	r3, [pc, #120]	; (8006e74 <xPortStartScheduler+0x134>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	4a1d      	ldr	r2, [pc, #116]	; (8006e74 <xPortStartScheduler+0x134>)
 8006e00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e02:	4b1c      	ldr	r3, [pc, #112]	; (8006e74 <xPortStartScheduler+0x134>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e0a:	4a1a      	ldr	r2, [pc, #104]	; (8006e74 <xPortStartScheduler+0x134>)
 8006e0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e16:	4b18      	ldr	r3, [pc, #96]	; (8006e78 <xPortStartScheduler+0x138>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <xPortStartScheduler+0x138>)
 8006e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e22:	4b15      	ldr	r3, [pc, #84]	; (8006e78 <xPortStartScheduler+0x138>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <xPortStartScheduler+0x138>)
 8006e28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e2e:	f000 f8dd 	bl	8006fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e32:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <xPortStartScheduler+0x13c>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e38:	f000 f8fc 	bl	8007034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e3c:	4b10      	ldr	r3, [pc, #64]	; (8006e80 <xPortStartScheduler+0x140>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a0f      	ldr	r2, [pc, #60]	; (8006e80 <xPortStartScheduler+0x140>)
 8006e42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e48:	f7ff ff66 	bl	8006d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e4c:	f7fe ff64 	bl	8005d18 <vTaskSwitchContext>
	prvTaskExitError();
 8006e50:	f7ff ff1c 	bl	8006c8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	e000ed00 	.word	0xe000ed00
 8006e64:	410fc271 	.word	0x410fc271
 8006e68:	410fc270 	.word	0x410fc270
 8006e6c:	e000e400 	.word	0xe000e400
 8006e70:	200010f0 	.word	0x200010f0
 8006e74:	200010f4 	.word	0x200010f4
 8006e78:	e000ed20 	.word	0xe000ed20
 8006e7c:	20000170 	.word	0x20000170
 8006e80:	e000ef34 	.word	0xe000ef34

08006e84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	607b      	str	r3, [r7, #4]
}
 8006e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e9e:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <vPortEnterCritical+0x58>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	4a0d      	ldr	r2, [pc, #52]	; (8006edc <vPortEnterCritical+0x58>)
 8006ea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <vPortEnterCritical+0x58>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d10f      	bne.n	8006ed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <vPortEnterCritical+0x5c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	603b      	str	r3, [r7, #0]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <vPortEnterCritical+0x4a>
	}
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	20000170 	.word	0x20000170
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eea:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <vPortExitCritical+0x50>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <vPortExitCritical+0x24>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	607b      	str	r3, [r7, #4]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <vPortExitCritical+0x50>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <vPortExitCritical+0x50>)
 8006f10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f12:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <vPortExitCritical+0x50>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d105      	bne.n	8006f26 <vPortExitCritical+0x42>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	f383 8811 	msr	BASEPRI, r3
}
 8006f24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000170 	.word	0x20000170
	...

08006f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f40:	f3ef 8009 	mrs	r0, PSP
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	4b15      	ldr	r3, [pc, #84]	; (8006fa0 <pxCurrentTCBConst>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	f01e 0f10 	tst.w	lr, #16
 8006f50:	bf08      	it	eq
 8006f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	6010      	str	r0, [r2, #0]
 8006f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f64:	f380 8811 	msr	BASEPRI, r0
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f7fe fed2 	bl	8005d18 <vTaskSwitchContext>
 8006f74:	f04f 0000 	mov.w	r0, #0
 8006f78:	f380 8811 	msr	BASEPRI, r0
 8006f7c:	bc09      	pop	{r0, r3}
 8006f7e:	6819      	ldr	r1, [r3, #0]
 8006f80:	6808      	ldr	r0, [r1, #0]
 8006f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f86:	f01e 0f10 	tst.w	lr, #16
 8006f8a:	bf08      	it	eq
 8006f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f90:	f380 8809 	msr	PSP, r0
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst>:
 8006fa0:	20000ac4 	.word	0x20000ac4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	607b      	str	r3, [r7, #4]
}
 8006fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fc2:	f7fe fdeb 	bl	8005b9c <xTaskIncrementTick>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fcc:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <SysTick_Handler+0x40>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	f383 8811 	msr	BASEPRI, r3
}
 8006fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <vPortSetupTimerInterrupt+0x34>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <vPortSetupTimerInterrupt+0x38>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <vPortSetupTimerInterrupt+0x3c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a0a      	ldr	r2, [pc, #40]	; (800702c <vPortSetupTimerInterrupt+0x40>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	099b      	lsrs	r3, r3, #6
 8007008:	4a09      	ldr	r2, [pc, #36]	; (8007030 <vPortSetupTimerInterrupt+0x44>)
 800700a:	3b01      	subs	r3, #1
 800700c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800700e:	4b04      	ldr	r3, [pc, #16]	; (8007020 <vPortSetupTimerInterrupt+0x34>)
 8007010:	2207      	movs	r2, #7
 8007012:	601a      	str	r2, [r3, #0]
}
 8007014:	bf00      	nop
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	e000e010 	.word	0xe000e010
 8007024:	e000e018 	.word	0xe000e018
 8007028:	20000164 	.word	0x20000164
 800702c:	10624dd3 	.word	0x10624dd3
 8007030:	e000e014 	.word	0xe000e014

08007034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007044 <vPortEnableVFP+0x10>
 8007038:	6801      	ldr	r1, [r0, #0]
 800703a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800703e:	6001      	str	r1, [r0, #0]
 8007040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007042:	bf00      	nop
 8007044:	e000ed88 	.word	0xe000ed88

08007048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800704e:	f3ef 8305 	mrs	r3, IPSR
 8007052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b0f      	cmp	r3, #15
 8007058:	d914      	bls.n	8007084 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800705a:	4a17      	ldr	r2, [pc, #92]	; (80070b8 <vPortValidateInterruptPriority+0x70>)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007064:	4b15      	ldr	r3, [pc, #84]	; (80070bc <vPortValidateInterruptPriority+0x74>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	7afa      	ldrb	r2, [r7, #11]
 800706a:	429a      	cmp	r2, r3
 800706c:	d20a      	bcs.n	8007084 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	607b      	str	r3, [r7, #4]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007084:	4b0e      	ldr	r3, [pc, #56]	; (80070c0 <vPortValidateInterruptPriority+0x78>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800708c:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <vPortValidateInterruptPriority+0x7c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d90a      	bls.n	80070aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	603b      	str	r3, [r7, #0]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <vPortValidateInterruptPriority+0x60>
	}
 80070aa:	bf00      	nop
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	e000e3f0 	.word	0xe000e3f0
 80070bc:	200010f0 	.word	0x200010f0
 80070c0:	e000ed0c 	.word	0xe000ed0c
 80070c4:	200010f4 	.word	0x200010f4

080070c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	; 0x28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070d4:	f7fe fca6 	bl	8005a24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070d8:	4b58      	ldr	r3, [pc, #352]	; (800723c <pvPortMalloc+0x174>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070e0:	f000 f910 	bl	8007304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070e4:	4b56      	ldr	r3, [pc, #344]	; (8007240 <pvPortMalloc+0x178>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4013      	ands	r3, r2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 808e 	bne.w	800720e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01d      	beq.n	8007134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80070f8:	2208      	movs	r2, #8
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4413      	add	r3, r2
 80070fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	2b00      	cmp	r3, #0
 8007108:	d014      	beq.n	8007134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f023 0307 	bic.w	r3, r3, #7
 8007110:	3308      	adds	r3, #8
 8007112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <pvPortMalloc+0x6c>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	617b      	str	r3, [r7, #20]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d069      	beq.n	800720e <pvPortMalloc+0x146>
 800713a:	4b42      	ldr	r3, [pc, #264]	; (8007244 <pvPortMalloc+0x17c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d864      	bhi.n	800720e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007144:	4b40      	ldr	r3, [pc, #256]	; (8007248 <pvPortMalloc+0x180>)
 8007146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007148:	4b3f      	ldr	r3, [pc, #252]	; (8007248 <pvPortMalloc+0x180>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800714e:	e004      	b.n	800715a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d903      	bls.n	800716c <pvPortMalloc+0xa4>
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1f1      	bne.n	8007150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800716c:	4b33      	ldr	r3, [pc, #204]	; (800723c <pvPortMalloc+0x174>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007172:	429a      	cmp	r2, r3
 8007174:	d04b      	beq.n	800720e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2208      	movs	r2, #8
 800717c:	4413      	add	r3, r2
 800717e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	2308      	movs	r3, #8
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	429a      	cmp	r2, r3
 8007196:	d91f      	bls.n	80071d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4413      	add	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <pvPortMalloc+0xf8>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	613b      	str	r3, [r7, #16]
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	1ad2      	subs	r2, r2, r3
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071d2:	69b8      	ldr	r0, [r7, #24]
 80071d4:	f000 f8f8 	bl	80073c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071d8:	4b1a      	ldr	r3, [pc, #104]	; (8007244 <pvPortMalloc+0x17c>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	4a18      	ldr	r2, [pc, #96]	; (8007244 <pvPortMalloc+0x17c>)
 80071e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071e6:	4b17      	ldr	r3, [pc, #92]	; (8007244 <pvPortMalloc+0x17c>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4b18      	ldr	r3, [pc, #96]	; (800724c <pvPortMalloc+0x184>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d203      	bcs.n	80071fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071f2:	4b14      	ldr	r3, [pc, #80]	; (8007244 <pvPortMalloc+0x17c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a15      	ldr	r2, [pc, #84]	; (800724c <pvPortMalloc+0x184>)
 80071f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	4b10      	ldr	r3, [pc, #64]	; (8007240 <pvPortMalloc+0x178>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	431a      	orrs	r2, r3
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800720e:	f7fe fc17 	bl	8005a40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	f003 0307 	and.w	r3, r3, #7
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00a      	beq.n	8007232 <pvPortMalloc+0x16a>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	60fb      	str	r3, [r7, #12]
}
 800722e:	bf00      	nop
 8007230:	e7fe      	b.n	8007230 <pvPortMalloc+0x168>
	return pvReturn;
 8007232:	69fb      	ldr	r3, [r7, #28]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3728      	adds	r7, #40	; 0x28
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	20001d00 	.word	0x20001d00
 8007240:	20001d0c 	.word	0x20001d0c
 8007244:	20001d04 	.word	0x20001d04
 8007248:	20001cf8 	.word	0x20001cf8
 800724c:	20001d08 	.word	0x20001d08

08007250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d048      	beq.n	80072f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007262:	2308      	movs	r3, #8
 8007264:	425b      	negs	r3, r3
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4413      	add	r3, r2
 800726a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	4b21      	ldr	r3, [pc, #132]	; (80072fc <vPortFree+0xac>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <vPortFree+0x44>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60fb      	str	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <vPortFree+0x62>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	60bb      	str	r3, [r7, #8]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	4b11      	ldr	r3, [pc, #68]	; (80072fc <vPortFree+0xac>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d019      	beq.n	80072f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d115      	bne.n	80072f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <vPortFree+0xac>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	43db      	mvns	r3, r3
 80072d2:	401a      	ands	r2, r3
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072d8:	f7fe fba4 	bl	8005a24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	4b07      	ldr	r3, [pc, #28]	; (8007300 <vPortFree+0xb0>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4413      	add	r3, r2
 80072e6:	4a06      	ldr	r2, [pc, #24]	; (8007300 <vPortFree+0xb0>)
 80072e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f000 f86c 	bl	80073c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80072f0:	f7fe fba6 	bl	8005a40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072f4:	bf00      	nop
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20001d0c 	.word	0x20001d0c
 8007300:	20001d04 	.word	0x20001d04

08007304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800730a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800730e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007310:	4b27      	ldr	r3, [pc, #156]	; (80073b0 <prvHeapInit+0xac>)
 8007312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00c      	beq.n	8007338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3307      	adds	r3, #7
 8007322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0307 	bic.w	r3, r3, #7
 800732a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	4a1f      	ldr	r2, [pc, #124]	; (80073b0 <prvHeapInit+0xac>)
 8007334:	4413      	add	r3, r2
 8007336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800733c:	4a1d      	ldr	r2, [pc, #116]	; (80073b4 <prvHeapInit+0xb0>)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007342:	4b1c      	ldr	r3, [pc, #112]	; (80073b4 <prvHeapInit+0xb0>)
 8007344:	2200      	movs	r2, #0
 8007346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4413      	add	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007350:	2208      	movs	r2, #8
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0307 	bic.w	r3, r3, #7
 800735e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <prvHeapInit+0xb4>)
 8007364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007366:	4b14      	ldr	r3, [pc, #80]	; (80073b8 <prvHeapInit+0xb4>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2200      	movs	r2, #0
 800736c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800736e:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <prvHeapInit+0xb4>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007384:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <prvHeapInit+0xb4>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <prvHeapInit+0xb8>)
 8007392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	4a09      	ldr	r2, [pc, #36]	; (80073c0 <prvHeapInit+0xbc>)
 800739a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800739c:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <prvHeapInit+0xc0>)
 800739e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073a2:	601a      	str	r2, [r3, #0]
}
 80073a4:	bf00      	nop
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	200010f8 	.word	0x200010f8
 80073b4:	20001cf8 	.word	0x20001cf8
 80073b8:	20001d00 	.word	0x20001d00
 80073bc:	20001d08 	.word	0x20001d08
 80073c0:	20001d04 	.word	0x20001d04
 80073c4:	20001d0c 	.word	0x20001d0c

080073c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073d0:	4b28      	ldr	r3, [pc, #160]	; (8007474 <prvInsertBlockIntoFreeList+0xac>)
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e002      	b.n	80073dc <prvInsertBlockIntoFreeList+0x14>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d8f7      	bhi.n	80073d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	4413      	add	r3, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d108      	bne.n	800740a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	441a      	add	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	441a      	add	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d118      	bne.n	8007450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <prvInsertBlockIntoFreeList+0xb0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d00d      	beq.n	8007446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	441a      	add	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	e008      	b.n	8007458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <prvInsertBlockIntoFreeList+0xb0>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e003      	b.n	8007458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	429a      	cmp	r2, r3
 800745e:	d002      	beq.n	8007466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20001cf8 	.word	0x20001cf8
 8007478:	20001d00 	.word	0x20001d00

0800747c <__errno>:
 800747c:	4b01      	ldr	r3, [pc, #4]	; (8007484 <__errno+0x8>)
 800747e:	6818      	ldr	r0, [r3, #0]
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20000174 	.word	0x20000174

08007488 <std>:
 8007488:	2300      	movs	r3, #0
 800748a:	b510      	push	{r4, lr}
 800748c:	4604      	mov	r4, r0
 800748e:	e9c0 3300 	strd	r3, r3, [r0]
 8007492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007496:	6083      	str	r3, [r0, #8]
 8007498:	8181      	strh	r1, [r0, #12]
 800749a:	6643      	str	r3, [r0, #100]	; 0x64
 800749c:	81c2      	strh	r2, [r0, #14]
 800749e:	6183      	str	r3, [r0, #24]
 80074a0:	4619      	mov	r1, r3
 80074a2:	2208      	movs	r2, #8
 80074a4:	305c      	adds	r0, #92	; 0x5c
 80074a6:	f000 f91a 	bl	80076de <memset>
 80074aa:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <std+0x38>)
 80074ac:	6263      	str	r3, [r4, #36]	; 0x24
 80074ae:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <std+0x3c>)
 80074b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80074b2:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <std+0x40>)
 80074b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074b6:	4b05      	ldr	r3, [pc, #20]	; (80074cc <std+0x44>)
 80074b8:	6224      	str	r4, [r4, #32]
 80074ba:	6323      	str	r3, [r4, #48]	; 0x30
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	bf00      	nop
 80074c0:	08007975 	.word	0x08007975
 80074c4:	08007997 	.word	0x08007997
 80074c8:	080079cf 	.word	0x080079cf
 80074cc:	080079f3 	.word	0x080079f3

080074d0 <_cleanup_r>:
 80074d0:	4901      	ldr	r1, [pc, #4]	; (80074d8 <_cleanup_r+0x8>)
 80074d2:	f000 b8af 	b.w	8007634 <_fwalk_reent>
 80074d6:	bf00      	nop
 80074d8:	08007bbd 	.word	0x08007bbd

080074dc <__sfmoreglue>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	1e4a      	subs	r2, r1, #1
 80074e0:	2568      	movs	r5, #104	; 0x68
 80074e2:	4355      	muls	r5, r2
 80074e4:	460e      	mov	r6, r1
 80074e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074ea:	f000 f901 	bl	80076f0 <_malloc_r>
 80074ee:	4604      	mov	r4, r0
 80074f0:	b140      	cbz	r0, 8007504 <__sfmoreglue+0x28>
 80074f2:	2100      	movs	r1, #0
 80074f4:	e9c0 1600 	strd	r1, r6, [r0]
 80074f8:	300c      	adds	r0, #12
 80074fa:	60a0      	str	r0, [r4, #8]
 80074fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007500:	f000 f8ed 	bl	80076de <memset>
 8007504:	4620      	mov	r0, r4
 8007506:	bd70      	pop	{r4, r5, r6, pc}

08007508 <__sfp_lock_acquire>:
 8007508:	4801      	ldr	r0, [pc, #4]	; (8007510 <__sfp_lock_acquire+0x8>)
 800750a:	f000 b8d8 	b.w	80076be <__retarget_lock_acquire_recursive>
 800750e:	bf00      	nop
 8007510:	200021c0 	.word	0x200021c0

08007514 <__sfp_lock_release>:
 8007514:	4801      	ldr	r0, [pc, #4]	; (800751c <__sfp_lock_release+0x8>)
 8007516:	f000 b8d3 	b.w	80076c0 <__retarget_lock_release_recursive>
 800751a:	bf00      	nop
 800751c:	200021c0 	.word	0x200021c0

08007520 <__sinit_lock_acquire>:
 8007520:	4801      	ldr	r0, [pc, #4]	; (8007528 <__sinit_lock_acquire+0x8>)
 8007522:	f000 b8cc 	b.w	80076be <__retarget_lock_acquire_recursive>
 8007526:	bf00      	nop
 8007528:	200021bb 	.word	0x200021bb

0800752c <__sinit_lock_release>:
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <__sinit_lock_release+0x8>)
 800752e:	f000 b8c7 	b.w	80076c0 <__retarget_lock_release_recursive>
 8007532:	bf00      	nop
 8007534:	200021bb 	.word	0x200021bb

08007538 <__sinit>:
 8007538:	b510      	push	{r4, lr}
 800753a:	4604      	mov	r4, r0
 800753c:	f7ff fff0 	bl	8007520 <__sinit_lock_acquire>
 8007540:	69a3      	ldr	r3, [r4, #24]
 8007542:	b11b      	cbz	r3, 800754c <__sinit+0x14>
 8007544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007548:	f7ff bff0 	b.w	800752c <__sinit_lock_release>
 800754c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007550:	6523      	str	r3, [r4, #80]	; 0x50
 8007552:	4b13      	ldr	r3, [pc, #76]	; (80075a0 <__sinit+0x68>)
 8007554:	4a13      	ldr	r2, [pc, #76]	; (80075a4 <__sinit+0x6c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	62a2      	str	r2, [r4, #40]	; 0x28
 800755a:	42a3      	cmp	r3, r4
 800755c:	bf04      	itt	eq
 800755e:	2301      	moveq	r3, #1
 8007560:	61a3      	streq	r3, [r4, #24]
 8007562:	4620      	mov	r0, r4
 8007564:	f000 f820 	bl	80075a8 <__sfp>
 8007568:	6060      	str	r0, [r4, #4]
 800756a:	4620      	mov	r0, r4
 800756c:	f000 f81c 	bl	80075a8 <__sfp>
 8007570:	60a0      	str	r0, [r4, #8]
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f818 	bl	80075a8 <__sfp>
 8007578:	2200      	movs	r2, #0
 800757a:	60e0      	str	r0, [r4, #12]
 800757c:	2104      	movs	r1, #4
 800757e:	6860      	ldr	r0, [r4, #4]
 8007580:	f7ff ff82 	bl	8007488 <std>
 8007584:	68a0      	ldr	r0, [r4, #8]
 8007586:	2201      	movs	r2, #1
 8007588:	2109      	movs	r1, #9
 800758a:	f7ff ff7d 	bl	8007488 <std>
 800758e:	68e0      	ldr	r0, [r4, #12]
 8007590:	2202      	movs	r2, #2
 8007592:	2112      	movs	r1, #18
 8007594:	f7ff ff78 	bl	8007488 <std>
 8007598:	2301      	movs	r3, #1
 800759a:	61a3      	str	r3, [r4, #24]
 800759c:	e7d2      	b.n	8007544 <__sinit+0xc>
 800759e:	bf00      	nop
 80075a0:	0800881c 	.word	0x0800881c
 80075a4:	080074d1 	.word	0x080074d1

080075a8 <__sfp>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	4607      	mov	r7, r0
 80075ac:	f7ff ffac 	bl	8007508 <__sfp_lock_acquire>
 80075b0:	4b1e      	ldr	r3, [pc, #120]	; (800762c <__sfp+0x84>)
 80075b2:	681e      	ldr	r6, [r3, #0]
 80075b4:	69b3      	ldr	r3, [r6, #24]
 80075b6:	b913      	cbnz	r3, 80075be <__sfp+0x16>
 80075b8:	4630      	mov	r0, r6
 80075ba:	f7ff ffbd 	bl	8007538 <__sinit>
 80075be:	3648      	adds	r6, #72	; 0x48
 80075c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	d503      	bpl.n	80075d0 <__sfp+0x28>
 80075c8:	6833      	ldr	r3, [r6, #0]
 80075ca:	b30b      	cbz	r3, 8007610 <__sfp+0x68>
 80075cc:	6836      	ldr	r6, [r6, #0]
 80075ce:	e7f7      	b.n	80075c0 <__sfp+0x18>
 80075d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075d4:	b9d5      	cbnz	r5, 800760c <__sfp+0x64>
 80075d6:	4b16      	ldr	r3, [pc, #88]	; (8007630 <__sfp+0x88>)
 80075d8:	60e3      	str	r3, [r4, #12]
 80075da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075de:	6665      	str	r5, [r4, #100]	; 0x64
 80075e0:	f000 f86c 	bl	80076bc <__retarget_lock_init_recursive>
 80075e4:	f7ff ff96 	bl	8007514 <__sfp_lock_release>
 80075e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075f0:	6025      	str	r5, [r4, #0]
 80075f2:	61a5      	str	r5, [r4, #24]
 80075f4:	2208      	movs	r2, #8
 80075f6:	4629      	mov	r1, r5
 80075f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075fc:	f000 f86f 	bl	80076de <memset>
 8007600:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007604:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007608:	4620      	mov	r0, r4
 800760a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800760c:	3468      	adds	r4, #104	; 0x68
 800760e:	e7d9      	b.n	80075c4 <__sfp+0x1c>
 8007610:	2104      	movs	r1, #4
 8007612:	4638      	mov	r0, r7
 8007614:	f7ff ff62 	bl	80074dc <__sfmoreglue>
 8007618:	4604      	mov	r4, r0
 800761a:	6030      	str	r0, [r6, #0]
 800761c:	2800      	cmp	r0, #0
 800761e:	d1d5      	bne.n	80075cc <__sfp+0x24>
 8007620:	f7ff ff78 	bl	8007514 <__sfp_lock_release>
 8007624:	230c      	movs	r3, #12
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	e7ee      	b.n	8007608 <__sfp+0x60>
 800762a:	bf00      	nop
 800762c:	0800881c 	.word	0x0800881c
 8007630:	ffff0001 	.word	0xffff0001

08007634 <_fwalk_reent>:
 8007634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007638:	4606      	mov	r6, r0
 800763a:	4688      	mov	r8, r1
 800763c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007640:	2700      	movs	r7, #0
 8007642:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007646:	f1b9 0901 	subs.w	r9, r9, #1
 800764a:	d505      	bpl.n	8007658 <_fwalk_reent+0x24>
 800764c:	6824      	ldr	r4, [r4, #0]
 800764e:	2c00      	cmp	r4, #0
 8007650:	d1f7      	bne.n	8007642 <_fwalk_reent+0xe>
 8007652:	4638      	mov	r0, r7
 8007654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007658:	89ab      	ldrh	r3, [r5, #12]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d907      	bls.n	800766e <_fwalk_reent+0x3a>
 800765e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007662:	3301      	adds	r3, #1
 8007664:	d003      	beq.n	800766e <_fwalk_reent+0x3a>
 8007666:	4629      	mov	r1, r5
 8007668:	4630      	mov	r0, r6
 800766a:	47c0      	blx	r8
 800766c:	4307      	orrs	r7, r0
 800766e:	3568      	adds	r5, #104	; 0x68
 8007670:	e7e9      	b.n	8007646 <_fwalk_reent+0x12>
	...

08007674 <__libc_init_array>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	4d0d      	ldr	r5, [pc, #52]	; (80076ac <__libc_init_array+0x38>)
 8007678:	4c0d      	ldr	r4, [pc, #52]	; (80076b0 <__libc_init_array+0x3c>)
 800767a:	1b64      	subs	r4, r4, r5
 800767c:	10a4      	asrs	r4, r4, #2
 800767e:	2600      	movs	r6, #0
 8007680:	42a6      	cmp	r6, r4
 8007682:	d109      	bne.n	8007698 <__libc_init_array+0x24>
 8007684:	4d0b      	ldr	r5, [pc, #44]	; (80076b4 <__libc_init_array+0x40>)
 8007686:	4c0c      	ldr	r4, [pc, #48]	; (80076b8 <__libc_init_array+0x44>)
 8007688:	f001 f808 	bl	800869c <_init>
 800768c:	1b64      	subs	r4, r4, r5
 800768e:	10a4      	asrs	r4, r4, #2
 8007690:	2600      	movs	r6, #0
 8007692:	42a6      	cmp	r6, r4
 8007694:	d105      	bne.n	80076a2 <__libc_init_array+0x2e>
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	f855 3b04 	ldr.w	r3, [r5], #4
 800769c:	4798      	blx	r3
 800769e:	3601      	adds	r6, #1
 80076a0:	e7ee      	b.n	8007680 <__libc_init_array+0xc>
 80076a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a6:	4798      	blx	r3
 80076a8:	3601      	adds	r6, #1
 80076aa:	e7f2      	b.n	8007692 <__libc_init_array+0x1e>
 80076ac:	08008908 	.word	0x08008908
 80076b0:	08008908 	.word	0x08008908
 80076b4:	08008908 	.word	0x08008908
 80076b8:	0800890c 	.word	0x0800890c

080076bc <__retarget_lock_init_recursive>:
 80076bc:	4770      	bx	lr

080076be <__retarget_lock_acquire_recursive>:
 80076be:	4770      	bx	lr

080076c0 <__retarget_lock_release_recursive>:
 80076c0:	4770      	bx	lr

080076c2 <memcpy>:
 80076c2:	440a      	add	r2, r1
 80076c4:	4291      	cmp	r1, r2
 80076c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80076ca:	d100      	bne.n	80076ce <memcpy+0xc>
 80076cc:	4770      	bx	lr
 80076ce:	b510      	push	{r4, lr}
 80076d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076d8:	4291      	cmp	r1, r2
 80076da:	d1f9      	bne.n	80076d0 <memcpy+0xe>
 80076dc:	bd10      	pop	{r4, pc}

080076de <memset>:
 80076de:	4402      	add	r2, r0
 80076e0:	4603      	mov	r3, r0
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d100      	bne.n	80076e8 <memset+0xa>
 80076e6:	4770      	bx	lr
 80076e8:	f803 1b01 	strb.w	r1, [r3], #1
 80076ec:	e7f9      	b.n	80076e2 <memset+0x4>
	...

080076f0 <_malloc_r>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	1ccd      	adds	r5, r1, #3
 80076f4:	f025 0503 	bic.w	r5, r5, #3
 80076f8:	3508      	adds	r5, #8
 80076fa:	2d0c      	cmp	r5, #12
 80076fc:	bf38      	it	cc
 80076fe:	250c      	movcc	r5, #12
 8007700:	2d00      	cmp	r5, #0
 8007702:	4606      	mov	r6, r0
 8007704:	db01      	blt.n	800770a <_malloc_r+0x1a>
 8007706:	42a9      	cmp	r1, r5
 8007708:	d903      	bls.n	8007712 <_malloc_r+0x22>
 800770a:	230c      	movs	r3, #12
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	2000      	movs	r0, #0
 8007710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007712:	f000 facd 	bl	8007cb0 <__malloc_lock>
 8007716:	4921      	ldr	r1, [pc, #132]	; (800779c <_malloc_r+0xac>)
 8007718:	680a      	ldr	r2, [r1, #0]
 800771a:	4614      	mov	r4, r2
 800771c:	b99c      	cbnz	r4, 8007746 <_malloc_r+0x56>
 800771e:	4f20      	ldr	r7, [pc, #128]	; (80077a0 <_malloc_r+0xb0>)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	b923      	cbnz	r3, 800772e <_malloc_r+0x3e>
 8007724:	4621      	mov	r1, r4
 8007726:	4630      	mov	r0, r6
 8007728:	f000 f914 	bl	8007954 <_sbrk_r>
 800772c:	6038      	str	r0, [r7, #0]
 800772e:	4629      	mov	r1, r5
 8007730:	4630      	mov	r0, r6
 8007732:	f000 f90f 	bl	8007954 <_sbrk_r>
 8007736:	1c43      	adds	r3, r0, #1
 8007738:	d123      	bne.n	8007782 <_malloc_r+0x92>
 800773a:	230c      	movs	r3, #12
 800773c:	6033      	str	r3, [r6, #0]
 800773e:	4630      	mov	r0, r6
 8007740:	f000 fabc 	bl	8007cbc <__malloc_unlock>
 8007744:	e7e3      	b.n	800770e <_malloc_r+0x1e>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	1b5b      	subs	r3, r3, r5
 800774a:	d417      	bmi.n	800777c <_malloc_r+0x8c>
 800774c:	2b0b      	cmp	r3, #11
 800774e:	d903      	bls.n	8007758 <_malloc_r+0x68>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	441c      	add	r4, r3
 8007754:	6025      	str	r5, [r4, #0]
 8007756:	e004      	b.n	8007762 <_malloc_r+0x72>
 8007758:	6863      	ldr	r3, [r4, #4]
 800775a:	42a2      	cmp	r2, r4
 800775c:	bf0c      	ite	eq
 800775e:	600b      	streq	r3, [r1, #0]
 8007760:	6053      	strne	r3, [r2, #4]
 8007762:	4630      	mov	r0, r6
 8007764:	f000 faaa 	bl	8007cbc <__malloc_unlock>
 8007768:	f104 000b 	add.w	r0, r4, #11
 800776c:	1d23      	adds	r3, r4, #4
 800776e:	f020 0007 	bic.w	r0, r0, #7
 8007772:	1ac2      	subs	r2, r0, r3
 8007774:	d0cc      	beq.n	8007710 <_malloc_r+0x20>
 8007776:	1a1b      	subs	r3, r3, r0
 8007778:	50a3      	str	r3, [r4, r2]
 800777a:	e7c9      	b.n	8007710 <_malloc_r+0x20>
 800777c:	4622      	mov	r2, r4
 800777e:	6864      	ldr	r4, [r4, #4]
 8007780:	e7cc      	b.n	800771c <_malloc_r+0x2c>
 8007782:	1cc4      	adds	r4, r0, #3
 8007784:	f024 0403 	bic.w	r4, r4, #3
 8007788:	42a0      	cmp	r0, r4
 800778a:	d0e3      	beq.n	8007754 <_malloc_r+0x64>
 800778c:	1a21      	subs	r1, r4, r0
 800778e:	4630      	mov	r0, r6
 8007790:	f000 f8e0 	bl	8007954 <_sbrk_r>
 8007794:	3001      	adds	r0, #1
 8007796:	d1dd      	bne.n	8007754 <_malloc_r+0x64>
 8007798:	e7cf      	b.n	800773a <_malloc_r+0x4a>
 800779a:	bf00      	nop
 800779c:	20001d10 	.word	0x20001d10
 80077a0:	20001d14 	.word	0x20001d14

080077a4 <srand>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <srand+0x44>)
 80077a8:	681d      	ldr	r5, [r3, #0]
 80077aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80077ac:	4604      	mov	r4, r0
 80077ae:	b9b3      	cbnz	r3, 80077de <srand+0x3a>
 80077b0:	2018      	movs	r0, #24
 80077b2:	f000 fa75 	bl	8007ca0 <malloc>
 80077b6:	4602      	mov	r2, r0
 80077b8:	63a8      	str	r0, [r5, #56]	; 0x38
 80077ba:	b920      	cbnz	r0, 80077c6 <srand+0x22>
 80077bc:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <srand+0x48>)
 80077be:	480c      	ldr	r0, [pc, #48]	; (80077f0 <srand+0x4c>)
 80077c0:	2142      	movs	r1, #66	; 0x42
 80077c2:	f000 f947 	bl	8007a54 <__assert_func>
 80077c6:	490b      	ldr	r1, [pc, #44]	; (80077f4 <srand+0x50>)
 80077c8:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <srand+0x54>)
 80077ca:	e9c0 1300 	strd	r1, r3, [r0]
 80077ce:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <srand+0x58>)
 80077d0:	6083      	str	r3, [r0, #8]
 80077d2:	230b      	movs	r3, #11
 80077d4:	8183      	strh	r3, [r0, #12]
 80077d6:	2100      	movs	r1, #0
 80077d8:	2001      	movs	r0, #1
 80077da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80077de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80077e0:	2200      	movs	r2, #0
 80077e2:	611c      	str	r4, [r3, #16]
 80077e4:	615a      	str	r2, [r3, #20]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	20000174 	.word	0x20000174
 80077ec:	08008820 	.word	0x08008820
 80077f0:	08008837 	.word	0x08008837
 80077f4:	abcd330e 	.word	0xabcd330e
 80077f8:	e66d1234 	.word	0xe66d1234
 80077fc:	0005deec 	.word	0x0005deec

08007800 <rand>:
 8007800:	4b17      	ldr	r3, [pc, #92]	; (8007860 <rand+0x60>)
 8007802:	b510      	push	{r4, lr}
 8007804:	681c      	ldr	r4, [r3, #0]
 8007806:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007808:	b9b3      	cbnz	r3, 8007838 <rand+0x38>
 800780a:	2018      	movs	r0, #24
 800780c:	f000 fa48 	bl	8007ca0 <malloc>
 8007810:	63a0      	str	r0, [r4, #56]	; 0x38
 8007812:	b928      	cbnz	r0, 8007820 <rand+0x20>
 8007814:	4602      	mov	r2, r0
 8007816:	4b13      	ldr	r3, [pc, #76]	; (8007864 <rand+0x64>)
 8007818:	4813      	ldr	r0, [pc, #76]	; (8007868 <rand+0x68>)
 800781a:	214e      	movs	r1, #78	; 0x4e
 800781c:	f000 f91a 	bl	8007a54 <__assert_func>
 8007820:	4a12      	ldr	r2, [pc, #72]	; (800786c <rand+0x6c>)
 8007822:	4b13      	ldr	r3, [pc, #76]	; (8007870 <rand+0x70>)
 8007824:	e9c0 2300 	strd	r2, r3, [r0]
 8007828:	4b12      	ldr	r3, [pc, #72]	; (8007874 <rand+0x74>)
 800782a:	6083      	str	r3, [r0, #8]
 800782c:	230b      	movs	r3, #11
 800782e:	8183      	strh	r3, [r0, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	2300      	movs	r3, #0
 8007834:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007838:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800783a:	480f      	ldr	r0, [pc, #60]	; (8007878 <rand+0x78>)
 800783c:	690a      	ldr	r2, [r1, #16]
 800783e:	694b      	ldr	r3, [r1, #20]
 8007840:	4c0e      	ldr	r4, [pc, #56]	; (800787c <rand+0x7c>)
 8007842:	4350      	muls	r0, r2
 8007844:	fb04 0003 	mla	r0, r4, r3, r0
 8007848:	fba2 3404 	umull	r3, r4, r2, r4
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	4404      	add	r4, r0
 8007850:	f144 0000 	adc.w	r0, r4, #0
 8007854:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8007858:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800785c:	bd10      	pop	{r4, pc}
 800785e:	bf00      	nop
 8007860:	20000174 	.word	0x20000174
 8007864:	08008820 	.word	0x08008820
 8007868:	08008837 	.word	0x08008837
 800786c:	abcd330e 	.word	0xabcd330e
 8007870:	e66d1234 	.word	0xe66d1234
 8007874:	0005deec 	.word	0x0005deec
 8007878:	5851f42d 	.word	0x5851f42d
 800787c:	4c957f2d 	.word	0x4c957f2d

08007880 <cleanup_glue>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	460c      	mov	r4, r1
 8007884:	6809      	ldr	r1, [r1, #0]
 8007886:	4605      	mov	r5, r0
 8007888:	b109      	cbz	r1, 800788e <cleanup_glue+0xe>
 800788a:	f7ff fff9 	bl	8007880 <cleanup_glue>
 800788e:	4621      	mov	r1, r4
 8007890:	4628      	mov	r0, r5
 8007892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007896:	f000 ba17 	b.w	8007cc8 <_free_r>
	...

0800789c <_reclaim_reent>:
 800789c:	4b2c      	ldr	r3, [pc, #176]	; (8007950 <_reclaim_reent+0xb4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4283      	cmp	r3, r0
 80078a2:	b570      	push	{r4, r5, r6, lr}
 80078a4:	4604      	mov	r4, r0
 80078a6:	d051      	beq.n	800794c <_reclaim_reent+0xb0>
 80078a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078aa:	b143      	cbz	r3, 80078be <_reclaim_reent+0x22>
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d14a      	bne.n	8007948 <_reclaim_reent+0xac>
 80078b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078b4:	6819      	ldr	r1, [r3, #0]
 80078b6:	b111      	cbz	r1, 80078be <_reclaim_reent+0x22>
 80078b8:	4620      	mov	r0, r4
 80078ba:	f000 fa05 	bl	8007cc8 <_free_r>
 80078be:	6961      	ldr	r1, [r4, #20]
 80078c0:	b111      	cbz	r1, 80078c8 <_reclaim_reent+0x2c>
 80078c2:	4620      	mov	r0, r4
 80078c4:	f000 fa00 	bl	8007cc8 <_free_r>
 80078c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80078ca:	b111      	cbz	r1, 80078d2 <_reclaim_reent+0x36>
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 f9fb 	bl	8007cc8 <_free_r>
 80078d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80078d4:	b111      	cbz	r1, 80078dc <_reclaim_reent+0x40>
 80078d6:	4620      	mov	r0, r4
 80078d8:	f000 f9f6 	bl	8007cc8 <_free_r>
 80078dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80078de:	b111      	cbz	r1, 80078e6 <_reclaim_reent+0x4a>
 80078e0:	4620      	mov	r0, r4
 80078e2:	f000 f9f1 	bl	8007cc8 <_free_r>
 80078e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80078e8:	b111      	cbz	r1, 80078f0 <_reclaim_reent+0x54>
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 f9ec 	bl	8007cc8 <_free_r>
 80078f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80078f2:	b111      	cbz	r1, 80078fa <_reclaim_reent+0x5e>
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 f9e7 	bl	8007cc8 <_free_r>
 80078fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80078fc:	b111      	cbz	r1, 8007904 <_reclaim_reent+0x68>
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 f9e2 	bl	8007cc8 <_free_r>
 8007904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007906:	b111      	cbz	r1, 800790e <_reclaim_reent+0x72>
 8007908:	4620      	mov	r0, r4
 800790a:	f000 f9dd 	bl	8007cc8 <_free_r>
 800790e:	69a3      	ldr	r3, [r4, #24]
 8007910:	b1e3      	cbz	r3, 800794c <_reclaim_reent+0xb0>
 8007912:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007914:	4620      	mov	r0, r4
 8007916:	4798      	blx	r3
 8007918:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800791a:	b1b9      	cbz	r1, 800794c <_reclaim_reent+0xb0>
 800791c:	4620      	mov	r0, r4
 800791e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007922:	f7ff bfad 	b.w	8007880 <cleanup_glue>
 8007926:	5949      	ldr	r1, [r1, r5]
 8007928:	b941      	cbnz	r1, 800793c <_reclaim_reent+0xa0>
 800792a:	3504      	adds	r5, #4
 800792c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800792e:	2d80      	cmp	r5, #128	; 0x80
 8007930:	68d9      	ldr	r1, [r3, #12]
 8007932:	d1f8      	bne.n	8007926 <_reclaim_reent+0x8a>
 8007934:	4620      	mov	r0, r4
 8007936:	f000 f9c7 	bl	8007cc8 <_free_r>
 800793a:	e7ba      	b.n	80078b2 <_reclaim_reent+0x16>
 800793c:	680e      	ldr	r6, [r1, #0]
 800793e:	4620      	mov	r0, r4
 8007940:	f000 f9c2 	bl	8007cc8 <_free_r>
 8007944:	4631      	mov	r1, r6
 8007946:	e7ef      	b.n	8007928 <_reclaim_reent+0x8c>
 8007948:	2500      	movs	r5, #0
 800794a:	e7ef      	b.n	800792c <_reclaim_reent+0x90>
 800794c:	bd70      	pop	{r4, r5, r6, pc}
 800794e:	bf00      	nop
 8007950:	20000174 	.word	0x20000174

08007954 <_sbrk_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	4d06      	ldr	r5, [pc, #24]	; (8007970 <_sbrk_r+0x1c>)
 8007958:	2300      	movs	r3, #0
 800795a:	4604      	mov	r4, r0
 800795c:	4608      	mov	r0, r1
 800795e:	602b      	str	r3, [r5, #0]
 8007960:	f7f9 ffd6 	bl	8001910 <_sbrk>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d102      	bne.n	800796e <_sbrk_r+0x1a>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	b103      	cbz	r3, 800796e <_sbrk_r+0x1a>
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	200021c4 	.word	0x200021c4

08007974 <__sread>:
 8007974:	b510      	push	{r4, lr}
 8007976:	460c      	mov	r4, r1
 8007978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797c:	f000 fce2 	bl	8008344 <_read_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	bfab      	itete	ge
 8007984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007986:	89a3      	ldrhlt	r3, [r4, #12]
 8007988:	181b      	addge	r3, r3, r0
 800798a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800798e:	bfac      	ite	ge
 8007990:	6563      	strge	r3, [r4, #84]	; 0x54
 8007992:	81a3      	strhlt	r3, [r4, #12]
 8007994:	bd10      	pop	{r4, pc}

08007996 <__swrite>:
 8007996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799a:	461f      	mov	r7, r3
 800799c:	898b      	ldrh	r3, [r1, #12]
 800799e:	05db      	lsls	r3, r3, #23
 80079a0:	4605      	mov	r5, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	4616      	mov	r6, r2
 80079a6:	d505      	bpl.n	80079b4 <__swrite+0x1e>
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	2302      	movs	r3, #2
 80079ae:	2200      	movs	r2, #0
 80079b0:	f000 f964 	bl	8007c7c <_lseek_r>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	4632      	mov	r2, r6
 80079c2:	463b      	mov	r3, r7
 80079c4:	4628      	mov	r0, r5
 80079c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	f000 b831 	b.w	8007a30 <_write_r>

080079ce <__sseek>:
 80079ce:	b510      	push	{r4, lr}
 80079d0:	460c      	mov	r4, r1
 80079d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d6:	f000 f951 	bl	8007c7c <_lseek_r>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	bf15      	itete	ne
 80079e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80079e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ea:	81a3      	strheq	r3, [r4, #12]
 80079ec:	bf18      	it	ne
 80079ee:	81a3      	strhne	r3, [r4, #12]
 80079f0:	bd10      	pop	{r4, pc}

080079f2 <__sclose>:
 80079f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f6:	f000 b84b 	b.w	8007a90 <_close_r>
	...

080079fc <time>:
 80079fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079fe:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <time+0x30>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	4669      	mov	r1, sp
 8007a04:	4604      	mov	r4, r0
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	f000 f926 	bl	8007c58 <_gettimeofday_r>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	bfbe      	ittt	lt
 8007a10:	f04f 32ff 	movlt.w	r2, #4294967295
 8007a14:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a18:	e9cd 2300 	strdlt	r2, r3, [sp]
 8007a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a20:	b10c      	cbz	r4, 8007a26 <time+0x2a>
 8007a22:	e9c4 0100 	strd	r0, r1, [r4]
 8007a26:	b004      	add	sp, #16
 8007a28:	bd10      	pop	{r4, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20000174 	.word	0x20000174

08007a30 <_write_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d07      	ldr	r5, [pc, #28]	; (8007a50 <_write_r+0x20>)
 8007a34:	4604      	mov	r4, r0
 8007a36:	4608      	mov	r0, r1
 8007a38:	4611      	mov	r1, r2
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	602a      	str	r2, [r5, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f7f9 ff15 	bl	800186e <_write>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d102      	bne.n	8007a4e <_write_r+0x1e>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	b103      	cbz	r3, 8007a4e <_write_r+0x1e>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	200021c4 	.word	0x200021c4

08007a54 <__assert_func>:
 8007a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a56:	4614      	mov	r4, r2
 8007a58:	461a      	mov	r2, r3
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <__assert_func+0x2c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4605      	mov	r5, r0
 8007a60:	68d8      	ldr	r0, [r3, #12]
 8007a62:	b14c      	cbz	r4, 8007a78 <__assert_func+0x24>
 8007a64:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <__assert_func+0x30>)
 8007a66:	9100      	str	r1, [sp, #0]
 8007a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a6c:	4906      	ldr	r1, [pc, #24]	; (8007a88 <__assert_func+0x34>)
 8007a6e:	462b      	mov	r3, r5
 8007a70:	f000 f8e0 	bl	8007c34 <fiprintf>
 8007a74:	f000 fd38 	bl	80084e8 <abort>
 8007a78:	4b04      	ldr	r3, [pc, #16]	; (8007a8c <__assert_func+0x38>)
 8007a7a:	461c      	mov	r4, r3
 8007a7c:	e7f3      	b.n	8007a66 <__assert_func+0x12>
 8007a7e:	bf00      	nop
 8007a80:	20000174 	.word	0x20000174
 8007a84:	08008896 	.word	0x08008896
 8007a88:	080088a3 	.word	0x080088a3
 8007a8c:	080088d1 	.word	0x080088d1

08007a90 <_close_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d06      	ldr	r5, [pc, #24]	; (8007aac <_close_r+0x1c>)
 8007a94:	2300      	movs	r3, #0
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7f9 ff03 	bl	80018a6 <_close>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_close_r+0x1a>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_close_r+0x1a>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	200021c4 	.word	0x200021c4

08007ab0 <__sflush_r>:
 8007ab0:	898a      	ldrh	r2, [r1, #12]
 8007ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	0710      	lsls	r0, r2, #28
 8007aba:	460c      	mov	r4, r1
 8007abc:	d458      	bmi.n	8007b70 <__sflush_r+0xc0>
 8007abe:	684b      	ldr	r3, [r1, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	dc05      	bgt.n	8007ad0 <__sflush_r+0x20>
 8007ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	dc02      	bgt.n	8007ad0 <__sflush_r+0x20>
 8007aca:	2000      	movs	r0, #0
 8007acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ad2:	2e00      	cmp	r6, #0
 8007ad4:	d0f9      	beq.n	8007aca <__sflush_r+0x1a>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007adc:	682f      	ldr	r7, [r5, #0]
 8007ade:	602b      	str	r3, [r5, #0]
 8007ae0:	d032      	beq.n	8007b48 <__sflush_r+0x98>
 8007ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	075a      	lsls	r2, r3, #29
 8007ae8:	d505      	bpl.n	8007af6 <__sflush_r+0x46>
 8007aea:	6863      	ldr	r3, [r4, #4]
 8007aec:	1ac0      	subs	r0, r0, r3
 8007aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007af0:	b10b      	cbz	r3, 8007af6 <__sflush_r+0x46>
 8007af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007af4:	1ac0      	subs	r0, r0, r3
 8007af6:	2300      	movs	r3, #0
 8007af8:	4602      	mov	r2, r0
 8007afa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007afc:	6a21      	ldr	r1, [r4, #32]
 8007afe:	4628      	mov	r0, r5
 8007b00:	47b0      	blx	r6
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	d106      	bne.n	8007b16 <__sflush_r+0x66>
 8007b08:	6829      	ldr	r1, [r5, #0]
 8007b0a:	291d      	cmp	r1, #29
 8007b0c:	d82c      	bhi.n	8007b68 <__sflush_r+0xb8>
 8007b0e:	4a2a      	ldr	r2, [pc, #168]	; (8007bb8 <__sflush_r+0x108>)
 8007b10:	40ca      	lsrs	r2, r1
 8007b12:	07d6      	lsls	r6, r2, #31
 8007b14:	d528      	bpl.n	8007b68 <__sflush_r+0xb8>
 8007b16:	2200      	movs	r2, #0
 8007b18:	6062      	str	r2, [r4, #4]
 8007b1a:	04d9      	lsls	r1, r3, #19
 8007b1c:	6922      	ldr	r2, [r4, #16]
 8007b1e:	6022      	str	r2, [r4, #0]
 8007b20:	d504      	bpl.n	8007b2c <__sflush_r+0x7c>
 8007b22:	1c42      	adds	r2, r0, #1
 8007b24:	d101      	bne.n	8007b2a <__sflush_r+0x7a>
 8007b26:	682b      	ldr	r3, [r5, #0]
 8007b28:	b903      	cbnz	r3, 8007b2c <__sflush_r+0x7c>
 8007b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b2e:	602f      	str	r7, [r5, #0]
 8007b30:	2900      	cmp	r1, #0
 8007b32:	d0ca      	beq.n	8007aca <__sflush_r+0x1a>
 8007b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	d002      	beq.n	8007b42 <__sflush_r+0x92>
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f000 f8c3 	bl	8007cc8 <_free_r>
 8007b42:	2000      	movs	r0, #0
 8007b44:	6360      	str	r0, [r4, #52]	; 0x34
 8007b46:	e7c1      	b.n	8007acc <__sflush_r+0x1c>
 8007b48:	6a21      	ldr	r1, [r4, #32]
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	47b0      	blx	r6
 8007b50:	1c41      	adds	r1, r0, #1
 8007b52:	d1c7      	bne.n	8007ae4 <__sflush_r+0x34>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0c4      	beq.n	8007ae4 <__sflush_r+0x34>
 8007b5a:	2b1d      	cmp	r3, #29
 8007b5c:	d001      	beq.n	8007b62 <__sflush_r+0xb2>
 8007b5e:	2b16      	cmp	r3, #22
 8007b60:	d101      	bne.n	8007b66 <__sflush_r+0xb6>
 8007b62:	602f      	str	r7, [r5, #0]
 8007b64:	e7b1      	b.n	8007aca <__sflush_r+0x1a>
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b6c:	81a3      	strh	r3, [r4, #12]
 8007b6e:	e7ad      	b.n	8007acc <__sflush_r+0x1c>
 8007b70:	690f      	ldr	r7, [r1, #16]
 8007b72:	2f00      	cmp	r7, #0
 8007b74:	d0a9      	beq.n	8007aca <__sflush_r+0x1a>
 8007b76:	0793      	lsls	r3, r2, #30
 8007b78:	680e      	ldr	r6, [r1, #0]
 8007b7a:	bf08      	it	eq
 8007b7c:	694b      	ldreq	r3, [r1, #20]
 8007b7e:	600f      	str	r7, [r1, #0]
 8007b80:	bf18      	it	ne
 8007b82:	2300      	movne	r3, #0
 8007b84:	eba6 0807 	sub.w	r8, r6, r7
 8007b88:	608b      	str	r3, [r1, #8]
 8007b8a:	f1b8 0f00 	cmp.w	r8, #0
 8007b8e:	dd9c      	ble.n	8007aca <__sflush_r+0x1a>
 8007b90:	6a21      	ldr	r1, [r4, #32]
 8007b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b94:	4643      	mov	r3, r8
 8007b96:	463a      	mov	r2, r7
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b0      	blx	r6
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	dc06      	bgt.n	8007bae <__sflush_r+0xfe>
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	e78e      	b.n	8007acc <__sflush_r+0x1c>
 8007bae:	4407      	add	r7, r0
 8007bb0:	eba8 0800 	sub.w	r8, r8, r0
 8007bb4:	e7e9      	b.n	8007b8a <__sflush_r+0xda>
 8007bb6:	bf00      	nop
 8007bb8:	20400001 	.word	0x20400001

08007bbc <_fflush_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	690b      	ldr	r3, [r1, #16]
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	b913      	cbnz	r3, 8007bcc <_fflush_r+0x10>
 8007bc6:	2500      	movs	r5, #0
 8007bc8:	4628      	mov	r0, r5
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	b118      	cbz	r0, 8007bd6 <_fflush_r+0x1a>
 8007bce:	6983      	ldr	r3, [r0, #24]
 8007bd0:	b90b      	cbnz	r3, 8007bd6 <_fflush_r+0x1a>
 8007bd2:	f7ff fcb1 	bl	8007538 <__sinit>
 8007bd6:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <_fflush_r+0x6c>)
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	d11b      	bne.n	8007c14 <_fflush_r+0x58>
 8007bdc:	686c      	ldr	r4, [r5, #4]
 8007bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0ef      	beq.n	8007bc6 <_fflush_r+0xa>
 8007be6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007be8:	07d0      	lsls	r0, r2, #31
 8007bea:	d404      	bmi.n	8007bf6 <_fflush_r+0x3a>
 8007bec:	0599      	lsls	r1, r3, #22
 8007bee:	d402      	bmi.n	8007bf6 <_fflush_r+0x3a>
 8007bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bf2:	f7ff fd64 	bl	80076be <__retarget_lock_acquire_recursive>
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	f7ff ff59 	bl	8007ab0 <__sflush_r>
 8007bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c00:	07da      	lsls	r2, r3, #31
 8007c02:	4605      	mov	r5, r0
 8007c04:	d4e0      	bmi.n	8007bc8 <_fflush_r+0xc>
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	059b      	lsls	r3, r3, #22
 8007c0a:	d4dd      	bmi.n	8007bc8 <_fflush_r+0xc>
 8007c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c0e:	f7ff fd57 	bl	80076c0 <__retarget_lock_release_recursive>
 8007c12:	e7d9      	b.n	8007bc8 <_fflush_r+0xc>
 8007c14:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <_fflush_r+0x70>)
 8007c16:	429c      	cmp	r4, r3
 8007c18:	d101      	bne.n	8007c1e <_fflush_r+0x62>
 8007c1a:	68ac      	ldr	r4, [r5, #8]
 8007c1c:	e7df      	b.n	8007bde <_fflush_r+0x22>
 8007c1e:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <_fflush_r+0x74>)
 8007c20:	429c      	cmp	r4, r3
 8007c22:	bf08      	it	eq
 8007c24:	68ec      	ldreq	r4, [r5, #12]
 8007c26:	e7da      	b.n	8007bde <_fflush_r+0x22>
 8007c28:	080087dc 	.word	0x080087dc
 8007c2c:	080087fc 	.word	0x080087fc
 8007c30:	080087bc 	.word	0x080087bc

08007c34 <fiprintf>:
 8007c34:	b40e      	push	{r1, r2, r3}
 8007c36:	b503      	push	{r0, r1, lr}
 8007c38:	4601      	mov	r1, r0
 8007c3a:	ab03      	add	r3, sp, #12
 8007c3c:	4805      	ldr	r0, [pc, #20]	; (8007c54 <fiprintf+0x20>)
 8007c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c42:	6800      	ldr	r0, [r0, #0]
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	f000 f8b9 	bl	8007dbc <_vfiprintf_r>
 8007c4a:	b002      	add	sp, #8
 8007c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c50:	b003      	add	sp, #12
 8007c52:	4770      	bx	lr
 8007c54:	20000174 	.word	0x20000174

08007c58 <_gettimeofday_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d07      	ldr	r5, [pc, #28]	; (8007c78 <_gettimeofday_r+0x20>)
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	f000 fd11 	bl	800868c <_gettimeofday>
 8007c6a:	1c43      	adds	r3, r0, #1
 8007c6c:	d102      	bne.n	8007c74 <_gettimeofday_r+0x1c>
 8007c6e:	682b      	ldr	r3, [r5, #0]
 8007c70:	b103      	cbz	r3, 8007c74 <_gettimeofday_r+0x1c>
 8007c72:	6023      	str	r3, [r4, #0]
 8007c74:	bd38      	pop	{r3, r4, r5, pc}
 8007c76:	bf00      	nop
 8007c78:	200021c4 	.word	0x200021c4

08007c7c <_lseek_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d07      	ldr	r5, [pc, #28]	; (8007c9c <_lseek_r+0x20>)
 8007c80:	4604      	mov	r4, r0
 8007c82:	4608      	mov	r0, r1
 8007c84:	4611      	mov	r1, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	602a      	str	r2, [r5, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	f7f9 fe32 	bl	80018f4 <_lseek>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_lseek_r+0x1e>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_lseek_r+0x1e>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	200021c4 	.word	0x200021c4

08007ca0 <malloc>:
 8007ca0:	4b02      	ldr	r3, [pc, #8]	; (8007cac <malloc+0xc>)
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	6818      	ldr	r0, [r3, #0]
 8007ca6:	f7ff bd23 	b.w	80076f0 <_malloc_r>
 8007caa:	bf00      	nop
 8007cac:	20000174 	.word	0x20000174

08007cb0 <__malloc_lock>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	; (8007cb8 <__malloc_lock+0x8>)
 8007cb2:	f7ff bd04 	b.w	80076be <__retarget_lock_acquire_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	200021bc 	.word	0x200021bc

08007cbc <__malloc_unlock>:
 8007cbc:	4801      	ldr	r0, [pc, #4]	; (8007cc4 <__malloc_unlock+0x8>)
 8007cbe:	f7ff bcff 	b.w	80076c0 <__retarget_lock_release_recursive>
 8007cc2:	bf00      	nop
 8007cc4:	200021bc 	.word	0x200021bc

08007cc8 <_free_r>:
 8007cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cca:	2900      	cmp	r1, #0
 8007ccc:	d048      	beq.n	8007d60 <_free_r+0x98>
 8007cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cd2:	9001      	str	r0, [sp, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f1a1 0404 	sub.w	r4, r1, #4
 8007cda:	bfb8      	it	lt
 8007cdc:	18e4      	addlt	r4, r4, r3
 8007cde:	f7ff ffe7 	bl	8007cb0 <__malloc_lock>
 8007ce2:	4a20      	ldr	r2, [pc, #128]	; (8007d64 <_free_r+0x9c>)
 8007ce4:	9801      	ldr	r0, [sp, #4]
 8007ce6:	6813      	ldr	r3, [r2, #0]
 8007ce8:	4615      	mov	r5, r2
 8007cea:	b933      	cbnz	r3, 8007cfa <_free_r+0x32>
 8007cec:	6063      	str	r3, [r4, #4]
 8007cee:	6014      	str	r4, [r2, #0]
 8007cf0:	b003      	add	sp, #12
 8007cf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cf6:	f7ff bfe1 	b.w	8007cbc <__malloc_unlock>
 8007cfa:	42a3      	cmp	r3, r4
 8007cfc:	d90b      	bls.n	8007d16 <_free_r+0x4e>
 8007cfe:	6821      	ldr	r1, [r4, #0]
 8007d00:	1862      	adds	r2, r4, r1
 8007d02:	4293      	cmp	r3, r2
 8007d04:	bf04      	itt	eq
 8007d06:	681a      	ldreq	r2, [r3, #0]
 8007d08:	685b      	ldreq	r3, [r3, #4]
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	bf04      	itt	eq
 8007d0e:	1852      	addeq	r2, r2, r1
 8007d10:	6022      	streq	r2, [r4, #0]
 8007d12:	602c      	str	r4, [r5, #0]
 8007d14:	e7ec      	b.n	8007cf0 <_free_r+0x28>
 8007d16:	461a      	mov	r2, r3
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	b10b      	cbz	r3, 8007d20 <_free_r+0x58>
 8007d1c:	42a3      	cmp	r3, r4
 8007d1e:	d9fa      	bls.n	8007d16 <_free_r+0x4e>
 8007d20:	6811      	ldr	r1, [r2, #0]
 8007d22:	1855      	adds	r5, r2, r1
 8007d24:	42a5      	cmp	r5, r4
 8007d26:	d10b      	bne.n	8007d40 <_free_r+0x78>
 8007d28:	6824      	ldr	r4, [r4, #0]
 8007d2a:	4421      	add	r1, r4
 8007d2c:	1854      	adds	r4, r2, r1
 8007d2e:	42a3      	cmp	r3, r4
 8007d30:	6011      	str	r1, [r2, #0]
 8007d32:	d1dd      	bne.n	8007cf0 <_free_r+0x28>
 8007d34:	681c      	ldr	r4, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	6053      	str	r3, [r2, #4]
 8007d3a:	4421      	add	r1, r4
 8007d3c:	6011      	str	r1, [r2, #0]
 8007d3e:	e7d7      	b.n	8007cf0 <_free_r+0x28>
 8007d40:	d902      	bls.n	8007d48 <_free_r+0x80>
 8007d42:	230c      	movs	r3, #12
 8007d44:	6003      	str	r3, [r0, #0]
 8007d46:	e7d3      	b.n	8007cf0 <_free_r+0x28>
 8007d48:	6825      	ldr	r5, [r4, #0]
 8007d4a:	1961      	adds	r1, r4, r5
 8007d4c:	428b      	cmp	r3, r1
 8007d4e:	bf04      	itt	eq
 8007d50:	6819      	ldreq	r1, [r3, #0]
 8007d52:	685b      	ldreq	r3, [r3, #4]
 8007d54:	6063      	str	r3, [r4, #4]
 8007d56:	bf04      	itt	eq
 8007d58:	1949      	addeq	r1, r1, r5
 8007d5a:	6021      	streq	r1, [r4, #0]
 8007d5c:	6054      	str	r4, [r2, #4]
 8007d5e:	e7c7      	b.n	8007cf0 <_free_r+0x28>
 8007d60:	b003      	add	sp, #12
 8007d62:	bd30      	pop	{r4, r5, pc}
 8007d64:	20001d10 	.word	0x20001d10

08007d68 <__sfputc_r>:
 8007d68:	6893      	ldr	r3, [r2, #8]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	b410      	push	{r4}
 8007d70:	6093      	str	r3, [r2, #8]
 8007d72:	da08      	bge.n	8007d86 <__sfputc_r+0x1e>
 8007d74:	6994      	ldr	r4, [r2, #24]
 8007d76:	42a3      	cmp	r3, r4
 8007d78:	db01      	blt.n	8007d7e <__sfputc_r+0x16>
 8007d7a:	290a      	cmp	r1, #10
 8007d7c:	d103      	bne.n	8007d86 <__sfputc_r+0x1e>
 8007d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d82:	f000 baf1 	b.w	8008368 <__swbuf_r>
 8007d86:	6813      	ldr	r3, [r2, #0]
 8007d88:	1c58      	adds	r0, r3, #1
 8007d8a:	6010      	str	r0, [r2, #0]
 8007d8c:	7019      	strb	r1, [r3, #0]
 8007d8e:	4608      	mov	r0, r1
 8007d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <__sfputs_r>:
 8007d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d98:	4606      	mov	r6, r0
 8007d9a:	460f      	mov	r7, r1
 8007d9c:	4614      	mov	r4, r2
 8007d9e:	18d5      	adds	r5, r2, r3
 8007da0:	42ac      	cmp	r4, r5
 8007da2:	d101      	bne.n	8007da8 <__sfputs_r+0x12>
 8007da4:	2000      	movs	r0, #0
 8007da6:	e007      	b.n	8007db8 <__sfputs_r+0x22>
 8007da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dac:	463a      	mov	r2, r7
 8007dae:	4630      	mov	r0, r6
 8007db0:	f7ff ffda 	bl	8007d68 <__sfputc_r>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d1f3      	bne.n	8007da0 <__sfputs_r+0xa>
 8007db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dbc <_vfiprintf_r>:
 8007dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	b09d      	sub	sp, #116	; 0x74
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	4698      	mov	r8, r3
 8007dc8:	4606      	mov	r6, r0
 8007dca:	b118      	cbz	r0, 8007dd4 <_vfiprintf_r+0x18>
 8007dcc:	6983      	ldr	r3, [r0, #24]
 8007dce:	b90b      	cbnz	r3, 8007dd4 <_vfiprintf_r+0x18>
 8007dd0:	f7ff fbb2 	bl	8007538 <__sinit>
 8007dd4:	4b89      	ldr	r3, [pc, #548]	; (8007ffc <_vfiprintf_r+0x240>)
 8007dd6:	429d      	cmp	r5, r3
 8007dd8:	d11b      	bne.n	8007e12 <_vfiprintf_r+0x56>
 8007dda:	6875      	ldr	r5, [r6, #4]
 8007ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dde:	07d9      	lsls	r1, r3, #31
 8007de0:	d405      	bmi.n	8007dee <_vfiprintf_r+0x32>
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	059a      	lsls	r2, r3, #22
 8007de6:	d402      	bmi.n	8007dee <_vfiprintf_r+0x32>
 8007de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dea:	f7ff fc68 	bl	80076be <__retarget_lock_acquire_recursive>
 8007dee:	89ab      	ldrh	r3, [r5, #12]
 8007df0:	071b      	lsls	r3, r3, #28
 8007df2:	d501      	bpl.n	8007df8 <_vfiprintf_r+0x3c>
 8007df4:	692b      	ldr	r3, [r5, #16]
 8007df6:	b9eb      	cbnz	r3, 8007e34 <_vfiprintf_r+0x78>
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 fb06 	bl	800840c <__swsetup_r>
 8007e00:	b1c0      	cbz	r0, 8007e34 <_vfiprintf_r+0x78>
 8007e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e04:	07dc      	lsls	r4, r3, #31
 8007e06:	d50e      	bpl.n	8007e26 <_vfiprintf_r+0x6a>
 8007e08:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0c:	b01d      	add	sp, #116	; 0x74
 8007e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e12:	4b7b      	ldr	r3, [pc, #492]	; (8008000 <_vfiprintf_r+0x244>)
 8007e14:	429d      	cmp	r5, r3
 8007e16:	d101      	bne.n	8007e1c <_vfiprintf_r+0x60>
 8007e18:	68b5      	ldr	r5, [r6, #8]
 8007e1a:	e7df      	b.n	8007ddc <_vfiprintf_r+0x20>
 8007e1c:	4b79      	ldr	r3, [pc, #484]	; (8008004 <_vfiprintf_r+0x248>)
 8007e1e:	429d      	cmp	r5, r3
 8007e20:	bf08      	it	eq
 8007e22:	68f5      	ldreq	r5, [r6, #12]
 8007e24:	e7da      	b.n	8007ddc <_vfiprintf_r+0x20>
 8007e26:	89ab      	ldrh	r3, [r5, #12]
 8007e28:	0598      	lsls	r0, r3, #22
 8007e2a:	d4ed      	bmi.n	8007e08 <_vfiprintf_r+0x4c>
 8007e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e2e:	f7ff fc47 	bl	80076c0 <__retarget_lock_release_recursive>
 8007e32:	e7e9      	b.n	8007e08 <_vfiprintf_r+0x4c>
 8007e34:	2300      	movs	r3, #0
 8007e36:	9309      	str	r3, [sp, #36]	; 0x24
 8007e38:	2320      	movs	r3, #32
 8007e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e42:	2330      	movs	r3, #48	; 0x30
 8007e44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008008 <_vfiprintf_r+0x24c>
 8007e48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e4c:	f04f 0901 	mov.w	r9, #1
 8007e50:	4623      	mov	r3, r4
 8007e52:	469a      	mov	sl, r3
 8007e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e58:	b10a      	cbz	r2, 8007e5e <_vfiprintf_r+0xa2>
 8007e5a:	2a25      	cmp	r2, #37	; 0x25
 8007e5c:	d1f9      	bne.n	8007e52 <_vfiprintf_r+0x96>
 8007e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e62:	d00b      	beq.n	8007e7c <_vfiprintf_r+0xc0>
 8007e64:	465b      	mov	r3, fp
 8007e66:	4622      	mov	r2, r4
 8007e68:	4629      	mov	r1, r5
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7ff ff93 	bl	8007d96 <__sfputs_r>
 8007e70:	3001      	adds	r0, #1
 8007e72:	f000 80aa 	beq.w	8007fca <_vfiprintf_r+0x20e>
 8007e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e78:	445a      	add	r2, fp
 8007e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 80a2 	beq.w	8007fca <_vfiprintf_r+0x20e>
 8007e86:	2300      	movs	r3, #0
 8007e88:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e90:	f10a 0a01 	add.w	sl, sl, #1
 8007e94:	9304      	str	r3, [sp, #16]
 8007e96:	9307      	str	r3, [sp, #28]
 8007e98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e9e:	4654      	mov	r4, sl
 8007ea0:	2205      	movs	r2, #5
 8007ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea6:	4858      	ldr	r0, [pc, #352]	; (8008008 <_vfiprintf_r+0x24c>)
 8007ea8:	f7f8 f992 	bl	80001d0 <memchr>
 8007eac:	9a04      	ldr	r2, [sp, #16]
 8007eae:	b9d8      	cbnz	r0, 8007ee8 <_vfiprintf_r+0x12c>
 8007eb0:	06d1      	lsls	r1, r2, #27
 8007eb2:	bf44      	itt	mi
 8007eb4:	2320      	movmi	r3, #32
 8007eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eba:	0713      	lsls	r3, r2, #28
 8007ebc:	bf44      	itt	mi
 8007ebe:	232b      	movmi	r3, #43	; 0x2b
 8007ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eca:	d015      	beq.n	8007ef8 <_vfiprintf_r+0x13c>
 8007ecc:	9a07      	ldr	r2, [sp, #28]
 8007ece:	4654      	mov	r4, sl
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	f04f 0c0a 	mov.w	ip, #10
 8007ed6:	4621      	mov	r1, r4
 8007ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007edc:	3b30      	subs	r3, #48	; 0x30
 8007ede:	2b09      	cmp	r3, #9
 8007ee0:	d94e      	bls.n	8007f80 <_vfiprintf_r+0x1c4>
 8007ee2:	b1b0      	cbz	r0, 8007f12 <_vfiprintf_r+0x156>
 8007ee4:	9207      	str	r2, [sp, #28]
 8007ee6:	e014      	b.n	8007f12 <_vfiprintf_r+0x156>
 8007ee8:	eba0 0308 	sub.w	r3, r0, r8
 8007eec:	fa09 f303 	lsl.w	r3, r9, r3
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	46a2      	mov	sl, r4
 8007ef6:	e7d2      	b.n	8007e9e <_vfiprintf_r+0xe2>
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	1d19      	adds	r1, r3, #4
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	9103      	str	r1, [sp, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bfbb      	ittet	lt
 8007f04:	425b      	neglt	r3, r3
 8007f06:	f042 0202 	orrlt.w	r2, r2, #2
 8007f0a:	9307      	strge	r3, [sp, #28]
 8007f0c:	9307      	strlt	r3, [sp, #28]
 8007f0e:	bfb8      	it	lt
 8007f10:	9204      	strlt	r2, [sp, #16]
 8007f12:	7823      	ldrb	r3, [r4, #0]
 8007f14:	2b2e      	cmp	r3, #46	; 0x2e
 8007f16:	d10c      	bne.n	8007f32 <_vfiprintf_r+0x176>
 8007f18:	7863      	ldrb	r3, [r4, #1]
 8007f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f1c:	d135      	bne.n	8007f8a <_vfiprintf_r+0x1ce>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	1d1a      	adds	r2, r3, #4
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	9203      	str	r2, [sp, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfb8      	it	lt
 8007f2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f2e:	3402      	adds	r4, #2
 8007f30:	9305      	str	r3, [sp, #20]
 8007f32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008018 <_vfiprintf_r+0x25c>
 8007f36:	7821      	ldrb	r1, [r4, #0]
 8007f38:	2203      	movs	r2, #3
 8007f3a:	4650      	mov	r0, sl
 8007f3c:	f7f8 f948 	bl	80001d0 <memchr>
 8007f40:	b140      	cbz	r0, 8007f54 <_vfiprintf_r+0x198>
 8007f42:	2340      	movs	r3, #64	; 0x40
 8007f44:	eba0 000a 	sub.w	r0, r0, sl
 8007f48:	fa03 f000 	lsl.w	r0, r3, r0
 8007f4c:	9b04      	ldr	r3, [sp, #16]
 8007f4e:	4303      	orrs	r3, r0
 8007f50:	3401      	adds	r4, #1
 8007f52:	9304      	str	r3, [sp, #16]
 8007f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f58:	482c      	ldr	r0, [pc, #176]	; (800800c <_vfiprintf_r+0x250>)
 8007f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f5e:	2206      	movs	r2, #6
 8007f60:	f7f8 f936 	bl	80001d0 <memchr>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d03f      	beq.n	8007fe8 <_vfiprintf_r+0x22c>
 8007f68:	4b29      	ldr	r3, [pc, #164]	; (8008010 <_vfiprintf_r+0x254>)
 8007f6a:	bb1b      	cbnz	r3, 8007fb4 <_vfiprintf_r+0x1f8>
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	3307      	adds	r3, #7
 8007f70:	f023 0307 	bic.w	r3, r3, #7
 8007f74:	3308      	adds	r3, #8
 8007f76:	9303      	str	r3, [sp, #12]
 8007f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7a:	443b      	add	r3, r7
 8007f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f7e:	e767      	b.n	8007e50 <_vfiprintf_r+0x94>
 8007f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f84:	460c      	mov	r4, r1
 8007f86:	2001      	movs	r0, #1
 8007f88:	e7a5      	b.n	8007ed6 <_vfiprintf_r+0x11a>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	3401      	adds	r4, #1
 8007f8e:	9305      	str	r3, [sp, #20]
 8007f90:	4619      	mov	r1, r3
 8007f92:	f04f 0c0a 	mov.w	ip, #10
 8007f96:	4620      	mov	r0, r4
 8007f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f9c:	3a30      	subs	r2, #48	; 0x30
 8007f9e:	2a09      	cmp	r2, #9
 8007fa0:	d903      	bls.n	8007faa <_vfiprintf_r+0x1ee>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0c5      	beq.n	8007f32 <_vfiprintf_r+0x176>
 8007fa6:	9105      	str	r1, [sp, #20]
 8007fa8:	e7c3      	b.n	8007f32 <_vfiprintf_r+0x176>
 8007faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fae:	4604      	mov	r4, r0
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e7f0      	b.n	8007f96 <_vfiprintf_r+0x1da>
 8007fb4:	ab03      	add	r3, sp, #12
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	462a      	mov	r2, r5
 8007fba:	4b16      	ldr	r3, [pc, #88]	; (8008014 <_vfiprintf_r+0x258>)
 8007fbc:	a904      	add	r1, sp, #16
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f3af 8000 	nop.w
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	1c78      	adds	r0, r7, #1
 8007fc8:	d1d6      	bne.n	8007f78 <_vfiprintf_r+0x1bc>
 8007fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fcc:	07d9      	lsls	r1, r3, #31
 8007fce:	d405      	bmi.n	8007fdc <_vfiprintf_r+0x220>
 8007fd0:	89ab      	ldrh	r3, [r5, #12]
 8007fd2:	059a      	lsls	r2, r3, #22
 8007fd4:	d402      	bmi.n	8007fdc <_vfiprintf_r+0x220>
 8007fd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fd8:	f7ff fb72 	bl	80076c0 <__retarget_lock_release_recursive>
 8007fdc:	89ab      	ldrh	r3, [r5, #12]
 8007fde:	065b      	lsls	r3, r3, #25
 8007fe0:	f53f af12 	bmi.w	8007e08 <_vfiprintf_r+0x4c>
 8007fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fe6:	e711      	b.n	8007e0c <_vfiprintf_r+0x50>
 8007fe8:	ab03      	add	r3, sp, #12
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	462a      	mov	r2, r5
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <_vfiprintf_r+0x258>)
 8007ff0:	a904      	add	r1, sp, #16
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f000 f880 	bl	80080f8 <_printf_i>
 8007ff8:	e7e4      	b.n	8007fc4 <_vfiprintf_r+0x208>
 8007ffa:	bf00      	nop
 8007ffc:	080087dc 	.word	0x080087dc
 8008000:	080087fc 	.word	0x080087fc
 8008004:	080087bc 	.word	0x080087bc
 8008008:	080088d2 	.word	0x080088d2
 800800c:	080088dc 	.word	0x080088dc
 8008010:	00000000 	.word	0x00000000
 8008014:	08007d97 	.word	0x08007d97
 8008018:	080088d8 	.word	0x080088d8

0800801c <_printf_common>:
 800801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	4616      	mov	r6, r2
 8008022:	4699      	mov	r9, r3
 8008024:	688a      	ldr	r2, [r1, #8]
 8008026:	690b      	ldr	r3, [r1, #16]
 8008028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800802c:	4293      	cmp	r3, r2
 800802e:	bfb8      	it	lt
 8008030:	4613      	movlt	r3, r2
 8008032:	6033      	str	r3, [r6, #0]
 8008034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008038:	4607      	mov	r7, r0
 800803a:	460c      	mov	r4, r1
 800803c:	b10a      	cbz	r2, 8008042 <_printf_common+0x26>
 800803e:	3301      	adds	r3, #1
 8008040:	6033      	str	r3, [r6, #0]
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	0699      	lsls	r1, r3, #26
 8008046:	bf42      	ittt	mi
 8008048:	6833      	ldrmi	r3, [r6, #0]
 800804a:	3302      	addmi	r3, #2
 800804c:	6033      	strmi	r3, [r6, #0]
 800804e:	6825      	ldr	r5, [r4, #0]
 8008050:	f015 0506 	ands.w	r5, r5, #6
 8008054:	d106      	bne.n	8008064 <_printf_common+0x48>
 8008056:	f104 0a19 	add.w	sl, r4, #25
 800805a:	68e3      	ldr	r3, [r4, #12]
 800805c:	6832      	ldr	r2, [r6, #0]
 800805e:	1a9b      	subs	r3, r3, r2
 8008060:	42ab      	cmp	r3, r5
 8008062:	dc26      	bgt.n	80080b2 <_printf_common+0x96>
 8008064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008068:	1e13      	subs	r3, r2, #0
 800806a:	6822      	ldr	r2, [r4, #0]
 800806c:	bf18      	it	ne
 800806e:	2301      	movne	r3, #1
 8008070:	0692      	lsls	r2, r2, #26
 8008072:	d42b      	bmi.n	80080cc <_printf_common+0xb0>
 8008074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008078:	4649      	mov	r1, r9
 800807a:	4638      	mov	r0, r7
 800807c:	47c0      	blx	r8
 800807e:	3001      	adds	r0, #1
 8008080:	d01e      	beq.n	80080c0 <_printf_common+0xa4>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	68e5      	ldr	r5, [r4, #12]
 8008086:	6832      	ldr	r2, [r6, #0]
 8008088:	f003 0306 	and.w	r3, r3, #6
 800808c:	2b04      	cmp	r3, #4
 800808e:	bf08      	it	eq
 8008090:	1aad      	subeq	r5, r5, r2
 8008092:	68a3      	ldr	r3, [r4, #8]
 8008094:	6922      	ldr	r2, [r4, #16]
 8008096:	bf0c      	ite	eq
 8008098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800809c:	2500      	movne	r5, #0
 800809e:	4293      	cmp	r3, r2
 80080a0:	bfc4      	itt	gt
 80080a2:	1a9b      	subgt	r3, r3, r2
 80080a4:	18ed      	addgt	r5, r5, r3
 80080a6:	2600      	movs	r6, #0
 80080a8:	341a      	adds	r4, #26
 80080aa:	42b5      	cmp	r5, r6
 80080ac:	d11a      	bne.n	80080e4 <_printf_common+0xc8>
 80080ae:	2000      	movs	r0, #0
 80080b0:	e008      	b.n	80080c4 <_printf_common+0xa8>
 80080b2:	2301      	movs	r3, #1
 80080b4:	4652      	mov	r2, sl
 80080b6:	4649      	mov	r1, r9
 80080b8:	4638      	mov	r0, r7
 80080ba:	47c0      	blx	r8
 80080bc:	3001      	adds	r0, #1
 80080be:	d103      	bne.n	80080c8 <_printf_common+0xac>
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c8:	3501      	adds	r5, #1
 80080ca:	e7c6      	b.n	800805a <_printf_common+0x3e>
 80080cc:	18e1      	adds	r1, r4, r3
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	2030      	movs	r0, #48	; 0x30
 80080d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080d6:	4422      	add	r2, r4
 80080d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080e0:	3302      	adds	r3, #2
 80080e2:	e7c7      	b.n	8008074 <_printf_common+0x58>
 80080e4:	2301      	movs	r3, #1
 80080e6:	4622      	mov	r2, r4
 80080e8:	4649      	mov	r1, r9
 80080ea:	4638      	mov	r0, r7
 80080ec:	47c0      	blx	r8
 80080ee:	3001      	adds	r0, #1
 80080f0:	d0e6      	beq.n	80080c0 <_printf_common+0xa4>
 80080f2:	3601      	adds	r6, #1
 80080f4:	e7d9      	b.n	80080aa <_printf_common+0x8e>
	...

080080f8 <_printf_i>:
 80080f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080fc:	460c      	mov	r4, r1
 80080fe:	4691      	mov	r9, r2
 8008100:	7e27      	ldrb	r7, [r4, #24]
 8008102:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008104:	2f78      	cmp	r7, #120	; 0x78
 8008106:	4680      	mov	r8, r0
 8008108:	469a      	mov	sl, r3
 800810a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800810e:	d807      	bhi.n	8008120 <_printf_i+0x28>
 8008110:	2f62      	cmp	r7, #98	; 0x62
 8008112:	d80a      	bhi.n	800812a <_printf_i+0x32>
 8008114:	2f00      	cmp	r7, #0
 8008116:	f000 80d8 	beq.w	80082ca <_printf_i+0x1d2>
 800811a:	2f58      	cmp	r7, #88	; 0x58
 800811c:	f000 80a3 	beq.w	8008266 <_printf_i+0x16e>
 8008120:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008128:	e03a      	b.n	80081a0 <_printf_i+0xa8>
 800812a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800812e:	2b15      	cmp	r3, #21
 8008130:	d8f6      	bhi.n	8008120 <_printf_i+0x28>
 8008132:	a001      	add	r0, pc, #4	; (adr r0, 8008138 <_printf_i+0x40>)
 8008134:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008138:	08008191 	.word	0x08008191
 800813c:	080081a5 	.word	0x080081a5
 8008140:	08008121 	.word	0x08008121
 8008144:	08008121 	.word	0x08008121
 8008148:	08008121 	.word	0x08008121
 800814c:	08008121 	.word	0x08008121
 8008150:	080081a5 	.word	0x080081a5
 8008154:	08008121 	.word	0x08008121
 8008158:	08008121 	.word	0x08008121
 800815c:	08008121 	.word	0x08008121
 8008160:	08008121 	.word	0x08008121
 8008164:	080082b1 	.word	0x080082b1
 8008168:	080081d5 	.word	0x080081d5
 800816c:	08008293 	.word	0x08008293
 8008170:	08008121 	.word	0x08008121
 8008174:	08008121 	.word	0x08008121
 8008178:	080082d3 	.word	0x080082d3
 800817c:	08008121 	.word	0x08008121
 8008180:	080081d5 	.word	0x080081d5
 8008184:	08008121 	.word	0x08008121
 8008188:	08008121 	.word	0x08008121
 800818c:	0800829b 	.word	0x0800829b
 8008190:	680b      	ldr	r3, [r1, #0]
 8008192:	1d1a      	adds	r2, r3, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	600a      	str	r2, [r1, #0]
 8008198:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800819c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0a3      	b.n	80082ec <_printf_i+0x1f4>
 80081a4:	6825      	ldr	r5, [r4, #0]
 80081a6:	6808      	ldr	r0, [r1, #0]
 80081a8:	062e      	lsls	r6, r5, #24
 80081aa:	f100 0304 	add.w	r3, r0, #4
 80081ae:	d50a      	bpl.n	80081c6 <_printf_i+0xce>
 80081b0:	6805      	ldr	r5, [r0, #0]
 80081b2:	600b      	str	r3, [r1, #0]
 80081b4:	2d00      	cmp	r5, #0
 80081b6:	da03      	bge.n	80081c0 <_printf_i+0xc8>
 80081b8:	232d      	movs	r3, #45	; 0x2d
 80081ba:	426d      	negs	r5, r5
 80081bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c0:	485e      	ldr	r0, [pc, #376]	; (800833c <_printf_i+0x244>)
 80081c2:	230a      	movs	r3, #10
 80081c4:	e019      	b.n	80081fa <_printf_i+0x102>
 80081c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081ca:	6805      	ldr	r5, [r0, #0]
 80081cc:	600b      	str	r3, [r1, #0]
 80081ce:	bf18      	it	ne
 80081d0:	b22d      	sxthne	r5, r5
 80081d2:	e7ef      	b.n	80081b4 <_printf_i+0xbc>
 80081d4:	680b      	ldr	r3, [r1, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	1d18      	adds	r0, r3, #4
 80081da:	6008      	str	r0, [r1, #0]
 80081dc:	0628      	lsls	r0, r5, #24
 80081de:	d501      	bpl.n	80081e4 <_printf_i+0xec>
 80081e0:	681d      	ldr	r5, [r3, #0]
 80081e2:	e002      	b.n	80081ea <_printf_i+0xf2>
 80081e4:	0669      	lsls	r1, r5, #25
 80081e6:	d5fb      	bpl.n	80081e0 <_printf_i+0xe8>
 80081e8:	881d      	ldrh	r5, [r3, #0]
 80081ea:	4854      	ldr	r0, [pc, #336]	; (800833c <_printf_i+0x244>)
 80081ec:	2f6f      	cmp	r7, #111	; 0x6f
 80081ee:	bf0c      	ite	eq
 80081f0:	2308      	moveq	r3, #8
 80081f2:	230a      	movne	r3, #10
 80081f4:	2100      	movs	r1, #0
 80081f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081fa:	6866      	ldr	r6, [r4, #4]
 80081fc:	60a6      	str	r6, [r4, #8]
 80081fe:	2e00      	cmp	r6, #0
 8008200:	bfa2      	ittt	ge
 8008202:	6821      	ldrge	r1, [r4, #0]
 8008204:	f021 0104 	bicge.w	r1, r1, #4
 8008208:	6021      	strge	r1, [r4, #0]
 800820a:	b90d      	cbnz	r5, 8008210 <_printf_i+0x118>
 800820c:	2e00      	cmp	r6, #0
 800820e:	d04d      	beq.n	80082ac <_printf_i+0x1b4>
 8008210:	4616      	mov	r6, r2
 8008212:	fbb5 f1f3 	udiv	r1, r5, r3
 8008216:	fb03 5711 	mls	r7, r3, r1, r5
 800821a:	5dc7      	ldrb	r7, [r0, r7]
 800821c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008220:	462f      	mov	r7, r5
 8008222:	42bb      	cmp	r3, r7
 8008224:	460d      	mov	r5, r1
 8008226:	d9f4      	bls.n	8008212 <_printf_i+0x11a>
 8008228:	2b08      	cmp	r3, #8
 800822a:	d10b      	bne.n	8008244 <_printf_i+0x14c>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	07df      	lsls	r7, r3, #31
 8008230:	d508      	bpl.n	8008244 <_printf_i+0x14c>
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	6861      	ldr	r1, [r4, #4]
 8008236:	4299      	cmp	r1, r3
 8008238:	bfde      	ittt	le
 800823a:	2330      	movle	r3, #48	; 0x30
 800823c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008240:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008244:	1b92      	subs	r2, r2, r6
 8008246:	6122      	str	r2, [r4, #16]
 8008248:	f8cd a000 	str.w	sl, [sp]
 800824c:	464b      	mov	r3, r9
 800824e:	aa03      	add	r2, sp, #12
 8008250:	4621      	mov	r1, r4
 8008252:	4640      	mov	r0, r8
 8008254:	f7ff fee2 	bl	800801c <_printf_common>
 8008258:	3001      	adds	r0, #1
 800825a:	d14c      	bne.n	80082f6 <_printf_i+0x1fe>
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	b004      	add	sp, #16
 8008262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008266:	4835      	ldr	r0, [pc, #212]	; (800833c <_printf_i+0x244>)
 8008268:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	680e      	ldr	r6, [r1, #0]
 8008270:	061f      	lsls	r7, r3, #24
 8008272:	f856 5b04 	ldr.w	r5, [r6], #4
 8008276:	600e      	str	r6, [r1, #0]
 8008278:	d514      	bpl.n	80082a4 <_printf_i+0x1ac>
 800827a:	07d9      	lsls	r1, r3, #31
 800827c:	bf44      	itt	mi
 800827e:	f043 0320 	orrmi.w	r3, r3, #32
 8008282:	6023      	strmi	r3, [r4, #0]
 8008284:	b91d      	cbnz	r5, 800828e <_printf_i+0x196>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	f023 0320 	bic.w	r3, r3, #32
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	2310      	movs	r3, #16
 8008290:	e7b0      	b.n	80081f4 <_printf_i+0xfc>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	f043 0320 	orr.w	r3, r3, #32
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	2378      	movs	r3, #120	; 0x78
 800829c:	4828      	ldr	r0, [pc, #160]	; (8008340 <_printf_i+0x248>)
 800829e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082a2:	e7e3      	b.n	800826c <_printf_i+0x174>
 80082a4:	065e      	lsls	r6, r3, #25
 80082a6:	bf48      	it	mi
 80082a8:	b2ad      	uxthmi	r5, r5
 80082aa:	e7e6      	b.n	800827a <_printf_i+0x182>
 80082ac:	4616      	mov	r6, r2
 80082ae:	e7bb      	b.n	8008228 <_printf_i+0x130>
 80082b0:	680b      	ldr	r3, [r1, #0]
 80082b2:	6826      	ldr	r6, [r4, #0]
 80082b4:	6960      	ldr	r0, [r4, #20]
 80082b6:	1d1d      	adds	r5, r3, #4
 80082b8:	600d      	str	r5, [r1, #0]
 80082ba:	0635      	lsls	r5, r6, #24
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	d501      	bpl.n	80082c4 <_printf_i+0x1cc>
 80082c0:	6018      	str	r0, [r3, #0]
 80082c2:	e002      	b.n	80082ca <_printf_i+0x1d2>
 80082c4:	0671      	lsls	r1, r6, #25
 80082c6:	d5fb      	bpl.n	80082c0 <_printf_i+0x1c8>
 80082c8:	8018      	strh	r0, [r3, #0]
 80082ca:	2300      	movs	r3, #0
 80082cc:	6123      	str	r3, [r4, #16]
 80082ce:	4616      	mov	r6, r2
 80082d0:	e7ba      	b.n	8008248 <_printf_i+0x150>
 80082d2:	680b      	ldr	r3, [r1, #0]
 80082d4:	1d1a      	adds	r2, r3, #4
 80082d6:	600a      	str	r2, [r1, #0]
 80082d8:	681e      	ldr	r6, [r3, #0]
 80082da:	6862      	ldr	r2, [r4, #4]
 80082dc:	2100      	movs	r1, #0
 80082de:	4630      	mov	r0, r6
 80082e0:	f7f7 ff76 	bl	80001d0 <memchr>
 80082e4:	b108      	cbz	r0, 80082ea <_printf_i+0x1f2>
 80082e6:	1b80      	subs	r0, r0, r6
 80082e8:	6060      	str	r0, [r4, #4]
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	6123      	str	r3, [r4, #16]
 80082ee:	2300      	movs	r3, #0
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f4:	e7a8      	b.n	8008248 <_printf_i+0x150>
 80082f6:	6923      	ldr	r3, [r4, #16]
 80082f8:	4632      	mov	r2, r6
 80082fa:	4649      	mov	r1, r9
 80082fc:	4640      	mov	r0, r8
 80082fe:	47d0      	blx	sl
 8008300:	3001      	adds	r0, #1
 8008302:	d0ab      	beq.n	800825c <_printf_i+0x164>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	079b      	lsls	r3, r3, #30
 8008308:	d413      	bmi.n	8008332 <_printf_i+0x23a>
 800830a:	68e0      	ldr	r0, [r4, #12]
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	4298      	cmp	r0, r3
 8008310:	bfb8      	it	lt
 8008312:	4618      	movlt	r0, r3
 8008314:	e7a4      	b.n	8008260 <_printf_i+0x168>
 8008316:	2301      	movs	r3, #1
 8008318:	4632      	mov	r2, r6
 800831a:	4649      	mov	r1, r9
 800831c:	4640      	mov	r0, r8
 800831e:	47d0      	blx	sl
 8008320:	3001      	adds	r0, #1
 8008322:	d09b      	beq.n	800825c <_printf_i+0x164>
 8008324:	3501      	adds	r5, #1
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	9903      	ldr	r1, [sp, #12]
 800832a:	1a5b      	subs	r3, r3, r1
 800832c:	42ab      	cmp	r3, r5
 800832e:	dcf2      	bgt.n	8008316 <_printf_i+0x21e>
 8008330:	e7eb      	b.n	800830a <_printf_i+0x212>
 8008332:	2500      	movs	r5, #0
 8008334:	f104 0619 	add.w	r6, r4, #25
 8008338:	e7f5      	b.n	8008326 <_printf_i+0x22e>
 800833a:	bf00      	nop
 800833c:	080088e3 	.word	0x080088e3
 8008340:	080088f4 	.word	0x080088f4

08008344 <_read_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d07      	ldr	r5, [pc, #28]	; (8008364 <_read_r+0x20>)
 8008348:	4604      	mov	r4, r0
 800834a:	4608      	mov	r0, r1
 800834c:	4611      	mov	r1, r2
 800834e:	2200      	movs	r2, #0
 8008350:	602a      	str	r2, [r5, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	f7f9 fa6e 	bl	8001834 <_read>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_read_r+0x1e>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_read_r+0x1e>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	200021c4 	.word	0x200021c4

08008368 <__swbuf_r>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	460e      	mov	r6, r1
 800836c:	4614      	mov	r4, r2
 800836e:	4605      	mov	r5, r0
 8008370:	b118      	cbz	r0, 800837a <__swbuf_r+0x12>
 8008372:	6983      	ldr	r3, [r0, #24]
 8008374:	b90b      	cbnz	r3, 800837a <__swbuf_r+0x12>
 8008376:	f7ff f8df 	bl	8007538 <__sinit>
 800837a:	4b21      	ldr	r3, [pc, #132]	; (8008400 <__swbuf_r+0x98>)
 800837c:	429c      	cmp	r4, r3
 800837e:	d12b      	bne.n	80083d8 <__swbuf_r+0x70>
 8008380:	686c      	ldr	r4, [r5, #4]
 8008382:	69a3      	ldr	r3, [r4, #24]
 8008384:	60a3      	str	r3, [r4, #8]
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	071a      	lsls	r2, r3, #28
 800838a:	d52f      	bpl.n	80083ec <__swbuf_r+0x84>
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	b36b      	cbz	r3, 80083ec <__swbuf_r+0x84>
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	6820      	ldr	r0, [r4, #0]
 8008394:	1ac0      	subs	r0, r0, r3
 8008396:	6963      	ldr	r3, [r4, #20]
 8008398:	b2f6      	uxtb	r6, r6
 800839a:	4283      	cmp	r3, r0
 800839c:	4637      	mov	r7, r6
 800839e:	dc04      	bgt.n	80083aa <__swbuf_r+0x42>
 80083a0:	4621      	mov	r1, r4
 80083a2:	4628      	mov	r0, r5
 80083a4:	f7ff fc0a 	bl	8007bbc <_fflush_r>
 80083a8:	bb30      	cbnz	r0, 80083f8 <__swbuf_r+0x90>
 80083aa:	68a3      	ldr	r3, [r4, #8]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	60a3      	str	r3, [r4, #8]
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	6022      	str	r2, [r4, #0]
 80083b6:	701e      	strb	r6, [r3, #0]
 80083b8:	6963      	ldr	r3, [r4, #20]
 80083ba:	3001      	adds	r0, #1
 80083bc:	4283      	cmp	r3, r0
 80083be:	d004      	beq.n	80083ca <__swbuf_r+0x62>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	07db      	lsls	r3, r3, #31
 80083c4:	d506      	bpl.n	80083d4 <__swbuf_r+0x6c>
 80083c6:	2e0a      	cmp	r6, #10
 80083c8:	d104      	bne.n	80083d4 <__swbuf_r+0x6c>
 80083ca:	4621      	mov	r1, r4
 80083cc:	4628      	mov	r0, r5
 80083ce:	f7ff fbf5 	bl	8007bbc <_fflush_r>
 80083d2:	b988      	cbnz	r0, 80083f8 <__swbuf_r+0x90>
 80083d4:	4638      	mov	r0, r7
 80083d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d8:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <__swbuf_r+0x9c>)
 80083da:	429c      	cmp	r4, r3
 80083dc:	d101      	bne.n	80083e2 <__swbuf_r+0x7a>
 80083de:	68ac      	ldr	r4, [r5, #8]
 80083e0:	e7cf      	b.n	8008382 <__swbuf_r+0x1a>
 80083e2:	4b09      	ldr	r3, [pc, #36]	; (8008408 <__swbuf_r+0xa0>)
 80083e4:	429c      	cmp	r4, r3
 80083e6:	bf08      	it	eq
 80083e8:	68ec      	ldreq	r4, [r5, #12]
 80083ea:	e7ca      	b.n	8008382 <__swbuf_r+0x1a>
 80083ec:	4621      	mov	r1, r4
 80083ee:	4628      	mov	r0, r5
 80083f0:	f000 f80c 	bl	800840c <__swsetup_r>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d0cb      	beq.n	8008390 <__swbuf_r+0x28>
 80083f8:	f04f 37ff 	mov.w	r7, #4294967295
 80083fc:	e7ea      	b.n	80083d4 <__swbuf_r+0x6c>
 80083fe:	bf00      	nop
 8008400:	080087dc 	.word	0x080087dc
 8008404:	080087fc 	.word	0x080087fc
 8008408:	080087bc 	.word	0x080087bc

0800840c <__swsetup_r>:
 800840c:	4b32      	ldr	r3, [pc, #200]	; (80084d8 <__swsetup_r+0xcc>)
 800840e:	b570      	push	{r4, r5, r6, lr}
 8008410:	681d      	ldr	r5, [r3, #0]
 8008412:	4606      	mov	r6, r0
 8008414:	460c      	mov	r4, r1
 8008416:	b125      	cbz	r5, 8008422 <__swsetup_r+0x16>
 8008418:	69ab      	ldr	r3, [r5, #24]
 800841a:	b913      	cbnz	r3, 8008422 <__swsetup_r+0x16>
 800841c:	4628      	mov	r0, r5
 800841e:	f7ff f88b 	bl	8007538 <__sinit>
 8008422:	4b2e      	ldr	r3, [pc, #184]	; (80084dc <__swsetup_r+0xd0>)
 8008424:	429c      	cmp	r4, r3
 8008426:	d10f      	bne.n	8008448 <__swsetup_r+0x3c>
 8008428:	686c      	ldr	r4, [r5, #4]
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008430:	0719      	lsls	r1, r3, #28
 8008432:	d42c      	bmi.n	800848e <__swsetup_r+0x82>
 8008434:	06dd      	lsls	r5, r3, #27
 8008436:	d411      	bmi.n	800845c <__swsetup_r+0x50>
 8008438:	2309      	movs	r3, #9
 800843a:	6033      	str	r3, [r6, #0]
 800843c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008440:	81a3      	strh	r3, [r4, #12]
 8008442:	f04f 30ff 	mov.w	r0, #4294967295
 8008446:	e03e      	b.n	80084c6 <__swsetup_r+0xba>
 8008448:	4b25      	ldr	r3, [pc, #148]	; (80084e0 <__swsetup_r+0xd4>)
 800844a:	429c      	cmp	r4, r3
 800844c:	d101      	bne.n	8008452 <__swsetup_r+0x46>
 800844e:	68ac      	ldr	r4, [r5, #8]
 8008450:	e7eb      	b.n	800842a <__swsetup_r+0x1e>
 8008452:	4b24      	ldr	r3, [pc, #144]	; (80084e4 <__swsetup_r+0xd8>)
 8008454:	429c      	cmp	r4, r3
 8008456:	bf08      	it	eq
 8008458:	68ec      	ldreq	r4, [r5, #12]
 800845a:	e7e6      	b.n	800842a <__swsetup_r+0x1e>
 800845c:	0758      	lsls	r0, r3, #29
 800845e:	d512      	bpl.n	8008486 <__swsetup_r+0x7a>
 8008460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008462:	b141      	cbz	r1, 8008476 <__swsetup_r+0x6a>
 8008464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008468:	4299      	cmp	r1, r3
 800846a:	d002      	beq.n	8008472 <__swsetup_r+0x66>
 800846c:	4630      	mov	r0, r6
 800846e:	f7ff fc2b 	bl	8007cc8 <_free_r>
 8008472:	2300      	movs	r3, #0
 8008474:	6363      	str	r3, [r4, #52]	; 0x34
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	2300      	movs	r3, #0
 8008480:	6063      	str	r3, [r4, #4]
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	f043 0308 	orr.w	r3, r3, #8
 800848c:	81a3      	strh	r3, [r4, #12]
 800848e:	6923      	ldr	r3, [r4, #16]
 8008490:	b94b      	cbnz	r3, 80084a6 <__swsetup_r+0x9a>
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800849c:	d003      	beq.n	80084a6 <__swsetup_r+0x9a>
 800849e:	4621      	mov	r1, r4
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 f84d 	bl	8008540 <__smakebuf_r>
 80084a6:	89a0      	ldrh	r0, [r4, #12]
 80084a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084ac:	f010 0301 	ands.w	r3, r0, #1
 80084b0:	d00a      	beq.n	80084c8 <__swsetup_r+0xbc>
 80084b2:	2300      	movs	r3, #0
 80084b4:	60a3      	str	r3, [r4, #8]
 80084b6:	6963      	ldr	r3, [r4, #20]
 80084b8:	425b      	negs	r3, r3
 80084ba:	61a3      	str	r3, [r4, #24]
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	b943      	cbnz	r3, 80084d2 <__swsetup_r+0xc6>
 80084c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084c4:	d1ba      	bne.n	800843c <__swsetup_r+0x30>
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	0781      	lsls	r1, r0, #30
 80084ca:	bf58      	it	pl
 80084cc:	6963      	ldrpl	r3, [r4, #20]
 80084ce:	60a3      	str	r3, [r4, #8]
 80084d0:	e7f4      	b.n	80084bc <__swsetup_r+0xb0>
 80084d2:	2000      	movs	r0, #0
 80084d4:	e7f7      	b.n	80084c6 <__swsetup_r+0xba>
 80084d6:	bf00      	nop
 80084d8:	20000174 	.word	0x20000174
 80084dc:	080087dc 	.word	0x080087dc
 80084e0:	080087fc 	.word	0x080087fc
 80084e4:	080087bc 	.word	0x080087bc

080084e8 <abort>:
 80084e8:	b508      	push	{r3, lr}
 80084ea:	2006      	movs	r0, #6
 80084ec:	f000 f890 	bl	8008610 <raise>
 80084f0:	2001      	movs	r0, #1
 80084f2:	f7f9 f995 	bl	8001820 <_exit>

080084f6 <__swhatbuf_r>:
 80084f6:	b570      	push	{r4, r5, r6, lr}
 80084f8:	460e      	mov	r6, r1
 80084fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fe:	2900      	cmp	r1, #0
 8008500:	b096      	sub	sp, #88	; 0x58
 8008502:	4614      	mov	r4, r2
 8008504:	461d      	mov	r5, r3
 8008506:	da07      	bge.n	8008518 <__swhatbuf_r+0x22>
 8008508:	2300      	movs	r3, #0
 800850a:	602b      	str	r3, [r5, #0]
 800850c:	89b3      	ldrh	r3, [r6, #12]
 800850e:	061a      	lsls	r2, r3, #24
 8008510:	d410      	bmi.n	8008534 <__swhatbuf_r+0x3e>
 8008512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008516:	e00e      	b.n	8008536 <__swhatbuf_r+0x40>
 8008518:	466a      	mov	r2, sp
 800851a:	f000 f895 	bl	8008648 <_fstat_r>
 800851e:	2800      	cmp	r0, #0
 8008520:	dbf2      	blt.n	8008508 <__swhatbuf_r+0x12>
 8008522:	9a01      	ldr	r2, [sp, #4]
 8008524:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008528:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800852c:	425a      	negs	r2, r3
 800852e:	415a      	adcs	r2, r3
 8008530:	602a      	str	r2, [r5, #0]
 8008532:	e7ee      	b.n	8008512 <__swhatbuf_r+0x1c>
 8008534:	2340      	movs	r3, #64	; 0x40
 8008536:	2000      	movs	r0, #0
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	b016      	add	sp, #88	; 0x58
 800853c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008540 <__smakebuf_r>:
 8008540:	898b      	ldrh	r3, [r1, #12]
 8008542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008544:	079d      	lsls	r5, r3, #30
 8008546:	4606      	mov	r6, r0
 8008548:	460c      	mov	r4, r1
 800854a:	d507      	bpl.n	800855c <__smakebuf_r+0x1c>
 800854c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	6123      	str	r3, [r4, #16]
 8008554:	2301      	movs	r3, #1
 8008556:	6163      	str	r3, [r4, #20]
 8008558:	b002      	add	sp, #8
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	ab01      	add	r3, sp, #4
 800855e:	466a      	mov	r2, sp
 8008560:	f7ff ffc9 	bl	80084f6 <__swhatbuf_r>
 8008564:	9900      	ldr	r1, [sp, #0]
 8008566:	4605      	mov	r5, r0
 8008568:	4630      	mov	r0, r6
 800856a:	f7ff f8c1 	bl	80076f0 <_malloc_r>
 800856e:	b948      	cbnz	r0, 8008584 <__smakebuf_r+0x44>
 8008570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008574:	059a      	lsls	r2, r3, #22
 8008576:	d4ef      	bmi.n	8008558 <__smakebuf_r+0x18>
 8008578:	f023 0303 	bic.w	r3, r3, #3
 800857c:	f043 0302 	orr.w	r3, r3, #2
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	e7e3      	b.n	800854c <__smakebuf_r+0xc>
 8008584:	4b0d      	ldr	r3, [pc, #52]	; (80085bc <__smakebuf_r+0x7c>)
 8008586:	62b3      	str	r3, [r6, #40]	; 0x28
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	6020      	str	r0, [r4, #0]
 800858c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	9b00      	ldr	r3, [sp, #0]
 8008594:	6163      	str	r3, [r4, #20]
 8008596:	9b01      	ldr	r3, [sp, #4]
 8008598:	6120      	str	r0, [r4, #16]
 800859a:	b15b      	cbz	r3, 80085b4 <__smakebuf_r+0x74>
 800859c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085a0:	4630      	mov	r0, r6
 80085a2:	f000 f863 	bl	800866c <_isatty_r>
 80085a6:	b128      	cbz	r0, 80085b4 <__smakebuf_r+0x74>
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	f023 0303 	bic.w	r3, r3, #3
 80085ae:	f043 0301 	orr.w	r3, r3, #1
 80085b2:	81a3      	strh	r3, [r4, #12]
 80085b4:	89a0      	ldrh	r0, [r4, #12]
 80085b6:	4305      	orrs	r5, r0
 80085b8:	81a5      	strh	r5, [r4, #12]
 80085ba:	e7cd      	b.n	8008558 <__smakebuf_r+0x18>
 80085bc:	080074d1 	.word	0x080074d1

080085c0 <_raise_r>:
 80085c0:	291f      	cmp	r1, #31
 80085c2:	b538      	push	{r3, r4, r5, lr}
 80085c4:	4604      	mov	r4, r0
 80085c6:	460d      	mov	r5, r1
 80085c8:	d904      	bls.n	80085d4 <_raise_r+0x14>
 80085ca:	2316      	movs	r3, #22
 80085cc:	6003      	str	r3, [r0, #0]
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085d6:	b112      	cbz	r2, 80085de <_raise_r+0x1e>
 80085d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085dc:	b94b      	cbnz	r3, 80085f2 <_raise_r+0x32>
 80085de:	4620      	mov	r0, r4
 80085e0:	f000 f830 	bl	8008644 <_getpid_r>
 80085e4:	462a      	mov	r2, r5
 80085e6:	4601      	mov	r1, r0
 80085e8:	4620      	mov	r0, r4
 80085ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ee:	f000 b817 	b.w	8008620 <_kill_r>
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d00a      	beq.n	800860c <_raise_r+0x4c>
 80085f6:	1c59      	adds	r1, r3, #1
 80085f8:	d103      	bne.n	8008602 <_raise_r+0x42>
 80085fa:	2316      	movs	r3, #22
 80085fc:	6003      	str	r3, [r0, #0]
 80085fe:	2001      	movs	r0, #1
 8008600:	e7e7      	b.n	80085d2 <_raise_r+0x12>
 8008602:	2400      	movs	r4, #0
 8008604:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008608:	4628      	mov	r0, r5
 800860a:	4798      	blx	r3
 800860c:	2000      	movs	r0, #0
 800860e:	e7e0      	b.n	80085d2 <_raise_r+0x12>

08008610 <raise>:
 8008610:	4b02      	ldr	r3, [pc, #8]	; (800861c <raise+0xc>)
 8008612:	4601      	mov	r1, r0
 8008614:	6818      	ldr	r0, [r3, #0]
 8008616:	f7ff bfd3 	b.w	80085c0 <_raise_r>
 800861a:	bf00      	nop
 800861c:	20000174 	.word	0x20000174

08008620 <_kill_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4d07      	ldr	r5, [pc, #28]	; (8008640 <_kill_r+0x20>)
 8008624:	2300      	movs	r3, #0
 8008626:	4604      	mov	r4, r0
 8008628:	4608      	mov	r0, r1
 800862a:	4611      	mov	r1, r2
 800862c:	602b      	str	r3, [r5, #0]
 800862e:	f7f9 f8e7 	bl	8001800 <_kill>
 8008632:	1c43      	adds	r3, r0, #1
 8008634:	d102      	bne.n	800863c <_kill_r+0x1c>
 8008636:	682b      	ldr	r3, [r5, #0]
 8008638:	b103      	cbz	r3, 800863c <_kill_r+0x1c>
 800863a:	6023      	str	r3, [r4, #0]
 800863c:	bd38      	pop	{r3, r4, r5, pc}
 800863e:	bf00      	nop
 8008640:	200021c4 	.word	0x200021c4

08008644 <_getpid_r>:
 8008644:	f7f9 b8d4 	b.w	80017f0 <_getpid>

08008648 <_fstat_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4d07      	ldr	r5, [pc, #28]	; (8008668 <_fstat_r+0x20>)
 800864c:	2300      	movs	r3, #0
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	4611      	mov	r1, r2
 8008654:	602b      	str	r3, [r5, #0]
 8008656:	f7f9 f932 	bl	80018be <_fstat>
 800865a:	1c43      	adds	r3, r0, #1
 800865c:	d102      	bne.n	8008664 <_fstat_r+0x1c>
 800865e:	682b      	ldr	r3, [r5, #0]
 8008660:	b103      	cbz	r3, 8008664 <_fstat_r+0x1c>
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	bd38      	pop	{r3, r4, r5, pc}
 8008666:	bf00      	nop
 8008668:	200021c4 	.word	0x200021c4

0800866c <_isatty_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d06      	ldr	r5, [pc, #24]	; (8008688 <_isatty_r+0x1c>)
 8008670:	2300      	movs	r3, #0
 8008672:	4604      	mov	r4, r0
 8008674:	4608      	mov	r0, r1
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	f7f9 f931 	bl	80018de <_isatty>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d102      	bne.n	8008686 <_isatty_r+0x1a>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	b103      	cbz	r3, 8008686 <_isatty_r+0x1a>
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	200021c4 	.word	0x200021c4

0800868c <_gettimeofday>:
 800868c:	4b02      	ldr	r3, [pc, #8]	; (8008698 <_gettimeofday+0xc>)
 800868e:	2258      	movs	r2, #88	; 0x58
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	f04f 30ff 	mov.w	r0, #4294967295
 8008696:	4770      	bx	lr
 8008698:	200021c4 	.word	0x200021c4

0800869c <_init>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	bf00      	nop
 80086a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a2:	bc08      	pop	{r3}
 80086a4:	469e      	mov	lr, r3
 80086a6:	4770      	bx	lr

080086a8 <_fini>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	bf00      	nop
 80086ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ae:	bc08      	pop	{r3}
 80086b0:	469e      	mov	lr, r3
 80086b2:	4770      	bx	lr
