
space-invaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004754  08004754  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004754  08004754  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004754  08004754  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004754  08004754  00014754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800475c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000141c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001490  20001490  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b276  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000373d  00000000  00000000  0003b31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  0003ea58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  0003ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fce0  00000000  00000000  00041340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001919c  00000000  00000000  00061020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0392  00000000  00000000  0007a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013a54e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c5c  00000000  00000000  0013a5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004674 	.word	0x08004674

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004674 	.word	0x08004674

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000090 	.word	0x20000090
 8000200:	20000144 	.word	0x20000144

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fb7d 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f821 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f921 	bl	8000458 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000216:	f000 f87f 	bl	8000318 <MX_I2C1_Init>
  MX_SPI1_Init();
 800021a:	f000 f8bd 	bl	8000398 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800021e:	f000 f8f9 	bl	8000414 <MX_USB_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <main+0x48>)
 8000224:	1d3c      	adds	r4, r7, #4
 8000226:	461d      	mov	r5, r3
 8000228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f002 fed8 	bl	8002fee <osThreadCreate>
 800023e:	4603      	mov	r3, r0
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <main+0x4c>)
 8000242:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000244:	f002 fecc 	bl	8002fe0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000248:	e7fe      	b.n	8000248 <main+0x44>
 800024a:	bf00      	nop
 800024c:	08004698 	.word	0x08004698
 8000250:	20001094 	.word	0x20001094

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b09e      	sub	sp, #120	; 0x78
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800025e:	2228      	movs	r2, #40	; 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f004 f938 	bl	80044d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	223c      	movs	r2, #60	; 0x3c
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f004 f92a 	bl	80044d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000284:	2303      	movs	r3, #3
 8000286:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	2310      	movs	r3, #16
 8000298:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	2302      	movs	r3, #2
 800029c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002a8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 ffd8 	bl	8001264 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ba:	f000 f97b 	bl	80005b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c2:	2302      	movs	r3, #2
 80002c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002d8:	2101      	movs	r1, #1
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 feca 	bl	8002074 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002e6:	f000 f965 	bl	80005b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <SystemClock_Config+0xc0>)
 80002ec:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f8:	463b      	mov	r3, r7
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 f900 	bl	8002500 <HAL_RCCEx_PeriphCLKConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000306:	f000 f955 	bl	80005b4 <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3778      	adds	r7, #120	; 0x78
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	00020020 	.word	0x00020020

08000318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <MX_I2C1_Init+0x74>)
 800031e:	4a1c      	ldr	r2, [pc, #112]	; (8000390 <MX_I2C1_Init+0x78>)
 8000320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000322:	4b1a      	ldr	r3, [pc, #104]	; (800038c <MX_I2C1_Init+0x74>)
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <MX_I2C1_Init+0x7c>)
 8000326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <MX_I2C1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800032e:	4b17      	ldr	r3, [pc, #92]	; (800038c <MX_I2C1_Init+0x74>)
 8000330:	2201      	movs	r2, #1
 8000332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000334:	4b15      	ldr	r3, [pc, #84]	; (800038c <MX_I2C1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800033a:	4b14      	ldr	r3, [pc, #80]	; (800038c <MX_I2C1_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000340:	4b12      	ldr	r3, [pc, #72]	; (800038c <MX_I2C1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000346:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_I2C1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000352:	480e      	ldr	r0, [pc, #56]	; (800038c <MX_I2C1_Init+0x74>)
 8000354:	f000 fd82 	bl	8000e5c <HAL_I2C_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800035e:	f000 f929 	bl	80005b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000362:	2100      	movs	r1, #0
 8000364:	4809      	ldr	r0, [pc, #36]	; (800038c <MX_I2C1_Init+0x74>)
 8000366:	f000 fe08 	bl	8000f7a <HAL_I2CEx_ConfigAnalogFilter>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000370:	f000 f920 	bl	80005b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000374:	2100      	movs	r1, #0
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_I2C1_Init+0x74>)
 8000378:	f000 fe4a 	bl	8001010 <HAL_I2CEx_ConfigDigitalFilter>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000382:	f000 f917 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20001098 	.word	0x20001098
 8000390:	40005400 	.word	0x40005400
 8000394:	2000090e 	.word	0x2000090e

08000398 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <MX_SPI1_Init+0x74>)
 800039e:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <MX_SPI1_Init+0x78>)
 80003a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <MX_SPI1_Init+0x74>)
 80003a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003aa:	4b18      	ldr	r3, [pc, #96]	; (800040c <MX_SPI1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <MX_SPI1_Init+0x74>)
 80003b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_SPI1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003be:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_SPI1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_SPI1_Init+0x74>)
 80003c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <MX_SPI1_Init+0x74>)
 80003ce:	2208      	movs	r2, #8
 80003d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_SPI1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_SPI1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_SPI1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_SPI1_Init+0x74>)
 80003e6:	2207      	movs	r2, #7
 80003e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_SPI1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_SPI1_Init+0x74>)
 80003f2:	2208      	movs	r2, #8
 80003f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_SPI1_Init+0x74>)
 80003f8:	f002 fa32 	bl	8002860 <HAL_SPI_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000402:	f000 f8d7 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200010e4 	.word	0x200010e4
 8000410:	40013000 	.word	0x40013000

08000414 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000418:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <MX_USB_PCD_Init+0x3c>)
 800041a:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <MX_USB_PCD_Init+0x40>)
 800041c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_USB_PCD_Init+0x3c>)
 8000420:	2208      	movs	r2, #8
 8000422:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <MX_USB_PCD_Init+0x3c>)
 8000426:	2202      	movs	r2, #2
 8000428:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_USB_PCD_Init+0x3c>)
 800042c:	2202      	movs	r2, #2
 800042e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <MX_USB_PCD_Init+0x3c>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_USB_PCD_Init+0x3c>)
 8000438:	2200      	movs	r2, #0
 800043a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <MX_USB_PCD_Init+0x3c>)
 800043e:	f000 fe33 	bl	80010a8 <HAL_PCD_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000448:	f000 f8b4 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20001148 	.word	0x20001148
 8000454:	40005c00 	.word	0x40005c00

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b08a      	sub	sp, #40	; 0x28
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0314 	add.w	r3, r7, #20
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800046e:	4b42      	ldr	r3, [pc, #264]	; (8000578 <MX_GPIO_Init+0x120>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a41      	ldr	r2, [pc, #260]	; (8000578 <MX_GPIO_Init+0x120>)
 8000474:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b3f      	ldr	r3, [pc, #252]	; (8000578 <MX_GPIO_Init+0x120>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000482:	613b      	str	r3, [r7, #16]
 8000484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <MX_GPIO_Init+0x120>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a3b      	ldr	r2, [pc, #236]	; (8000578 <MX_GPIO_Init+0x120>)
 800048c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b39      	ldr	r3, [pc, #228]	; (8000578 <MX_GPIO_Init+0x120>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800049e:	4b36      	ldr	r3, [pc, #216]	; (8000578 <MX_GPIO_Init+0x120>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a35      	ldr	r2, [pc, #212]	; (8000578 <MX_GPIO_Init+0x120>)
 80004a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b33      	ldr	r3, [pc, #204]	; (8000578 <MX_GPIO_Init+0x120>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b30      	ldr	r3, [pc, #192]	; (8000578 <MX_GPIO_Init+0x120>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a2f      	ldr	r2, [pc, #188]	; (8000578 <MX_GPIO_Init+0x120>)
 80004bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <MX_GPIO_Init+0x120>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <MX_GPIO_Init+0x120>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a29      	ldr	r2, [pc, #164]	; (8000578 <MX_GPIO_Init+0x120>)
 80004d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <MX_GPIO_Init+0x120>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004e6:	2200      	movs	r2, #0
 80004e8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80004ec:	4823      	ldr	r0, [pc, #140]	; (800057c <MX_GPIO_Init+0x124>)
 80004ee:	f000 fc9d 	bl	8000e2c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2106      	movs	r1, #6
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fa:	f000 fc97 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004fe:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000502:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000504:	2301      	movs	r3, #1
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	4619      	mov	r1, r3
 8000516:	4819      	ldr	r0, [pc, #100]	; (800057c <MX_GPIO_Init+0x124>)
 8000518:	f000 fb0e 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
 800051c:	2331      	movs	r3, #49	; 0x31
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000520:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	4619      	mov	r1, r3
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <MX_GPIO_Init+0x124>)
 8000532:	f000 fb01 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000536:	2301      	movs	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f000 faf4 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000550:	2306      	movs	r3, #6
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2300      	movs	r3, #0
 800055e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4619      	mov	r1, r3
 8000566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056a:	f000 fae5 	bl	8000b38 <HAL_GPIO_Init>

}
 800056e:	bf00      	nop
 8000570:	3728      	adds	r7, #40	; 0x28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	48001000 	.word	0x48001000

08000580 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f002 fd7c 	bl	8003086 <osDelay>
 800058e:	e7fb      	b.n	8000588 <StartDefaultTask+0x8>

08000590 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d101      	bne.n	80005a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005a2:	f000 f9c7 	bl	8000934 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40012c00 	.word	0x40012c00

080005b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b8:	b672      	cpsid	i
}
 80005ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005bc:	e7fe      	b.n	80005bc <Error_Handler+0x8>
	...

080005c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_MspInit+0x4c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <HAL_MspInit+0x4c>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <HAL_MspInit+0x4c>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <HAL_MspInit+0x4c>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <HAL_MspInit+0x4c>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_MspInit+0x4c>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	210f      	movs	r1, #15
 80005fa:	f06f 0001 	mvn.w	r0, #1
 80005fe:	f000 fa71 	bl	8000ae4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <HAL_I2C_MspInit+0x7c>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d127      	bne.n	8000682 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <HAL_I2C_MspInit+0x80>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a16      	ldr	r2, [pc, #88]	; (8000690 <HAL_I2C_MspInit+0x80>)
 8000638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_I2C_MspInit+0x80>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800064a:	23c0      	movs	r3, #192	; 0xc0
 800064c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800064e:	2312      	movs	r3, #18
 8000650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000652:	2301      	movs	r3, #1
 8000654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800065a:	2304      	movs	r3, #4
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <HAL_I2C_MspInit+0x84>)
 8000666:	f000 fa67 	bl	8000b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_I2C_MspInit+0x80>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <HAL_I2C_MspInit+0x80>)
 8000670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_I2C_MspInit+0x80>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40005400 	.word	0x40005400
 8000690:	40021000 	.word	0x40021000
 8000694:	48000400 	.word	0x48000400

08000698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a17      	ldr	r2, [pc, #92]	; (8000714 <HAL_SPI_MspInit+0x7c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d128      	bne.n	800070c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <HAL_SPI_MspInit+0x80>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a16      	ldr	r2, [pc, #88]	; (8000718 <HAL_SPI_MspInit+0x80>)
 80006c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_SPI_MspInit+0x80>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <HAL_SPI_MspInit+0x80>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <HAL_SPI_MspInit+0x80>)
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_SPI_MspInit+0x80>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80006ea:	23e0      	movs	r3, #224	; 0xe0
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006fa:	2305      	movs	r3, #5
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000708:	f000 fa16 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40013000 	.word	0x40013000
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a18      	ldr	r2, [pc, #96]	; (800079c <HAL_PCD_MspInit+0x80>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d129      	bne.n	8000792 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_PCD_MspInit+0x84>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <HAL_PCD_MspInit+0x84>)
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_PCD_MspInit+0x84>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000756:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800075a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000768:	230e      	movs	r3, #14
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f000 f9df 	bl	8000b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_PCD_MspInit+0x84>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_PCD_MspInit+0x84>)
 8000780:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_PCD_MspInit+0x84>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40005c00 	.word	0x40005c00
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	; 0x30
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	2019      	movs	r0, #25
 80007ba:	f000 f993 	bl	8000ae4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80007be:	2019      	movs	r0, #25
 80007c0:	f000 f9ac 	bl	8000b1c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <HAL_InitTick+0x9c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <HAL_InitTick+0x9c>)
 80007ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_InitTick+0x9c>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007dc:	f107 0210 	add.w	r2, r7, #16
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4611      	mov	r1, r2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fe58 	bl	800249c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007ec:	f001 fe34 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 80007f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f4:	4a13      	ldr	r2, [pc, #76]	; (8000844 <HAL_InitTick+0xa0>)
 80007f6:	fba2 2303 	umull	r2, r3, r2, r3
 80007fa:	0c9b      	lsrs	r3, r3, #18
 80007fc:	3b01      	subs	r3, #1
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_InitTick+0xa4>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <HAL_InitTick+0xa8>)
 8000804:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <HAL_InitTick+0xa4>)
 8000808:	f240 32e7 	movw	r2, #999	; 0x3e7
 800080c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <HAL_InitTick+0xa4>)
 8000810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000812:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_InitTick+0xa4>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_InitTick+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <HAL_InitTick+0xa4>)
 8000822:	f002 f8c8 	bl	80029b6 <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d104      	bne.n	8000836 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800082c:	4806      	ldr	r0, [pc, #24]	; (8000848 <HAL_InitTick+0xa4>)
 800082e:	f002 f923 	bl	8002a78 <HAL_TIM_Base_Start_IT>
 8000832:	4603      	mov	r3, r0
 8000834:	e000      	b.n	8000838 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	3730      	adds	r7, #48	; 0x30
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	431bde83 	.word	0x431bde83
 8000848:	20001434 	.word	0x20001434
 800084c:	40012c00 	.word	0x40012c00

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000882:	f002 f963 	bl	8002b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20001434 	.word	0x20001434

08000890 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <SystemInit+0x20>)
 8000896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <SystemInit+0x20>)
 800089c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490e      	ldr	r1, [pc, #56]	; (80008f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0b      	ldr	r4, [pc, #44]	; (8000900 <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008de:	f7ff ffd7 	bl	8000890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e2:	f003 fdd3 	bl	800448c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008e6:	f7ff fc8d 	bl	8000204 <main>

080008ea <LoopForever>:

LoopForever:
    b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008f8:	0800475c 	.word	0x0800475c
  ldr r2, =_sbss
 80008fc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000900:	20001490 	.word	0x20001490

08000904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC1_2_IRQHandler>
	...

08000908 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_Init+0x28>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x28>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f8d8 	bl	8000ace <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	200f      	movs	r0, #15
 8000920:	f7ff ff40 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff fe4c 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40022000 	.word	0x40022000

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008
 8000958:	20001480 	.word	0x20001480

0800095c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20001480 	.word	0x20001480

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <__NVIC_EnableIRQ+0x38>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff4c 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
 8000af0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af6:	f7ff ff61 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000afa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	68b9      	ldr	r1, [r7, #8]
 8000b00:	6978      	ldr	r0, [r7, #20]
 8000b02:	f7ff ffb1 	bl	8000a68 <NVIC_EncodePriority>
 8000b06:	4602      	mov	r2, r0
 8000b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff80 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ff54 	bl	80009d8 <__NVIC_EnableIRQ>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b46:	e154      	b.n	8000df2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 8146 	beq.w	8000dec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d005      	beq.n	8000b78 <HAL_GPIO_Init+0x40>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d130      	bne.n	8000bda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2203      	movs	r2, #3
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bae:	2201      	movs	r2, #1
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	f003 0201 	and.w	r2, r3, #1
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d017      	beq.n	8000c16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d123      	bne.n	8000c6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	08da      	lsrs	r2, r3, #3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3208      	adds	r2, #8
 8000c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	220f      	movs	r2, #15
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	691a      	ldr	r2, [r3, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	08da      	lsrs	r2, r3, #3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	6939      	ldr	r1, [r7, #16]
 8000c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0203 	and.w	r2, r3, #3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 80a0 	beq.w	8000dec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cac:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <HAL_GPIO_Init+0x2d8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a57      	ldr	r2, [pc, #348]	; (8000e10 <HAL_GPIO_Init+0x2d8>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <HAL_GPIO_Init+0x2d8>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc4:	4a53      	ldr	r2, [pc, #332]	; (8000e14 <HAL_GPIO_Init+0x2dc>)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cee:	d019      	beq.n	8000d24 <HAL_GPIO_Init+0x1ec>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a49      	ldr	r2, [pc, #292]	; (8000e18 <HAL_GPIO_Init+0x2e0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d013      	beq.n	8000d20 <HAL_GPIO_Init+0x1e8>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a48      	ldr	r2, [pc, #288]	; (8000e1c <HAL_GPIO_Init+0x2e4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d00d      	beq.n	8000d1c <HAL_GPIO_Init+0x1e4>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a47      	ldr	r2, [pc, #284]	; (8000e20 <HAL_GPIO_Init+0x2e8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d007      	beq.n	8000d18 <HAL_GPIO_Init+0x1e0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a46      	ldr	r2, [pc, #280]	; (8000e24 <HAL_GPIO_Init+0x2ec>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d101      	bne.n	8000d14 <HAL_GPIO_Init+0x1dc>
 8000d10:	2304      	movs	r3, #4
 8000d12:	e008      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d14:	2305      	movs	r3, #5
 8000d16:	e006      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e004      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d24:	2300      	movs	r3, #0
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	f002 0203 	and.w	r2, r2, #3
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	4093      	lsls	r3, r2
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d36:	4937      	ldr	r1, [pc, #220]	; (8000e14 <HAL_GPIO_Init+0x2dc>)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d44:	4b38      	ldr	r3, [pc, #224]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d68:	4a2f      	ldr	r2, [pc, #188]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d92:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <HAL_GPIO_Init+0x2f0>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f47f aea3 	bne.w	8000b48 <HAL_GPIO_Init+0x10>
  }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010000 	.word	0x40010000
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	48000800 	.word	0x48000800
 8000e20:	48000c00 	.word	0x48000c00
 8000e24:	48001000 	.word	0x48001000
 8000e28:	40010400 	.word	0x40010400

08000e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e081      	b.n	8000f72 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d106      	bne.n	8000e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fbc4 	bl	8000610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2224      	movs	r2, #36	; 0x24
 8000e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0201 	bic.w	r2, r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000eac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ebc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d107      	bne.n	8000ed6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	e006      	b.n	8000ee4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ee2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d104      	bne.n	8000ef6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ef4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6812      	ldr	r2, [r2, #0]
 8000f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69d9      	ldr	r1, [r3, #28]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a1a      	ldr	r2, [r3, #32]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0201 	orr.w	r2, r2, #1
 8000f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b20      	cmp	r3, #32
 8000f8e:	d138      	bne.n	8001002 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d101      	bne.n	8000f9e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e032      	b.n	8001004 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2224      	movs	r2, #36	; 0x24
 8000faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fcc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6819      	ldr	r1, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0201 	orr.w	r2, r2, #1
 8000fec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001002:	2302      	movs	r3, #2
  }
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b20      	cmp	r3, #32
 8001024:	d139      	bne.n	800109a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001030:	2302      	movs	r3, #2
 8001032:	e033      	b.n	800109c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2224      	movs	r2, #36	; 0x24
 8001040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0201 	bic.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001062:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0201 	orr.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2220      	movs	r2, #32
 800108a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800109a:	2302      	movs	r3, #2
  }
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b08b      	sub	sp, #44	; 0x2c
 80010ac:	af06      	add	r7, sp, #24
 80010ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e0d0      	b.n	800125c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d106      	bne.n	80010d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fb24 	bl	800071c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 ff29 	bl	8002f38 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e04c      	b.n	8001186 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	440b      	add	r3, r1
 80010fc:	3301      	adds	r3, #1
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	b298      	uxth	r0, r3
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	3336      	adds	r3, #54	; 0x36
 800112a:	4602      	mov	r2, r0
 800112c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	440b      	add	r3, r1
 800113e:	3303      	adds	r3, #3
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	440b      	add	r3, r1
 8001152:	3338      	adds	r3, #56	; 0x38
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	440b      	add	r3, r1
 8001166:	333c      	adds	r3, #60	; 0x3c
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	3340      	adds	r3, #64	; 0x40
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	3301      	adds	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	d3ad      	bcc.n	80010ec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e044      	b.n	8001220 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	440b      	add	r3, r1
 80011e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	440b      	add	r3, r1
 80011fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	440b      	add	r3, r1
 8001212:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	3301      	adds	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3b5      	bcc.n	8001196 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	687e      	ldr	r6, [r7, #4]
 8001232:	466d      	mov	r5, sp
 8001234:	f106 0410 	add.w	r4, r6, #16
 8001238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800123a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	602b      	str	r3, [r5, #0]
 8001240:	1d33      	adds	r3, r6, #4
 8001242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	f001 fe92 	bl	8002f6e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800126a:	af00      	add	r7, sp, #0
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	f000 bef4 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 816a 	beq.w	8001562 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800128e:	4bb3      	ldr	r3, [pc, #716]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b04      	cmp	r3, #4
 8001298:	d00c      	beq.n	80012b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800129a:	4bb0      	ldr	r3, [pc, #704]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d159      	bne.n	800135a <HAL_RCC_OscConfig+0xf6>
 80012a6:	4bad      	ldr	r3, [pc, #692]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b2:	d152      	bne.n	800135a <HAL_RCC_OscConfig+0xf6>
 80012b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d102      	bne.n	80012e6 <HAL_RCC_OscConfig+0x82>
 80012e0:	4b9e      	ldr	r3, [pc, #632]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	e015      	b.n	8001312 <HAL_RCC_OscConfig+0xae>
 80012e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001302:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800130e:	4b93      	ldr	r3, [pc, #588]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001316:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800131a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800131e:	fa92 f2a2 	rbit	r2, r2
 8001322:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001326:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800132a:	fab2 f282 	clz	r2, r2
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	f042 0220 	orr.w	r2, r2, #32
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	f002 021f 	and.w	r2, r2, #31
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 810c 	beq.w	8001560 <HAL_RCC_OscConfig+0x2fc>
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f040 8106 	bne.w	8001560 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	f000 be86 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001364:	d106      	bne.n	8001374 <HAL_RCC_OscConfig+0x110>
 8001366:	4b7d      	ldr	r3, [pc, #500]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a7c      	ldr	r2, [pc, #496]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e030      	b.n	80013d6 <HAL_RCC_OscConfig+0x172>
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x134>
 800137e:	4b77      	ldr	r3, [pc, #476]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a76      	ldr	r2, [pc, #472]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b74      	ldr	r3, [pc, #464]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a73      	ldr	r2, [pc, #460]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e01e      	b.n	80013d6 <HAL_RCC_OscConfig+0x172>
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a2:	d10c      	bne.n	80013be <HAL_RCC_OscConfig+0x15a>
 80013a4:	4b6d      	ldr	r3, [pc, #436]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a6c      	ldr	r2, [pc, #432]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b6a      	ldr	r3, [pc, #424]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a69      	ldr	r2, [pc, #420]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e00b      	b.n	80013d6 <HAL_RCC_OscConfig+0x172>
 80013be:	4b67      	ldr	r3, [pc, #412]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a66      	ldr	r2, [pc, #408]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b64      	ldr	r3, [pc, #400]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a63      	ldr	r2, [pc, #396]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013d6:	4b61      	ldr	r3, [pc, #388]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	f023 020f 	bic.w	r2, r3, #15
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	495d      	ldr	r1, [pc, #372]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d059      	beq.n	80014a8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fab2 	bl	800095c <HAL_GetTick>
 80013f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fc:	e00a      	b.n	8001414 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fe:	f7ff faad 	bl	800095c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d902      	bls.n	8001414 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	f000 be29 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
 8001414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001418:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001420:	fa93 f3a3 	rbit	r3, r3
 8001424:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001428:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d102      	bne.n	8001446 <HAL_RCC_OscConfig+0x1e2>
 8001440:	4b46      	ldr	r3, [pc, #280]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	e015      	b.n	8001472 <HAL_RCC_OscConfig+0x20e>
 8001446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800145a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800145e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001462:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001476:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800147a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800147e:	fa92 f2a2 	rbit	r2, r2
 8001482:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001486:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800148a:	fab2 f282 	clz	r2, r2
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	f042 0220 	orr.w	r2, r2, #32
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	f002 021f 	and.w	r2, r2, #31
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0ab      	beq.n	80013fe <HAL_RCC_OscConfig+0x19a>
 80014a6:	e05c      	b.n	8001562 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fa58 	bl	800095c <HAL_GetTick>
 80014ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b0:	e00a      	b.n	80014c8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b2:	f7ff fa53 	bl	800095c <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d902      	bls.n	80014c8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	f000 bdcf 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
 80014c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80014dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d102      	bne.n	80014fa <HAL_RCC_OscConfig+0x296>
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	e015      	b.n	8001526 <HAL_RCC_OscConfig+0x2c2>
 80014fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800150e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001512:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001516:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_RCC_OscConfig+0x2f8>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800152e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001532:	fa92 f2a2 	rbit	r2, r2
 8001536:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800153a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800153e:	fab2 f282 	clz	r2, r2
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	f042 0220 	orr.w	r2, r2, #32
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	f002 021f 	and.w	r2, r2, #31
 800154e:	2101      	movs	r1, #1
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ab      	bne.n	80014b2 <HAL_RCC_OscConfig+0x24e>
 800155a:	e002      	b.n	8001562 <HAL_RCC_OscConfig+0x2fe>
 800155c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 816f 	beq.w	8001850 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001572:	4bd0      	ldr	r3, [pc, #832]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800157e:	4bcd      	ldr	r3, [pc, #820]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b08      	cmp	r3, #8
 8001588:	d16c      	bne.n	8001664 <HAL_RCC_OscConfig+0x400>
 800158a:	4bca      	ldr	r3, [pc, #808]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d166      	bne.n	8001664 <HAL_RCC_OscConfig+0x400>
 8001596:	2302      	movs	r3, #2
 8001598:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015a0:	fa93 f3a3 	rbit	r3, r3
 80015a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80015a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d102      	bne.n	80015c6 <HAL_RCC_OscConfig+0x362>
 80015c0:	4bbc      	ldr	r3, [pc, #752]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	e013      	b.n	80015ee <HAL_RCC_OscConfig+0x38a>
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015cc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80015ea:	4bb2      	ldr	r3, [pc, #712]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	2202      	movs	r2, #2
 80015f0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80015f4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015f8:	fa92 f2a2 	rbit	r2, r2
 80015fc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001600:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001604:	fab2 f282 	clz	r2, r2
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	f042 0220 	orr.w	r2, r2, #32
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	f002 021f 	and.w	r2, r2, #31
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f202 	lsl.w	r2, r1, r2
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <HAL_RCC_OscConfig+0x3cc>
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d002      	beq.n	8001630 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	f000 bd1b 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4ba0      	ldr	r3, [pc, #640]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	21f8      	movs	r1, #248	; 0xf8
 8001640:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001648:	fa91 f1a1 	rbit	r1, r1
 800164c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001650:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001654:	fab1 f181 	clz	r1, r1
 8001658:	b2c9      	uxtb	r1, r1
 800165a:	408b      	lsls	r3, r1
 800165c:	4995      	ldr	r1, [pc, #596]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	e0f5      	b.n	8001850 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8085 	beq.w	800177a <HAL_RCC_OscConfig+0x516>
 8001670:	2301      	movs	r3, #1
 8001672:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001682:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001690:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	461a      	mov	r2, r3
 8001698:	2301      	movs	r3, #1
 800169a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff f95e 	bl	800095c <HAL_GetTick>
 80016a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff f959 	bl	800095c <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d902      	bls.n	80016bc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	f000 bcd5 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80016c6:	fa93 f3a3 	rbit	r3, r3
 80016ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80016ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	095b      	lsrs	r3, r3, #5
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d102      	bne.n	80016ec <HAL_RCC_OscConfig+0x488>
 80016e6:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	e013      	b.n	8001714 <HAL_RCC_OscConfig+0x4b0>
 80016ec:	2302      	movs	r3, #2
 80016ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80016f6:	fa93 f3a3 	rbit	r3, r3
 80016fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016fe:	2302      	movs	r3, #2
 8001700:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001704:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001710:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	2202      	movs	r2, #2
 8001716:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800171a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800171e:	fa92 f2a2 	rbit	r2, r2
 8001722:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001726:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800172a:	fab2 f282 	clz	r2, r2
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	f042 0220 	orr.w	r2, r2, #32
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	f002 021f 	and.w	r2, r2, #31
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0af      	beq.n	80016a6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b5b      	ldr	r3, [pc, #364]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	21f8      	movs	r1, #248	; 0xf8
 8001756:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800175e:	fa91 f1a1 	rbit	r1, r1
 8001762:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001766:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800176a:	fab1 f181 	clz	r1, r1
 800176e:	b2c9      	uxtb	r1, r1
 8001770:	408b      	lsls	r3, r1
 8001772:	4950      	ldr	r1, [pc, #320]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
 8001778:	e06a      	b.n	8001850 <HAL_RCC_OscConfig+0x5ec>
 800177a:	2301      	movs	r3, #1
 800177c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001780:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800178c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800179a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	461a      	mov	r2, r3
 80017a2:	2300      	movs	r3, #0
 80017a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff f8d9 	bl	800095c <HAL_GetTick>
 80017aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff f8d4 	bl	800095c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d902      	bls.n	80017c6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	f000 bc50 	b.w	8002066 <HAL_RCC_OscConfig+0xe02>
 80017c6:	2302      	movs	r3, #2
 80017c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80017d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x592>
 80017f0:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	e013      	b.n	800181e <HAL_RCC_OscConfig+0x5ba>
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001808:	2302      	movs	r3, #2
 800180a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800180e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_RCC_OscConfig+0x650>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	2202      	movs	r2, #2
 8001820:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001824:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001828:	fa92 f2a2 	rbit	r2, r2
 800182c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001830:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001834:	fab2 f282 	clz	r2, r2
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f042 0220 	orr.w	r2, r2, #32
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	f002 021f 	and.w	r2, r2, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f202 	lsl.w	r2, r1, r2
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1af      	bne.n	80017b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80da 	beq.w	8001a14 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d069      	beq.n	800193e <HAL_RCC_OscConfig+0x6da>
 800186a:	2301      	movs	r3, #1
 800186c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800187c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_OscConfig+0x654>)
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	461a      	mov	r2, r3
 8001890:	2301      	movs	r3, #1
 8001892:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff f862 	bl	800095c <HAL_GetTick>
 8001898:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189c:	e00e      	b.n	80018bc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff f85d 	bl	800095c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d906      	bls.n	80018bc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e3d9      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	10908120 	.word	0x10908120
 80018bc:	2302      	movs	r3, #2
 80018be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018d2:	2202      	movs	r2, #2
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018ea:	2202      	movs	r2, #2
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	fa93 f2a3 	rbit	r2, r3
 80018f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80018fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	4ba5      	ldr	r3, [pc, #660]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001902:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001906:	2102      	movs	r1, #2
 8001908:	6019      	str	r1, [r3, #0]
 800190a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fa93 f1a3 	rbit	r1, r3
 8001914:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001918:	6019      	str	r1, [r3, #0]
  return result;
 800191a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0b0      	beq.n	800189e <HAL_RCC_OscConfig+0x63a>
 800193c:	e06a      	b.n	8001a14 <HAL_RCC_OscConfig+0x7b0>
 800193e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001954:	601a      	str	r2, [r3, #0]
  return result;
 8001956:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800195a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195c:	fab3 f383 	clz	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	4b8c      	ldr	r3, [pc, #560]	; (8001b98 <HAL_RCC_OscConfig+0x934>)
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	461a      	mov	r2, r3
 800196c:	2300      	movs	r3, #0
 800196e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7fe fff4 	bl	800095c <HAL_GetTick>
 8001974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	e009      	b.n	800198e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197a:	f7fe ffef 	bl	800095c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e36b      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 800198e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001992:	2202      	movs	r2, #2
 8001994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019aa:	2202      	movs	r2, #2
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	fa93 f2a3 	rbit	r2, r3
 80019b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019c2:	2202      	movs	r2, #2
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d6:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 80019d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019de:	2102      	movs	r1, #2
 80019e0:	6019      	str	r1, [r3, #0]
 80019e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fa93 f1a3 	rbit	r1, r3
 80019ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019f0:	6019      	str	r1, [r3, #0]
  return result;
 80019f2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1b2      	bne.n	800197a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8158 	beq.w	8001cd4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d112      	bne.n	8001a5c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b54      	ldr	r3, [pc, #336]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <HAL_RCC_OscConfig+0x938>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d11a      	bne.n	8001a9e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a68:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <HAL_RCC_OscConfig+0x938>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4b      	ldr	r2, [pc, #300]	; (8001b9c <HAL_RCC_OscConfig+0x938>)
 8001a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a72:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a74:	f7fe ff72 	bl	800095c <HAL_GetTick>
 8001a78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7fe ff6d 	bl	800095c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e2e9      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a92:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <HAL_RCC_OscConfig+0x938>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0ef      	beq.n	8001a7e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x852>
 8001aa8:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a39      	ldr	r2, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	e02f      	b.n	8001b16 <HAL_RCC_OscConfig+0x8b2>
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_OscConfig+0x876>
 8001ac0:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a30      	ldr	r2, [pc, #192]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001ad2:	f023 0304 	bic.w	r3, r3, #4
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	e01d      	b.n	8001b16 <HAL_RCC_OscConfig+0x8b2>
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d10c      	bne.n	8001afe <HAL_RCC_OscConfig+0x89a>
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4a2a      	ldr	r2, [pc, #168]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6213      	str	r3, [r2, #32]
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6213      	str	r3, [r2, #32]
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0x8b2>
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a24      	ldr	r2, [pc, #144]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6213      	str	r3, [r2, #32]
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d06b      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7fe ff1c 	bl	800095c <HAL_GetTick>
 8001b24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	e00b      	b.n	8001b42 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2a:	f7fe ff17 	bl	800095c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e291      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 8001b42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b46:	2202      	movs	r2, #2
 8001b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	fa93 f2a3 	rbit	r2, r3
 8001b54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b5e:	2202      	movs	r2, #2
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b70:	601a      	str	r2, [r3, #0]
  return result;
 8001b72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d109      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x93c>
 8001b8c:	4b01      	ldr	r3, [pc, #4]	; (8001b94 <HAL_RCC_OscConfig+0x930>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x958>
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	10908120 	.word	0x10908120
 8001b9c:	40007000 	.word	0x40007000
 8001ba0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	4bbb      	ldr	r3, [pc, #748]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	6011      	str	r1, [r2, #0]
 8001bc4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	fa92 f1a2 	rbit	r1, r2
 8001bce:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bd2:	6011      	str	r1, [r2, #0]
  return result;
 8001bd4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	fab2 f282 	clz	r2, r2
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f002 021f 	and.w	r2, r2, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d099      	beq.n	8001b2a <HAL_RCC_OscConfig+0x8c6>
 8001bf6:	e063      	b.n	8001cc0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7fe feb0 	bl	800095c <HAL_GetTick>
 8001bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	e00b      	b.n	8001c1a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7fe feab 	bl	800095c <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e225      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 8001c1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c1e:	2202      	movs	r2, #2
 8001c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c36:	2202      	movs	r2, #2
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c48:	601a      	str	r2, [r3, #0]
  return result;
 8001c4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f043 0302 	orr.w	r3, r3, #2
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d102      	bne.n	8001c6a <HAL_RCC_OscConfig+0xa06>
 8001c64:	4b90      	ldr	r3, [pc, #576]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	e00d      	b.n	8001c86 <HAL_RCC_OscConfig+0xa22>
 8001c6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c6e:	2202      	movs	r2, #2
 8001c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	4b89      	ldr	r3, [pc, #548]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	6011      	str	r1, [r2, #0]
 8001c8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	fa92 f1a2 	rbit	r1, r2
 8001c98:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001c9c:	6011      	str	r1, [r2, #0]
  return result;
 8001c9e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f002 021f 	and.w	r2, r2, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1a0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc8:	4b77      	ldr	r3, [pc, #476]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	4a76      	ldr	r2, [pc, #472]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 81c2 	beq.w	8002064 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce0:	4b71      	ldr	r3, [pc, #452]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	f000 819c 	beq.w	8002026 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	f040 8114 	bne.w	8001f22 <HAL_RCC_OscConfig+0xcbe>
 8001cfa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001cfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d12:	601a      	str	r2, [r3, #0]
  return result;
 8001d14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe fe14 	bl	800095c <HAL_GetTick>
 8001d34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d38:	e009      	b.n	8001d4e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7fe fe0f 	bl	800095c <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e18b      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 8001d4e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d66:	601a      	str	r2, [r3, #0]
  return result;
 8001d68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_OscConfig+0xb24>
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	e01b      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb5c>
 8001d88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fa93 f2a3 	rbit	r2, r3
 8001d9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001da6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dc8:	6011      	str	r1, [r2, #0]
 8001dca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	fa92 f1a2 	rbit	r1, r2
 8001dd4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dd8:	6011      	str	r1, [r2, #0]
  return result;
 8001dda:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	fab2 f282 	clz	r2, r2
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f002 021f 	and.w	r2, r2, #31
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d19e      	bne.n	8001d3a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	4925      	ldr	r1, [pc, #148]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
 8001e18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e30:	601a      	str	r2, [r3, #0]
  return result;
 8001e32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e36:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fd85 	bl	800095c <HAL_GetTick>
 8001e52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e56:	e009      	b.n	8001e6c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e58:	f7fe fd80 	bl	800095c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0fc      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 8001e6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e84:	601a      	str	r2, [r3, #0]
  return result;
 8001e86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_RCC_OscConfig+0xc48>
 8001ea0:	4b01      	ldr	r3, [pc, #4]	; (8001ea8 <HAL_RCC_OscConfig+0xc44>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	e01e      	b.n	8001ee4 <HAL_RCC_OscConfig+0xc80>
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	fa93 f2a3 	rbit	r2, r3
 8001eda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_OscConfig+0xe0c>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ee8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eec:	6011      	str	r1, [r2, #0]
 8001eee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	fa92 f1a2 	rbit	r1, r2
 8001ef8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001efc:	6011      	str	r1, [r2, #0]
  return result;
 8001efe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	fab2 f282 	clz	r2, r2
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	f042 0220 	orr.w	r2, r2, #32
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	f002 021f 	and.w	r2, r2, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d09b      	beq.n	8001e58 <HAL_RCC_OscConfig+0xbf4>
 8001f20:	e0a0      	b.n	8002064 <HAL_RCC_OscConfig+0xe00>
 8001f22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	fa93 f2a3 	rbit	r2, r3
 8001f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3a:	601a      	str	r2, [r3, #0]
  return result;
 8001f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f40:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	461a      	mov	r2, r3
 8001f54:	2300      	movs	r3, #0
 8001f56:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fd00 	bl	800095c <HAL_GetTick>
 8001f5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f60:	e009      	b.n	8001f76 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe fcfb 	bl	800095c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e077      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
 8001f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	601a      	str	r2, [r3, #0]
  return result;
 8001f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <HAL_RCC_OscConfig+0xd4c>
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCC_OscConfig+0xe0c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e01b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd84>
 8001fb0:	f107 0320 	add.w	r3, r7, #32
 8001fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f107 0320 	add.w	r3, r7, #32
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fa93 f2a3 	rbit	r2, r3
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	f107 0318 	add.w	r3, r7, #24
 8001fce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f107 0318 	add.w	r3, r7, #24
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <HAL_RCC_OscConfig+0xe0c>)
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	f107 0210 	add.w	r2, r7, #16
 8001fec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ff0:	6011      	str	r1, [r2, #0]
 8001ff2:	f107 0210 	add.w	r2, r7, #16
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	fa92 f1a2 	rbit	r1, r2
 8001ffc:	f107 020c 	add.w	r2, r7, #12
 8002000:	6011      	str	r1, [r2, #0]
  return result;
 8002002:	f107 020c 	add.w	r2, r7, #12
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	fab2 f282 	clz	r2, r2
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f042 0220 	orr.w	r2, r2, #32
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f002 021f 	and.w	r2, r2, #31
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f202 	lsl.w	r2, r1, r2
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d19e      	bne.n	8001f62 <HAL_RCC_OscConfig+0xcfe>
 8002024:	e01e      	b.n	8002064 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e018      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_RCC_OscConfig+0xe0c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800203c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	429a      	cmp	r2, r3
 800204c:	d108      	bne.n	8002060 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800204e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b09e      	sub	sp, #120	; 0x78
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e162      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b90      	ldr	r3, [pc, #576]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d910      	bls.n	80020bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b8d      	ldr	r3, [pc, #564]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	498b      	ldr	r1, [pc, #556]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e14a      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b82      	ldr	r3, [pc, #520]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	497f      	ldr	r1, [pc, #508]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80dc 	beq.w	80022a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d13c      	bne.n	800216a <HAL_RCC_ClockConfig+0xf6>
 80020f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d102      	bne.n	800211a <HAL_RCC_ClockConfig+0xa6>
 8002114:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	e00f      	b.n	800213a <HAL_RCC_ClockConfig+0xc6>
 800211a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800211e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	667b      	str	r3, [r7, #100]	; 0x64
 8002128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212c:	663b      	str	r3, [r7, #96]	; 0x60
 800212e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002136:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800213e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002140:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002142:	fa92 f2a2 	rbit	r2, r2
 8002146:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800214a:	fab2 f282 	clz	r2, r2
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	f042 0220 	orr.w	r2, r2, #32
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f002 021f 	and.w	r2, r2, #31
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d17b      	bne.n	800225e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0f3      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d13c      	bne.n	80021ec <HAL_RCC_ClockConfig+0x178>
 8002172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002176:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d102      	bne.n	800219c <HAL_RCC_ClockConfig+0x128>
 8002196:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	e00f      	b.n	80021bc <HAL_RCC_ClockConfig+0x148>
 800219c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a4:	fa93 f3a3 	rbit	r3, r3
 80021a8:	647b      	str	r3, [r7, #68]	; 0x44
 80021aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
 80021b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b8:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80021c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021c4:	fa92 f2a2 	rbit	r2, r2
 80021c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80021ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021cc:	fab2 f282 	clz	r2, r2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f042 0220 	orr.w	r2, r2, #32
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f002 021f 	and.w	r2, r2, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d13a      	bne.n	800225e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0b2      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
 80021ec:	2302      	movs	r3, #2
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_RCC_ClockConfig+0x1a0>
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	e00d      	b.n	8002230 <HAL_RCC_ClockConfig+0x1bc>
 8002214:	2302      	movs	r3, #2
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	2302      	movs	r3, #2
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	2202      	movs	r2, #2
 8002232:	61ba      	str	r2, [r7, #24]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	fa92 f2a2 	rbit	r2, r2
 800223a:	617a      	str	r2, [r7, #20]
  return result;
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	fab2 f282 	clz	r2, r2
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f042 0220 	orr.w	r2, r2, #32
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f002 021f 	and.w	r2, r2, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f202 	lsl.w	r2, r1, r2
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e079      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	491a      	ldr	r1, [pc, #104]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002270:	f7fe fb74 	bl	800095c <HAL_GetTick>
 8002274:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	e00a      	b.n	800228e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7fe fb70 	bl	800095c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e061      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_RCC_ClockConfig+0x260>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 020c 	and.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	429a      	cmp	r2, r3
 800229e:	d1eb      	bne.n	8002278 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d214      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4906      	ldr	r1, [pc, #24]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <HAL_RCC_ClockConfig+0x25c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e040      	b.n	8002352 <HAL_RCC_ClockConfig+0x2de>
 80022d0:	40022000 	.word	0x40022000
 80022d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	491a      	ldr	r1, [pc, #104]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4912      	ldr	r1, [pc, #72]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002316:	f000 f829 	bl	800236c <HAL_RCC_GetSysClockFreq>
 800231a:	4601      	mov	r1, r0
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_RCC_ClockConfig+0x2e8>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002324:	22f0      	movs	r2, #240	; 0xf0
 8002326:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	fa92 f2a2 	rbit	r2, r2
 800232e:	60fa      	str	r2, [r7, #12]
  return result;
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	40d3      	lsrs	r3, r2
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x2ec>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	fa21 f303 	lsr.w	r3, r1, r3
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_RCC_ClockConfig+0x2f0>)
 8002344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_RCC_ClockConfig+0x2f4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fa2a 	bl	80007a4 <HAL_InitTick>
  
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3778      	adds	r7, #120	; 0x78
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	080046bc 	.word	0x080046bc
 8002364:	20000000 	.word	0x20000000
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b08b      	sub	sp, #44	; 0x2c
 8002370:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d002      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x30>
 8002396:	2b08      	cmp	r3, #8
 8002398:	d003      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x36>
 800239a:	e03c      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc4>)
 800239e:	623b      	str	r3, [r7, #32]
      break;
 80023a0:	e03c      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	fa92 f2a2 	rbit	r2, r2
 80023b4:	607a      	str	r2, [r7, #4]
  return result;
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	fab2 f282 	clz	r2, r2
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	40d3      	lsrs	r3, r2
 80023c0:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	220f      	movs	r2, #15
 80023d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	fa92 f2a2 	rbit	r2, r2
 80023d8:	60fa      	str	r2, [r7, #12]
  return result;
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	fab2 f282 	clz	r2, r2
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	40d3      	lsrs	r3, r2
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
 8002404:	e004      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	4a0c      	ldr	r2, [pc, #48]	; (800243c <HAL_RCC_GetSysClockFreq+0xd0>)
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	623b      	str	r3, [r7, #32]
      break;
 8002414:	e002      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002418:	623b      	str	r3, [r7, #32]
      break;
 800241a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241c:	6a3b      	ldr	r3, [r7, #32]
}
 800241e:	4618      	mov	r0, r3
 8002420:	372c      	adds	r7, #44	; 0x2c
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	007a1200 	.word	0x007a1200
 8002434:	080046d4 	.word	0x080046d4
 8002438:	080046e4 	.word	0x080046e4
 800243c:	003d0900 	.word	0x003d0900

08002440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_RCC_GetHCLKFreq+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800245e:	f7ff ffef 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002462:	4601      	mov	r1, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800246c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002470:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	603a      	str	r2, [r7, #0]
  return result;
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	40d3      	lsrs	r3, r2
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	080046cc 	.word	0x080046cc

0800249c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	220f      	movs	r2, #15
 80024aa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0203 	and.w	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_RCC_GetClockConfig+0x5c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	08db      	lsrs	r3, r3, #3
 80024d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_RCC_GetClockConfig+0x60>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0207 	and.w	r2, r3, #7
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	601a      	str	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40022000 	.word	0x40022000

08002500 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b092      	sub	sp, #72	; 0x48
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80d4 	beq.w	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002524:	4b4e      	ldr	r3, [pc, #312]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10e      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	4b4b      	ldr	r3, [pc, #300]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4a4a      	ldr	r2, [pc, #296]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253a:	61d3      	str	r3, [r2, #28]
 800253c:	4b48      	ldr	r3, [pc, #288]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002548:	2301      	movs	r3, #1
 800254a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254e:	4b45      	ldr	r3, [pc, #276]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d118      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255a:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a41      	ldr	r2, [pc, #260]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002564:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002566:	f7fe f9f9 	bl	800095c <HAL_GetTick>
 800256a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	e008      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256e:	f7fe f9f5 	bl	800095c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b64      	cmp	r3, #100	; 0x64
 800257a:	d901      	bls.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e169      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	4b38      	ldr	r3, [pc, #224]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800258c:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002594:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8084 	beq.w	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d07c      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025ac:	4b2c      	ldr	r3, [pc, #176]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	461a      	mov	r2, r3
 80025d6:	2301      	movs	r3, #1
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	461a      	mov	r2, r3
 80025fa:	2300      	movs	r3, #0
 80025fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025fe:	4a18      	ldr	r2, [pc, #96]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002602:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d04b      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe f9a5 	bl	800095c <HAL_GetTick>
 8002612:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe f9a1 	bl	800095c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e113      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800262c:	2302      	movs	r3, #2
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
 8002638:	2302      	movs	r3, #2
 800263a:	623b      	str	r3, [r7, #32]
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	61fb      	str	r3, [r7, #28]
  return result;
 8002644:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d108      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800265a:	4b01      	ldr	r3, [pc, #4]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	e00d      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002660:	40021000 	.word	0x40021000
 8002664:	40007000 	.word	0x40007000
 8002668:	10908100 	.word	0x10908100
 800266c:	2302      	movs	r3, #2
 800266e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	4b78      	ldr	r3, [pc, #480]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	2202      	movs	r2, #2
 800267e:	613a      	str	r2, [r7, #16]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	fa92 f2a2 	rbit	r2, r2
 8002686:	60fa      	str	r2, [r7, #12]
  return result;
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	fab2 f282 	clz	r2, r2
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f002 021f 	and.w	r2, r2, #31
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f202 	lsl.w	r2, r1, r2
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0b7      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026a6:	4b6d      	ldr	r3, [pc, #436]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	496a      	ldr	r1, [pc, #424]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d105      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026d8:	4b60      	ldr	r3, [pc, #384]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	f023 0203 	bic.w	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	495d      	ldr	r1, [pc, #372]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026f6:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	4956      	ldr	r1, [pc, #344]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002704:	4313      	orrs	r3, r2
 8002706:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002714:	4b51      	ldr	r3, [pc, #324]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	494e      	ldr	r1, [pc, #312]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002722:	4313      	orrs	r3, r2
 8002724:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002732:	4b4a      	ldr	r3, [pc, #296]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f023 0210 	bic.w	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4947      	ldr	r1, [pc, #284]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002740:	4313      	orrs	r3, r2
 8002742:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002750:	4b42      	ldr	r3, [pc, #264]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	493f      	ldr	r1, [pc, #252]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800275e:	4313      	orrs	r3, r2
 8002760:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d008      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f023 0220 	bic.w	r2, r3, #32
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	4938      	ldr	r1, [pc, #224]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800277c:	4313      	orrs	r3, r2
 800277e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	4930      	ldr	r1, [pc, #192]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800279a:	4313      	orrs	r3, r2
 800279c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027aa:	4b2c      	ldr	r3, [pc, #176]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	4929      	ldr	r1, [pc, #164]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	4921      	ldr	r1, [pc, #132]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	491a      	ldr	r1, [pc, #104]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	4912      	ldr	r1, [pc, #72]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002812:	4313      	orrs	r3, r2
 8002814:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	490b      	ldr	r1, [pc, #44]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002830:	4313      	orrs	r3, r2
 8002832:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	4903      	ldr	r1, [pc, #12]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800284e:	4313      	orrs	r3, r2
 8002850:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3748      	adds	r7, #72	; 0x48
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000

08002860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e09d      	b.n	80029ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2b00      	cmp	r3, #0
 8002878:	d108      	bne.n	800288c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002882:	d009      	beq.n	8002898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
 800288a:	e005      	b.n	8002898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fd fef0 	bl	8000698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028d8:	d902      	bls.n	80028e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e002      	b.n	80028e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80028ee:	d007      	beq.n	8002900 <HAL_SPI_Init+0xa0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028f8:	d002      	beq.n	8002900 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	ea42 0103 	orr.w	r1, r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	f003 0204 	and.w	r2, r3, #4
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800297c:	ea42 0103 	orr.w	r1, r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800299c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e049      	b.n	8002a5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f841 	bl	8002a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f000 f9f1 	bl	8002ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d001      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e04a      	b.n	8002b26 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <HAL_TIM_Base_Start_IT+0xbc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d018      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d013      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1c      	ldr	r2, [pc, #112]	; (8002b3c <HAL_TIM_Base_Start_IT+0xc4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d009      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1a      	ldr	r2, [pc, #104]	; (8002b40 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d115      	bne.n	8002b10 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_TIM_Base_Start_IT+0xd0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d015      	beq.n	8002b22 <HAL_TIM_Base_Start_IT+0xaa>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d011      	beq.n	8002b22 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0e:	e008      	b.n	8002b22 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e000      	b.n	8002b24 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40013400 	.word	0x40013400
 8002b44:	40014000 	.word	0x40014000
 8002b48:	00010007 	.word	0x00010007

08002b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d122      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d11b      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0202 	mvn.w	r2, #2
 8002b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f905 	bl	8002d9e <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8f7 	bl	8002d8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f908 	bl	8002db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d122      	bne.n	8002bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d11b      	bne.n	8002bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0204 	mvn.w	r2, #4
 8002bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8db 	bl	8002d9e <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8cd 	bl	8002d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f8de 	bl	8002db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d122      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d11b      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0208 	mvn.w	r2, #8
 8002c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2204      	movs	r2, #4
 8002c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f8b1 	bl	8002d9e <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f8a3 	bl	8002d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f8b4 	bl	8002db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d122      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d11b      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0210 	mvn.w	r2, #16
 8002c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f887 	bl	8002d9e <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f879 	bl	8002d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f88a 	bl	8002db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d107      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0201 	mvn.w	r2, #1
 8002cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fd fc60 	bl	8000590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	d10e      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce8:	2b80      	cmp	r3, #128	; 0x80
 8002cea:	d107      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f90a 	bl	8002f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0a:	d10e      	bne.n	8002d2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d16:	2b80      	cmp	r3, #128	; 0x80
 8002d18:	d107      	bne.n	8002d2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f8fd 	bl	8002f24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d10e      	bne.n	8002d56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b40      	cmp	r3, #64	; 0x40
 8002d44:	d107      	bne.n	8002d56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f838 	bl	8002dc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d10e      	bne.n	8002d82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	d107      	bne.n	8002d82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f06f 0220 	mvn.w	r2, #32
 8002d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f8bd 	bl	8002efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3c      	ldr	r2, [pc, #240]	; (8002ee0 <TIM_Base_SetConfig+0x104>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00f      	beq.n	8002e14 <TIM_Base_SetConfig+0x38>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfa:	d00b      	beq.n	8002e14 <TIM_Base_SetConfig+0x38>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a39      	ldr	r2, [pc, #228]	; (8002ee4 <TIM_Base_SetConfig+0x108>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <TIM_Base_SetConfig+0x38>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a38      	ldr	r2, [pc, #224]	; (8002ee8 <TIM_Base_SetConfig+0x10c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_Base_SetConfig+0x38>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a37      	ldr	r2, [pc, #220]	; (8002eec <TIM_Base_SetConfig+0x110>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d108      	bne.n	8002e26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2d      	ldr	r2, [pc, #180]	; (8002ee0 <TIM_Base_SetConfig+0x104>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01b      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e34:	d017      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <TIM_Base_SetConfig+0x108>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a29      	ldr	r2, [pc, #164]	; (8002ee8 <TIM_Base_SetConfig+0x10c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00f      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a28      	ldr	r2, [pc, #160]	; (8002eec <TIM_Base_SetConfig+0x110>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <TIM_Base_SetConfig+0x114>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d007      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <TIM_Base_SetConfig+0x118>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_Base_SetConfig+0x8a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a25      	ldr	r2, [pc, #148]	; (8002ef8 <TIM_Base_SetConfig+0x11c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d108      	bne.n	8002e78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a10      	ldr	r2, [pc, #64]	; (8002ee0 <TIM_Base_SetConfig+0x104>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00f      	beq.n	8002ec4 <TIM_Base_SetConfig+0xe8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a11      	ldr	r2, [pc, #68]	; (8002eec <TIM_Base_SetConfig+0x110>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00b      	beq.n	8002ec4 <TIM_Base_SetConfig+0xe8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a10      	ldr	r2, [pc, #64]	; (8002ef0 <TIM_Base_SetConfig+0x114>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <TIM_Base_SetConfig+0xe8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <TIM_Base_SetConfig+0x118>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <TIM_Base_SetConfig+0xe8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <TIM_Base_SetConfig+0x11c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d103      	bne.n	8002ecc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	615a      	str	r2, [r3, #20]
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40000800 	.word	0x40000800
 8002eec:	40013400 	.word	0x40013400
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014400 	.word	0x40014400
 8002ef8:	40014800 	.word	0x40014800

08002efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f40:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002f44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4013      	ands	r3, r2
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f6e:	b084      	sub	sp, #16
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	f107 0014 	add.w	r0, r7, #20
 8002f7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	b004      	add	sp, #16
 8002fae:	4770      	bx	lr

08002fb0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fc2:	2b84      	cmp	r3, #132	; 0x84
 8002fc4:	d005      	beq.n	8002fd2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002fc6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4413      	add	r3, r2
 8002fce:	3303      	adds	r3, #3
 8002fd0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002fe4:	f000 faec 	bl	80035c0 <vTaskStartScheduler>
  
  return osOK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	bd80      	pop	{r7, pc}

08002fee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff0:	b089      	sub	sp, #36	; 0x24
 8002ff2:	af04      	add	r7, sp, #16
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d020      	beq.n	8003042 <osThreadCreate+0x54>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01c      	beq.n	8003042 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685c      	ldr	r4, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681d      	ldr	r5, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691e      	ldr	r6, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff ffc8 	bl	8002fb0 <makeFreeRtosPriority>
 8003020:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800302a:	9202      	str	r2, [sp, #8]
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	9100      	str	r1, [sp, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	4632      	mov	r2, r6
 8003034:	4629      	mov	r1, r5
 8003036:	4620      	mov	r0, r4
 8003038:	f000 f8ed 	bl	8003216 <xTaskCreateStatic>
 800303c:	4603      	mov	r3, r0
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e01c      	b.n	800307c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685c      	ldr	r4, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800304e:	b29e      	uxth	r6, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ffaa 	bl	8002fb0 <makeFreeRtosPriority>
 800305c:	4602      	mov	r2, r0
 800305e:	f107 030c 	add.w	r3, r7, #12
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	9200      	str	r2, [sp, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	4632      	mov	r2, r6
 800306a:	4629      	mov	r1, r5
 800306c:	4620      	mov	r0, r4
 800306e:	f000 f92e 	bl	80032ce <xTaskCreate>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d001      	beq.n	800307c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003078:	2300      	movs	r3, #0
 800307a:	e000      	b.n	800307e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800307c:	68fb      	ldr	r3, [r7, #12]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003086 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <osDelay+0x16>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	e000      	b.n	800309e <osDelay+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fa5a 	bl	8003558 <vTaskDelay>
  
  return osOK;
 80030a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f103 0208 	add.w	r2, r3, #8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f04f 32ff 	mov.w	r2, #4294967295
 80030c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f103 0208 	add.w	r2, r3, #8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f103 0208 	add.w	r2, r3, #8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	601a      	str	r2, [r3, #0]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	d103      	bne.n	8003170 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e00c      	b.n	800318a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3308      	adds	r3, #8
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e002      	b.n	800317e <vListInsert+0x2e>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d2f6      	bcs.n	8003178 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6892      	ldr	r2, [r2, #8]
 80031d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6852      	ldr	r2, [r2, #4]
 80031e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d103      	bne.n	80031f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	1e5a      	subs	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003216:	b580      	push	{r7, lr}
 8003218:	b08e      	sub	sp, #56	; 0x38
 800321a:	af04      	add	r7, sp, #16
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <xTaskCreateStatic+0x46>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	61fb      	str	r3, [r7, #28]
}
 8003258:	bf00      	nop
 800325a:	e7fe      	b.n	800325a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800325c:	23b4      	movs	r3, #180	; 0xb4
 800325e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2bb4      	cmp	r3, #180	; 0xb4
 8003264:	d00a      	beq.n	800327c <xTaskCreateStatic+0x66>
	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	61bb      	str	r3, [r7, #24]
}
 8003278:	bf00      	nop
 800327a:	e7fe      	b.n	800327a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800327c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01e      	beq.n	80032c0 <xTaskCreateStatic+0xaa>
 8003282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01b      	beq.n	80032c0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003290:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	2202      	movs	r2, #2
 8003296:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800329a:	2300      	movs	r3, #0
 800329c:	9303      	str	r3, [sp, #12]
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	9302      	str	r3, [sp, #8]
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f850 	bl	8003358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032ba:	f000 f8e3 	bl	8003484 <prvAddNewTaskToReadyList>
 80032be:	e001      	b.n	80032c4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032c4:	697b      	ldr	r3, [r7, #20]
	}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3728      	adds	r7, #40	; 0x28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b08c      	sub	sp, #48	; 0x30
 80032d2:	af04      	add	r7, sp, #16
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fef8 	bl	80040d8 <pvPortMalloc>
 80032e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80032f0:	20b4      	movs	r0, #180	; 0xb4
 80032f2:	f000 fef1 	bl	80040d8 <pvPortMalloc>
 80032f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
 8003304:	e005      	b.n	8003312 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f000 ffaa 	bl	8004260 <vPortFree>
 800330c:	e001      	b.n	8003312 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d017      	beq.n	8003348 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003320:	88fa      	ldrh	r2, [r7, #6]
 8003322:	2300      	movs	r3, #0
 8003324:	9303      	str	r3, [sp, #12]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f80e 	bl	8003358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800333c:	69f8      	ldr	r0, [r7, #28]
 800333e:	f000 f8a1 	bl	8003484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003342:	2301      	movs	r3, #1
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e002      	b.n	800334e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003348:	f04f 33ff 	mov.w	r3, #4294967295
 800334c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800334e:	69bb      	ldr	r3, [r7, #24]
	}
 8003350:	4618      	mov	r0, r3
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003370:	3b01      	subs	r3, #1
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f023 0307 	bic.w	r3, r3, #7
 800337e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	617b      	str	r3, [r7, #20]
}
 800339c:	bf00      	nop
 800339e:	e7fe      	b.n	800339e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	e012      	b.n	80033cc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	4413      	add	r3, r2
 80033ac:	7819      	ldrb	r1, [r3, #0]
 80033ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	3334      	adds	r3, #52	; 0x34
 80033b6:	460a      	mov	r2, r1
 80033b8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4413      	add	r3, r2
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3301      	adds	r3, #1
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b0f      	cmp	r3, #15
 80033d0:	d9e9      	bls.n	80033a6 <prvInitialiseNewTask+0x4e>
 80033d2:	e000      	b.n	80033d6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80033d4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	2b06      	cmp	r3, #6
 80033e2:	d901      	bls.n	80033e8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033e4:	2306      	movs	r3, #6
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	2200      	movs	r2, #0
 80033f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	3304      	adds	r3, #4
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fe75 	bl	80030ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	3318      	adds	r3, #24
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fe70 	bl	80030ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	f1c3 0207 	rsb	r2, r3, #7
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	2200      	movs	r2, #0
 8003428:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	2200      	movs	r2, #0
 8003430:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	334c      	adds	r3, #76	; 0x4c
 8003438:	2260      	movs	r2, #96	; 0x60
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f001 f84b 	bl	80044d8 <memset>
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <prvInitialiseNewTask+0x120>)
 8003446:	651a      	str	r2, [r3, #80]	; 0x50
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	4a0c      	ldr	r2, [pc, #48]	; (800347c <prvInitialiseNewTask+0x124>)
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <prvInitialiseNewTask+0x128>)
 8003452:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	69b8      	ldr	r0, [r7, #24]
 800345a:	f000 fc2b 	bl	8003cb4 <pxPortInitialiseStack>
 800345e:	4602      	mov	r2, r0
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	08004714 	.word	0x08004714
 800347c:	08004734 	.word	0x08004734
 8003480:	080046f4 	.word	0x080046f4

08003484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800348c:	f000 fd42 	bl	8003f14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003490:	4b2a      	ldr	r3, [pc, #168]	; (800353c <prvAddNewTaskToReadyList+0xb8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	4a29      	ldr	r2, [pc, #164]	; (800353c <prvAddNewTaskToReadyList+0xb8>)
 8003498:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800349a:	4b29      	ldr	r3, [pc, #164]	; (8003540 <prvAddNewTaskToReadyList+0xbc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034a2:	4a27      	ldr	r2, [pc, #156]	; (8003540 <prvAddNewTaskToReadyList+0xbc>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034a8:	4b24      	ldr	r3, [pc, #144]	; (800353c <prvAddNewTaskToReadyList+0xb8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d110      	bne.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034b0:	f000 fad2 	bl	8003a58 <prvInitialiseTaskLists>
 80034b4:	e00d      	b.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <prvAddNewTaskToReadyList+0xc0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <prvAddNewTaskToReadyList+0xbc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d802      	bhi.n	80034d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034cc:	4a1c      	ldr	r2, [pc, #112]	; (8003540 <prvAddNewTaskToReadyList+0xbc>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <prvAddNewTaskToReadyList+0xc4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3301      	adds	r3, #1
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <prvAddNewTaskToReadyList+0xc4>)
 80034da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	2201      	movs	r2, #1
 80034e2:	409a      	lsls	r2, r3
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <prvAddNewTaskToReadyList+0xc8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	4a18      	ldr	r2, [pc, #96]	; (800354c <prvAddNewTaskToReadyList+0xc8>)
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4a15      	ldr	r2, [pc, #84]	; (8003550 <prvAddNewTaskToReadyList+0xcc>)
 80034fc:	441a      	add	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f7ff fdff 	bl	8003108 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800350a:	f000 fd33 	bl	8003f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <prvAddNewTaskToReadyList+0xc0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00e      	beq.n	8003534 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <prvAddNewTaskToReadyList+0xbc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	429a      	cmp	r2, r3
 8003522:	d207      	bcs.n	8003534 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <prvAddNewTaskToReadyList+0xd0>)
 8003526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000444 	.word	0x20000444
 8003540:	20000344 	.word	0x20000344
 8003544:	20000450 	.word	0x20000450
 8003548:	20000460 	.word	0x20000460
 800354c:	2000044c 	.word	0x2000044c
 8003550:	20000348 	.word	0x20000348
 8003554:	e000ed04 	.word	0xe000ed04

08003558 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d017      	beq.n	800359a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <vTaskDelay+0x60>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <vTaskDelay+0x30>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	60bb      	str	r3, [r7, #8]
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003588:	f000 f884 	bl	8003694 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800358c:	2100      	movs	r1, #0
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fb2a 	bl	8003be8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003594:	f000 f88c 	bl	80036b0 <xTaskResumeAll>
 8003598:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <vTaskDelay+0x64>)
 80035a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	2000046c 	.word	0x2000046c
 80035bc:	e000ed04 	.word	0xe000ed04

080035c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035ce:	463a      	mov	r2, r7
 80035d0:	1d39      	adds	r1, r7, #4
 80035d2:	f107 0308 	add.w	r3, r7, #8
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc fdfa 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	9202      	str	r2, [sp, #8]
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	2300      	movs	r3, #0
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	2300      	movs	r3, #0
 80035ec:	460a      	mov	r2, r1
 80035ee:	4921      	ldr	r1, [pc, #132]	; (8003674 <vTaskStartScheduler+0xb4>)
 80035f0:	4821      	ldr	r0, [pc, #132]	; (8003678 <vTaskStartScheduler+0xb8>)
 80035f2:	f7ff fe10 	bl	8003216 <xTaskCreateStatic>
 80035f6:	4603      	mov	r3, r0
 80035f8:	4a20      	ldr	r2, [pc, #128]	; (800367c <vTaskStartScheduler+0xbc>)
 80035fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <vTaskStartScheduler+0xbc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003604:	2301      	movs	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	e001      	b.n	800360e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d11b      	bne.n	800364c <vTaskStartScheduler+0x8c>
	__asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	613b      	str	r3, [r7, #16]
}
 8003626:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003628:	4b15      	ldr	r3, [pc, #84]	; (8003680 <vTaskStartScheduler+0xc0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	334c      	adds	r3, #76	; 0x4c
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <vTaskStartScheduler+0xc4>)
 8003630:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <vTaskStartScheduler+0xc8>)
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800363a:	4b14      	ldr	r3, [pc, #80]	; (800368c <vTaskStartScheduler+0xcc>)
 800363c:	2201      	movs	r2, #1
 800363e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <vTaskStartScheduler+0xd0>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003646:	f000 fbc3 	bl	8003dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800364a:	e00e      	b.n	800366a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003652:	d10a      	bne.n	800366a <vTaskStartScheduler+0xaa>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	60fb      	str	r3, [r7, #12]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <vTaskStartScheduler+0xa8>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	080046b4 	.word	0x080046b4
 8003678:	08003a29 	.word	0x08003a29
 800367c:	20000468 	.word	0x20000468
 8003680:	20000344 	.word	0x20000344
 8003684:	20000010 	.word	0x20000010
 8003688:	20000464 	.word	0x20000464
 800368c:	20000450 	.word	0x20000450
 8003690:	20000448 	.word	0x20000448

08003694 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <vTaskSuspendAll+0x18>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	4a03      	ldr	r2, [pc, #12]	; (80036ac <vTaskSuspendAll+0x18>)
 80036a0:	6013      	str	r3, [r2, #0]
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	2000046c 	.word	0x2000046c

080036b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036be:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <xTaskResumeAll+0x114>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <xTaskResumeAll+0x2c>
	__asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	603b      	str	r3, [r7, #0]
}
 80036d8:	bf00      	nop
 80036da:	e7fe      	b.n	80036da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036dc:	f000 fc1a 	bl	8003f14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036e0:	4b38      	ldr	r3, [pc, #224]	; (80037c4 <xTaskResumeAll+0x114>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	4a37      	ldr	r2, [pc, #220]	; (80037c4 <xTaskResumeAll+0x114>)
 80036e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ea:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <xTaskResumeAll+0x114>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d161      	bne.n	80037b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036f2:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <xTaskResumeAll+0x118>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d05d      	beq.n	80037b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036fa:	e02e      	b.n	800375a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036fc:	4b33      	ldr	r3, [pc, #204]	; (80037cc <xTaskResumeAll+0x11c>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3318      	adds	r3, #24
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fd5a 	bl	80031c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3304      	adds	r3, #4
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fd55 	bl	80031c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	2201      	movs	r2, #1
 800371e:	409a      	lsls	r2, r3
 8003720:	4b2b      	ldr	r3, [pc, #172]	; (80037d0 <xTaskResumeAll+0x120>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4313      	orrs	r3, r2
 8003726:	4a2a      	ldr	r2, [pc, #168]	; (80037d0 <xTaskResumeAll+0x120>)
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4a27      	ldr	r2, [pc, #156]	; (80037d4 <xTaskResumeAll+0x124>)
 8003738:	441a      	add	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3304      	adds	r3, #4
 800373e:	4619      	mov	r1, r3
 8003740:	4610      	mov	r0, r2
 8003742:	f7ff fce1 	bl	8003108 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374a:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <xTaskResumeAll+0x128>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <xTaskResumeAll+0x12c>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800375a:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <xTaskResumeAll+0x11c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1cc      	bne.n	80036fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003768:	f000 fa18 	bl	8003b9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800376c:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <xTaskResumeAll+0x130>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d010      	beq.n	800379a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003778:	f000 f836 	bl	80037e8 <xTaskIncrementTick>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <xTaskResumeAll+0x12c>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3b01      	subs	r3, #1
 800378c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f1      	bne.n	8003778 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <xTaskResumeAll+0x130>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <xTaskResumeAll+0x12c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037a2:	2301      	movs	r3, #1
 80037a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <xTaskResumeAll+0x134>)
 80037a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037b6:	f000 fbdd 	bl	8003f74 <vPortExitCritical>

	return xAlreadyYielded;
 80037ba:	68bb      	ldr	r3, [r7, #8]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2000046c 	.word	0x2000046c
 80037c8:	20000444 	.word	0x20000444
 80037cc:	20000404 	.word	0x20000404
 80037d0:	2000044c 	.word	0x2000044c
 80037d4:	20000348 	.word	0x20000348
 80037d8:	20000344 	.word	0x20000344
 80037dc:	20000458 	.word	0x20000458
 80037e0:	20000454 	.word	0x20000454
 80037e4:	e000ed04 	.word	0xe000ed04

080037e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f2:	4b51      	ldr	r3, [pc, #324]	; (8003938 <xTaskIncrementTick+0x150>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 808d 	bne.w	8003916 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037fc:	4b4f      	ldr	r3, [pc, #316]	; (800393c <xTaskIncrementTick+0x154>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3301      	adds	r3, #1
 8003802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003804:	4a4d      	ldr	r2, [pc, #308]	; (800393c <xTaskIncrementTick+0x154>)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d120      	bne.n	8003852 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <xTaskIncrementTick+0x158>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <xTaskIncrementTick+0x48>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	603b      	str	r3, [r7, #0]
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <xTaskIncrementTick+0x46>
 8003830:	4b43      	ldr	r3, [pc, #268]	; (8003940 <xTaskIncrementTick+0x158>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	4b43      	ldr	r3, [pc, #268]	; (8003944 <xTaskIncrementTick+0x15c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a41      	ldr	r2, [pc, #260]	; (8003940 <xTaskIncrementTick+0x158>)
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4a41      	ldr	r2, [pc, #260]	; (8003944 <xTaskIncrementTick+0x15c>)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b40      	ldr	r3, [pc, #256]	; (8003948 <xTaskIncrementTick+0x160>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	4a3f      	ldr	r2, [pc, #252]	; (8003948 <xTaskIncrementTick+0x160>)
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	f000 f9a5 	bl	8003b9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003852:	4b3e      	ldr	r3, [pc, #248]	; (800394c <xTaskIncrementTick+0x164>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	429a      	cmp	r2, r3
 800385a:	d34d      	bcc.n	80038f8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800385c:	4b38      	ldr	r3, [pc, #224]	; (8003940 <xTaskIncrementTick+0x158>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <xTaskIncrementTick+0x82>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <xTaskIncrementTick+0x84>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003870:	4b36      	ldr	r3, [pc, #216]	; (800394c <xTaskIncrementTick+0x164>)
 8003872:	f04f 32ff 	mov.w	r2, #4294967295
 8003876:	601a      	str	r2, [r3, #0]
					break;
 8003878:	e03e      	b.n	80038f8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800387a:	4b31      	ldr	r3, [pc, #196]	; (8003940 <xTaskIncrementTick+0x158>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d203      	bcs.n	800389a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003892:	4a2e      	ldr	r2, [pc, #184]	; (800394c <xTaskIncrementTick+0x164>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6013      	str	r3, [r2, #0]
						break;
 8003898:	e02e      	b.n	80038f8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	3304      	adds	r3, #4
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fc8f 	bl	80031c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3318      	adds	r3, #24
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fc86 	bl	80031c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	2201      	movs	r2, #1
 80038bc:	409a      	lsls	r2, r3
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <xTaskIncrementTick+0x168>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	4a22      	ldr	r2, [pc, #136]	; (8003950 <xTaskIncrementTick+0x168>)
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <xTaskIncrementTick+0x16c>)
 80038d6:	441a      	add	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f7ff fc12 	bl	8003108 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <xTaskIncrementTick+0x170>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d3b4      	bcc.n	800385c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038f2:	2301      	movs	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038f6:	e7b1      	b.n	800385c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <xTaskIncrementTick+0x170>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fe:	4915      	ldr	r1, [pc, #84]	; (8003954 <xTaskIncrementTick+0x16c>)
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d907      	bls.n	8003920 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003910:	2301      	movs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e004      	b.n	8003920 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003916:	4b11      	ldr	r3, [pc, #68]	; (800395c <xTaskIncrementTick+0x174>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	4a0f      	ldr	r2, [pc, #60]	; (800395c <xTaskIncrementTick+0x174>)
 800391e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <xTaskIncrementTick+0x178>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800392c:	697b      	ldr	r3, [r7, #20]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	2000046c 	.word	0x2000046c
 800393c:	20000448 	.word	0x20000448
 8003940:	200003fc 	.word	0x200003fc
 8003944:	20000400 	.word	0x20000400
 8003948:	2000045c 	.word	0x2000045c
 800394c:	20000464 	.word	0x20000464
 8003950:	2000044c 	.word	0x2000044c
 8003954:	20000348 	.word	0x20000348
 8003958:	20000344 	.word	0x20000344
 800395c:	20000454 	.word	0x20000454
 8003960:	20000458 	.word	0x20000458

08003964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800396a:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <vTaskSwitchContext+0xac>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003972:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <vTaskSwitchContext+0xb0>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003978:	e044      	b.n	8003a04 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800397a:	4b26      	ldr	r3, [pc, #152]	; (8003a14 <vTaskSwitchContext+0xb0>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003980:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <vTaskSwitchContext+0xb4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	fab3 f383 	clz	r3, r3
 800398c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800398e:	7afb      	ldrb	r3, [r7, #11]
 8003990:	f1c3 031f 	rsb	r3, r3, #31
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	4921      	ldr	r1, [pc, #132]	; (8003a1c <vTaskSwitchContext+0xb8>)
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	607b      	str	r3, [r7, #4]
}
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <vTaskSwitchContext+0x5a>
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <vTaskSwitchContext+0xb8>)
 80039cc:	4413      	add	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	3308      	adds	r3, #8
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d104      	bne.n	80039f0 <vTaskSwitchContext+0x8c>
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <vTaskSwitchContext+0xbc>)
 80039f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <vTaskSwitchContext+0xbc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	334c      	adds	r3, #76	; 0x4c
 8003a00:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <vTaskSwitchContext+0xc0>)
 8003a02:	6013      	str	r3, [r2, #0]
}
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	2000046c 	.word	0x2000046c
 8003a14:	20000458 	.word	0x20000458
 8003a18:	2000044c 	.word	0x2000044c
 8003a1c:	20000348 	.word	0x20000348
 8003a20:	20000344 	.word	0x20000344
 8003a24:	20000010 	.word	0x20000010

08003a28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a30:	f000 f852 	bl	8003ad8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <prvIdleTask+0x28>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d9f9      	bls.n	8003a30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <prvIdleTask+0x2c>)
 8003a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a4c:	e7f0      	b.n	8003a30 <prvIdleTask+0x8>
 8003a4e:	bf00      	nop
 8003a50:	20000348 	.word	0x20000348
 8003a54:	e000ed04 	.word	0xe000ed04

08003a58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	e00c      	b.n	8003a7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <prvInitialiseTaskLists+0x60>)
 8003a70:	4413      	add	r3, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fb1b 	bl	80030ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b06      	cmp	r3, #6
 8003a82:	d9ef      	bls.n	8003a64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a84:	480d      	ldr	r0, [pc, #52]	; (8003abc <prvInitialiseTaskLists+0x64>)
 8003a86:	f7ff fb12 	bl	80030ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a8a:	480d      	ldr	r0, [pc, #52]	; (8003ac0 <prvInitialiseTaskLists+0x68>)
 8003a8c:	f7ff fb0f 	bl	80030ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a90:	480c      	ldr	r0, [pc, #48]	; (8003ac4 <prvInitialiseTaskLists+0x6c>)
 8003a92:	f7ff fb0c 	bl	80030ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a96:	480c      	ldr	r0, [pc, #48]	; (8003ac8 <prvInitialiseTaskLists+0x70>)
 8003a98:	f7ff fb09 	bl	80030ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a9c:	480b      	ldr	r0, [pc, #44]	; (8003acc <prvInitialiseTaskLists+0x74>)
 8003a9e:	f7ff fb06 	bl	80030ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <prvInitialiseTaskLists+0x78>)
 8003aa4:	4a05      	ldr	r2, [pc, #20]	; (8003abc <prvInitialiseTaskLists+0x64>)
 8003aa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <prvInitialiseTaskLists+0x7c>)
 8003aaa:	4a05      	ldr	r2, [pc, #20]	; (8003ac0 <prvInitialiseTaskLists+0x68>)
 8003aac:	601a      	str	r2, [r3, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000348 	.word	0x20000348
 8003abc:	200003d4 	.word	0x200003d4
 8003ac0:	200003e8 	.word	0x200003e8
 8003ac4:	20000404 	.word	0x20000404
 8003ac8:	20000418 	.word	0x20000418
 8003acc:	20000430 	.word	0x20000430
 8003ad0:	200003fc 	.word	0x200003fc
 8003ad4:	20000400 	.word	0x20000400

08003ad8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ade:	e019      	b.n	8003b14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ae0:	f000 fa18 	bl	8003f14 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ae4:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <prvCheckTasksWaitingTermination+0x50>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff fb66 	bl	80031c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <prvCheckTasksWaitingTermination+0x54>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <prvCheckTasksWaitingTermination+0x54>)
 8003afe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <prvCheckTasksWaitingTermination+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <prvCheckTasksWaitingTermination+0x58>)
 8003b08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b0a:	f000 fa33 	bl	8003f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f810 	bl	8003b34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <prvCheckTasksWaitingTermination+0x58>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e1      	bne.n	8003ae0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000418 	.word	0x20000418
 8003b2c:	20000444 	.word	0x20000444
 8003b30:	2000042c 	.word	0x2000042c

08003b34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	334c      	adds	r3, #76	; 0x4c
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fcdf 	bl	8004504 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d108      	bne.n	8003b62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fb83 	bl	8004260 <vPortFree>
				vPortFree( pxTCB );
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fb80 	bl	8004260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b60:	e018      	b.n	8003b94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d103      	bne.n	8003b74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fb77 	bl	8004260 <vPortFree>
	}
 8003b72:	e00f      	b.n	8003b94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d00a      	beq.n	8003b94 <prvDeleteTCB+0x60>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	60fb      	str	r3, [r7, #12]
}
 8003b90:	bf00      	nop
 8003b92:	e7fe      	b.n	8003b92 <prvDeleteTCB+0x5e>
	}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ba2:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <prvResetNextTaskUnblockTime+0x44>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <prvResetNextTaskUnblockTime+0x14>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <prvResetNextTaskUnblockTime+0x16>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <prvResetNextTaskUnblockTime+0x48>)
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bbe:	e008      	b.n	8003bd2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <prvResetNextTaskUnblockTime+0x44>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <prvResetNextTaskUnblockTime+0x48>)
 8003bd0:	6013      	str	r3, [r2, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	200003fc 	.word	0x200003fc
 8003be4:	20000464 	.word	0x20000464

08003be8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003bf2:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bf8:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fadf 	bl	80031c2 <uxListRemove>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c0a:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	2201      	movs	r2, #1
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43da      	mvns	r2, r3
 8003c18:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d10a      	bne.n	8003c40 <prvAddCurrentTaskToDelayedList+0x58>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c30:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3304      	adds	r3, #4
 8003c36:	4619      	mov	r1, r3
 8003c38:	481a      	ldr	r0, [pc, #104]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c3a:	f7ff fa65 	bl	8003108 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c3e:	e026      	b.n	8003c8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c48:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d209      	bcs.n	8003c6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f7ff fa73 	bl	8003150 <vListInsert>
}
 8003c6a:	e010      	b.n	8003c8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4619      	mov	r1, r3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	f7ff fa69 	bl	8003150 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d202      	bcs.n	8003c8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c88:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6013      	str	r3, [r2, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000448 	.word	0x20000448
 8003c9c:	20000344 	.word	0x20000344
 8003ca0:	2000044c 	.word	0x2000044c
 8003ca4:	20000430 	.word	0x20000430
 8003ca8:	20000400 	.word	0x20000400
 8003cac:	200003fc 	.word	0x200003fc
 8003cb0:	20000464 	.word	0x20000464

08003cb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3b04      	subs	r3, #4
 8003cc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3b04      	subs	r3, #4
 8003cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f023 0201 	bic.w	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3b04      	subs	r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ce4:	4a0c      	ldr	r2, [pc, #48]	; (8003d18 <pxPortInitialiseStack+0x64>)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3b14      	subs	r3, #20
 8003cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3b04      	subs	r3, #4
 8003cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f06f 0202 	mvn.w	r2, #2
 8003d02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	3b20      	subs	r3, #32
 8003d08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	08003d1d 	.word	0x08003d1d

08003d1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <prvTaskExitError+0x54>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	d00a      	beq.n	8003d46 <prvTaskExitError+0x2a>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	60fb      	str	r3, [r7, #12]
}
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <prvTaskExitError+0x28>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	60bb      	str	r3, [r7, #8]
}
 8003d58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d5a:	bf00      	nop
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0fc      	beq.n	8003d5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	2000000c 	.word	0x2000000c
	...

08003d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <pxCurrentTCBConst2>)
 8003d82:	6819      	ldr	r1, [r3, #0]
 8003d84:	6808      	ldr	r0, [r1, #0]
 8003d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8a:	f380 8809 	msr	PSP, r0
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f380 8811 	msr	BASEPRI, r0
 8003d9a:	4770      	bx	lr
 8003d9c:	f3af 8000 	nop.w

08003da0 <pxCurrentTCBConst2>:
 8003da0:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop

08003da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003da8:	4808      	ldr	r0, [pc, #32]	; (8003dcc <prvPortStartFirstTask+0x24>)
 8003daa:	6800      	ldr	r0, [r0, #0]
 8003dac:	6800      	ldr	r0, [r0, #0]
 8003dae:	f380 8808 	msr	MSP, r0
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f380 8814 	msr	CONTROL, r0
 8003dba:	b662      	cpsie	i
 8003dbc:	b661      	cpsie	f
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	df00      	svc	0
 8003dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003dca:	bf00      	nop
 8003dcc:	e000ed08 	.word	0xe000ed08

08003dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dd6:	4b46      	ldr	r3, [pc, #280]	; (8003ef0 <xPortStartScheduler+0x120>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a46      	ldr	r2, [pc, #280]	; (8003ef4 <xPortStartScheduler+0x124>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d10a      	bne.n	8003df6 <xPortStartScheduler+0x26>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	613b      	str	r3, [r7, #16]
}
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003df6:	4b3e      	ldr	r3, [pc, #248]	; (8003ef0 <xPortStartScheduler+0x120>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a3f      	ldr	r2, [pc, #252]	; (8003ef8 <xPortStartScheduler+0x128>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d10a      	bne.n	8003e16 <xPortStartScheduler+0x46>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	60fb      	str	r3, [r7, #12]
}
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e16:	4b39      	ldr	r3, [pc, #228]	; (8003efc <xPortStartScheduler+0x12c>)
 8003e18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	22ff      	movs	r2, #255	; 0xff
 8003e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <xPortStartScheduler+0x130>)
 8003e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e3e:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <xPortStartScheduler+0x134>)
 8003e40:	2207      	movs	r2, #7
 8003e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e44:	e009      	b.n	8003e5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003e46:	4b2f      	ldr	r3, [pc, #188]	; (8003f04 <xPortStartScheduler+0x134>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	4a2d      	ldr	r2, [pc, #180]	; (8003f04 <xPortStartScheduler+0x134>)
 8003e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e62:	2b80      	cmp	r3, #128	; 0x80
 8003e64:	d0ef      	beq.n	8003e46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e66:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <xPortStartScheduler+0x134>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1c3 0307 	rsb	r3, r3, #7
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d00a      	beq.n	8003e88 <xPortStartScheduler+0xb8>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	60bb      	str	r3, [r7, #8]
}
 8003e84:	bf00      	nop
 8003e86:	e7fe      	b.n	8003e86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e88:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <xPortStartScheduler+0x134>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <xPortStartScheduler+0x134>)
 8003e90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e92:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <xPortStartScheduler+0x134>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e9a:	4a1a      	ldr	r2, [pc, #104]	; (8003f04 <xPortStartScheduler+0x134>)
 8003e9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ea6:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <xPortStartScheduler+0x138>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <xPortStartScheduler+0x138>)
 8003eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003eb2:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <xPortStartScheduler+0x138>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <xPortStartScheduler+0x138>)
 8003eb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ebc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ebe:	f000 f8dd 	bl	800407c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ec2:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <xPortStartScheduler+0x13c>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003ec8:	f000 f8fc 	bl	80040c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <xPortStartScheduler+0x140>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0f      	ldr	r2, [pc, #60]	; (8003f10 <xPortStartScheduler+0x140>)
 8003ed2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ed6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ed8:	f7ff ff66 	bl	8003da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003edc:	f7ff fd42 	bl	8003964 <vTaskSwitchContext>
	prvTaskExitError();
 8003ee0:	f7ff ff1c 	bl	8003d1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	e000ed00 	.word	0xe000ed00
 8003ef4:	410fc271 	.word	0x410fc271
 8003ef8:	410fc270 	.word	0x410fc270
 8003efc:	e000e400 	.word	0xe000e400
 8003f00:	20000470 	.word	0x20000470
 8003f04:	20000474 	.word	0x20000474
 8003f08:	e000ed20 	.word	0xe000ed20
 8003f0c:	2000000c 	.word	0x2000000c
 8003f10:	e000ef34 	.word	0xe000ef34

08003f14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	607b      	str	r3, [r7, #4]
}
 8003f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <vPortEnterCritical+0x58>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3301      	adds	r3, #1
 8003f34:	4a0d      	ldr	r2, [pc, #52]	; (8003f6c <vPortEnterCritical+0x58>)
 8003f36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <vPortEnterCritical+0x58>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d10f      	bne.n	8003f60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <vPortEnterCritical+0x5c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	603b      	str	r3, [r7, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	e7fe      	b.n	8003f5e <vPortEnterCritical+0x4a>
	}
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	2000000c 	.word	0x2000000c
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f7a:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <vPortExitCritical+0x50>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <vPortExitCritical+0x24>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	607b      	str	r3, [r7, #4]
}
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <vPortExitCritical+0x50>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <vPortExitCritical+0x50>)
 8003fa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <vPortExitCritical+0x50>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <vPortExitCritical+0x42>
 8003faa:	2300      	movs	r3, #0
 8003fac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	2000000c 	.word	0x2000000c
	...

08003fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003fd0:	f3ef 8009 	mrs	r0, PSP
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	4b15      	ldr	r3, [pc, #84]	; (8004030 <pxCurrentTCBConst>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	f01e 0f10 	tst.w	lr, #16
 8003fe0:	bf08      	it	eq
 8003fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fea:	6010      	str	r0, [r2, #0]
 8003fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ff4:	f380 8811 	msr	BASEPRI, r0
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f7ff fcb0 	bl	8003964 <vTaskSwitchContext>
 8004004:	f04f 0000 	mov.w	r0, #0
 8004008:	f380 8811 	msr	BASEPRI, r0
 800400c:	bc09      	pop	{r0, r3}
 800400e:	6819      	ldr	r1, [r3, #0]
 8004010:	6808      	ldr	r0, [r1, #0]
 8004012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004016:	f01e 0f10 	tst.w	lr, #16
 800401a:	bf08      	it	eq
 800401c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004020:	f380 8809 	msr	PSP, r0
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	f3af 8000 	nop.w

08004030 <pxCurrentTCBConst>:
 8004030:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop

08004038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	607b      	str	r3, [r7, #4]
}
 8004050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004052:	f7ff fbc9 	bl	80037e8 <xTaskIncrementTick>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <SysTick_Handler+0x40>)
 800405e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	2300      	movs	r3, #0
 8004066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	f383 8811 	msr	BASEPRI, r3
}
 800406e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <vPortSetupTimerInterrupt+0x34>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <vPortSetupTimerInterrupt+0x38>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <vPortSetupTimerInterrupt+0x3c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <vPortSetupTimerInterrupt+0x40>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <vPortSetupTimerInterrupt+0x44>)
 800409a:	3b01      	subs	r3, #1
 800409c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800409e:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <vPortSetupTimerInterrupt+0x34>)
 80040a0:	2207      	movs	r2, #7
 80040a2:	601a      	str	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000e010 	.word	0xe000e010
 80040b4:	e000e018 	.word	0xe000e018
 80040b8:	20000000 	.word	0x20000000
 80040bc:	10624dd3 	.word	0x10624dd3
 80040c0:	e000e014 	.word	0xe000e014

080040c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80040c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80040d4 <vPortEnableVFP+0x10>
 80040c8:	6801      	ldr	r1, [r0, #0]
 80040ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040ce:	6001      	str	r1, [r0, #0]
 80040d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80040d2:	bf00      	nop
 80040d4:	e000ed88 	.word	0xe000ed88

080040d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	; 0x28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040e4:	f7ff fad6 	bl	8003694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040e8:	4b58      	ldr	r3, [pc, #352]	; (800424c <pvPortMalloc+0x174>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040f0:	f000 f910 	bl	8004314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040f4:	4b56      	ldr	r3, [pc, #344]	; (8004250 <pvPortMalloc+0x178>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f040 808e 	bne.w	800421e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01d      	beq.n	8004144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004108:	2208      	movs	r2, #8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	2b00      	cmp	r3, #0
 8004118:	d014      	beq.n	8004144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f023 0307 	bic.w	r3, r3, #7
 8004120:	3308      	adds	r3, #8
 8004122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <pvPortMalloc+0x6c>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	617b      	str	r3, [r7, #20]
}
 8004140:	bf00      	nop
 8004142:	e7fe      	b.n	8004142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d069      	beq.n	800421e <pvPortMalloc+0x146>
 800414a:	4b42      	ldr	r3, [pc, #264]	; (8004254 <pvPortMalloc+0x17c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d864      	bhi.n	800421e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004154:	4b40      	ldr	r3, [pc, #256]	; (8004258 <pvPortMalloc+0x180>)
 8004156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004158:	4b3f      	ldr	r3, [pc, #252]	; (8004258 <pvPortMalloc+0x180>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800415e:	e004      	b.n	800416a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d903      	bls.n	800417c <pvPortMalloc+0xa4>
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f1      	bne.n	8004160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800417c:	4b33      	ldr	r3, [pc, #204]	; (800424c <pvPortMalloc+0x174>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004182:	429a      	cmp	r2, r3
 8004184:	d04b      	beq.n	800421e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2208      	movs	r2, #8
 800418c:	4413      	add	r3, r2
 800418e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	1ad2      	subs	r2, r2, r3
 80041a0:	2308      	movs	r3, #8
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d91f      	bls.n	80041e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <pvPortMalloc+0xf8>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	613b      	str	r3, [r7, #16]
}
 80041cc:	bf00      	nop
 80041ce:	e7fe      	b.n	80041ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	1ad2      	subs	r2, r2, r3
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041e2:	69b8      	ldr	r0, [r7, #24]
 80041e4:	f000 f8f8 	bl	80043d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <pvPortMalloc+0x17c>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	4a18      	ldr	r2, [pc, #96]	; (8004254 <pvPortMalloc+0x17c>)
 80041f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041f6:	4b17      	ldr	r3, [pc, #92]	; (8004254 <pvPortMalloc+0x17c>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b18      	ldr	r3, [pc, #96]	; (800425c <pvPortMalloc+0x184>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d203      	bcs.n	800420a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <pvPortMalloc+0x17c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a15      	ldr	r2, [pc, #84]	; (800425c <pvPortMalloc+0x184>)
 8004208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <pvPortMalloc+0x178>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	431a      	orrs	r2, r3
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800421e:	f7ff fa47 	bl	80036b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <pvPortMalloc+0x16a>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	60fb      	str	r3, [r7, #12]
}
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <pvPortMalloc+0x168>
	return pvReturn;
 8004242:	69fb      	ldr	r3, [r7, #28]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3728      	adds	r7, #40	; 0x28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20001080 	.word	0x20001080
 8004250:	2000108c 	.word	0x2000108c
 8004254:	20001084 	.word	0x20001084
 8004258:	20001078 	.word	0x20001078
 800425c:	20001088 	.word	0x20001088

08004260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d048      	beq.n	8004304 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004272:	2308      	movs	r3, #8
 8004274:	425b      	negs	r3, r3
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4413      	add	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	4b21      	ldr	r3, [pc, #132]	; (800430c <vPortFree+0xac>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <vPortFree+0x44>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	60fb      	str	r3, [r7, #12]
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <vPortFree+0x62>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	60bb      	str	r3, [r7, #8]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <vPortFree+0xac>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d019      	beq.n	8004304 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d115      	bne.n	8004304 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <vPortFree+0xac>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042e8:	f7ff f9d4 	bl	8003694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <vPortFree+0xb0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	4a06      	ldr	r2, [pc, #24]	; (8004310 <vPortFree+0xb0>)
 80042f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042fa:	6938      	ldr	r0, [r7, #16]
 80042fc:	f000 f86c 	bl	80043d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004300:	f7ff f9d6 	bl	80036b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004304:	bf00      	nop
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	2000108c 	.word	0x2000108c
 8004310:	20001084 	.word	0x20001084

08004314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800431a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800431e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004320:	4b27      	ldr	r3, [pc, #156]	; (80043c0 <prvHeapInit+0xac>)
 8004322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3307      	adds	r3, #7
 8004332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0307 	bic.w	r3, r3, #7
 800433a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	4a1f      	ldr	r2, [pc, #124]	; (80043c0 <prvHeapInit+0xac>)
 8004344:	4413      	add	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800434c:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <prvHeapInit+0xb0>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <prvHeapInit+0xb0>)
 8004354:	2200      	movs	r2, #0
 8004356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	4413      	add	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004360:	2208      	movs	r2, #8
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0307 	bic.w	r3, r3, #7
 800436e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a15      	ldr	r2, [pc, #84]	; (80043c8 <prvHeapInit+0xb4>)
 8004374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <prvHeapInit+0xb4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2200      	movs	r2, #0
 800437c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <prvHeapInit+0xb4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	1ad2      	subs	r2, r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <prvHeapInit+0xb4>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <prvHeapInit+0xb8>)
 80043a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <prvHeapInit+0xbc>)
 80043aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <prvHeapInit+0xc0>)
 80043ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	20000478 	.word	0x20000478
 80043c4:	20001078 	.word	0x20001078
 80043c8:	20001080 	.word	0x20001080
 80043cc:	20001088 	.word	0x20001088
 80043d0:	20001084 	.word	0x20001084
 80043d4:	2000108c 	.word	0x2000108c

080043d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043e0:	4b28      	ldr	r3, [pc, #160]	; (8004484 <prvInsertBlockIntoFreeList+0xac>)
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e002      	b.n	80043ec <prvInsertBlockIntoFreeList+0x14>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d8f7      	bhi.n	80043e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4413      	add	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d108      	bne.n	800441a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	441a      	add	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	441a      	add	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d118      	bne.n	8004460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <prvInsertBlockIntoFreeList+0xb0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d00d      	beq.n	8004456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	441a      	add	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e008      	b.n	8004468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <prvInsertBlockIntoFreeList+0xb0>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e003      	b.n	8004468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d002      	beq.n	8004476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20001078 	.word	0x20001078
 8004488:	20001080 	.word	0x20001080

0800448c <__libc_init_array>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	4d0d      	ldr	r5, [pc, #52]	; (80044c4 <__libc_init_array+0x38>)
 8004490:	4c0d      	ldr	r4, [pc, #52]	; (80044c8 <__libc_init_array+0x3c>)
 8004492:	1b64      	subs	r4, r4, r5
 8004494:	10a4      	asrs	r4, r4, #2
 8004496:	2600      	movs	r6, #0
 8004498:	42a6      	cmp	r6, r4
 800449a:	d109      	bne.n	80044b0 <__libc_init_array+0x24>
 800449c:	4d0b      	ldr	r5, [pc, #44]	; (80044cc <__libc_init_array+0x40>)
 800449e:	4c0c      	ldr	r4, [pc, #48]	; (80044d0 <__libc_init_array+0x44>)
 80044a0:	f000 f8e8 	bl	8004674 <_init>
 80044a4:	1b64      	subs	r4, r4, r5
 80044a6:	10a4      	asrs	r4, r4, #2
 80044a8:	2600      	movs	r6, #0
 80044aa:	42a6      	cmp	r6, r4
 80044ac:	d105      	bne.n	80044ba <__libc_init_array+0x2e>
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b4:	4798      	blx	r3
 80044b6:	3601      	adds	r6, #1
 80044b8:	e7ee      	b.n	8004498 <__libc_init_array+0xc>
 80044ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80044be:	4798      	blx	r3
 80044c0:	3601      	adds	r6, #1
 80044c2:	e7f2      	b.n	80044aa <__libc_init_array+0x1e>
 80044c4:	08004754 	.word	0x08004754
 80044c8:	08004754 	.word	0x08004754
 80044cc:	08004754 	.word	0x08004754
 80044d0:	08004758 	.word	0x08004758

080044d4 <__retarget_lock_acquire_recursive>:
 80044d4:	4770      	bx	lr

080044d6 <__retarget_lock_release_recursive>:
 80044d6:	4770      	bx	lr

080044d8 <memset>:
 80044d8:	4402      	add	r2, r0
 80044da:	4603      	mov	r3, r0
 80044dc:	4293      	cmp	r3, r2
 80044de:	d100      	bne.n	80044e2 <memset+0xa>
 80044e0:	4770      	bx	lr
 80044e2:	f803 1b01 	strb.w	r1, [r3], #1
 80044e6:	e7f9      	b.n	80044dc <memset+0x4>

080044e8 <cleanup_glue>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	460c      	mov	r4, r1
 80044ec:	6809      	ldr	r1, [r1, #0]
 80044ee:	4605      	mov	r5, r0
 80044f0:	b109      	cbz	r1, 80044f6 <cleanup_glue+0xe>
 80044f2:	f7ff fff9 	bl	80044e8 <cleanup_glue>
 80044f6:	4621      	mov	r1, r4
 80044f8:	4628      	mov	r0, r5
 80044fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044fe:	f000 b869 	b.w	80045d4 <_free_r>
	...

08004504 <_reclaim_reent>:
 8004504:	4b2c      	ldr	r3, [pc, #176]	; (80045b8 <_reclaim_reent+0xb4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4283      	cmp	r3, r0
 800450a:	b570      	push	{r4, r5, r6, lr}
 800450c:	4604      	mov	r4, r0
 800450e:	d051      	beq.n	80045b4 <_reclaim_reent+0xb0>
 8004510:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004512:	b143      	cbz	r3, 8004526 <_reclaim_reent+0x22>
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d14a      	bne.n	80045b0 <_reclaim_reent+0xac>
 800451a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800451c:	6819      	ldr	r1, [r3, #0]
 800451e:	b111      	cbz	r1, 8004526 <_reclaim_reent+0x22>
 8004520:	4620      	mov	r0, r4
 8004522:	f000 f857 	bl	80045d4 <_free_r>
 8004526:	6961      	ldr	r1, [r4, #20]
 8004528:	b111      	cbz	r1, 8004530 <_reclaim_reent+0x2c>
 800452a:	4620      	mov	r0, r4
 800452c:	f000 f852 	bl	80045d4 <_free_r>
 8004530:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004532:	b111      	cbz	r1, 800453a <_reclaim_reent+0x36>
 8004534:	4620      	mov	r0, r4
 8004536:	f000 f84d 	bl	80045d4 <_free_r>
 800453a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800453c:	b111      	cbz	r1, 8004544 <_reclaim_reent+0x40>
 800453e:	4620      	mov	r0, r4
 8004540:	f000 f848 	bl	80045d4 <_free_r>
 8004544:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004546:	b111      	cbz	r1, 800454e <_reclaim_reent+0x4a>
 8004548:	4620      	mov	r0, r4
 800454a:	f000 f843 	bl	80045d4 <_free_r>
 800454e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004550:	b111      	cbz	r1, 8004558 <_reclaim_reent+0x54>
 8004552:	4620      	mov	r0, r4
 8004554:	f000 f83e 	bl	80045d4 <_free_r>
 8004558:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800455a:	b111      	cbz	r1, 8004562 <_reclaim_reent+0x5e>
 800455c:	4620      	mov	r0, r4
 800455e:	f000 f839 	bl	80045d4 <_free_r>
 8004562:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004564:	b111      	cbz	r1, 800456c <_reclaim_reent+0x68>
 8004566:	4620      	mov	r0, r4
 8004568:	f000 f834 	bl	80045d4 <_free_r>
 800456c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800456e:	b111      	cbz	r1, 8004576 <_reclaim_reent+0x72>
 8004570:	4620      	mov	r0, r4
 8004572:	f000 f82f 	bl	80045d4 <_free_r>
 8004576:	69a3      	ldr	r3, [r4, #24]
 8004578:	b1e3      	cbz	r3, 80045b4 <_reclaim_reent+0xb0>
 800457a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800457c:	4620      	mov	r0, r4
 800457e:	4798      	blx	r3
 8004580:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004582:	b1b9      	cbz	r1, 80045b4 <_reclaim_reent+0xb0>
 8004584:	4620      	mov	r0, r4
 8004586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800458a:	f7ff bfad 	b.w	80044e8 <cleanup_glue>
 800458e:	5949      	ldr	r1, [r1, r5]
 8004590:	b941      	cbnz	r1, 80045a4 <_reclaim_reent+0xa0>
 8004592:	3504      	adds	r5, #4
 8004594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004596:	2d80      	cmp	r5, #128	; 0x80
 8004598:	68d9      	ldr	r1, [r3, #12]
 800459a:	d1f8      	bne.n	800458e <_reclaim_reent+0x8a>
 800459c:	4620      	mov	r0, r4
 800459e:	f000 f819 	bl	80045d4 <_free_r>
 80045a2:	e7ba      	b.n	800451a <_reclaim_reent+0x16>
 80045a4:	680e      	ldr	r6, [r1, #0]
 80045a6:	4620      	mov	r0, r4
 80045a8:	f000 f814 	bl	80045d4 <_free_r>
 80045ac:	4631      	mov	r1, r6
 80045ae:	e7ef      	b.n	8004590 <_reclaim_reent+0x8c>
 80045b0:	2500      	movs	r5, #0
 80045b2:	e7ef      	b.n	8004594 <_reclaim_reent+0x90>
 80045b4:	bd70      	pop	{r4, r5, r6, pc}
 80045b6:	bf00      	nop
 80045b8:	20000010 	.word	0x20000010

080045bc <__malloc_lock>:
 80045bc:	4801      	ldr	r0, [pc, #4]	; (80045c4 <__malloc_lock+0x8>)
 80045be:	f7ff bf89 	b.w	80044d4 <__retarget_lock_acquire_recursive>
 80045c2:	bf00      	nop
 80045c4:	20001488 	.word	0x20001488

080045c8 <__malloc_unlock>:
 80045c8:	4801      	ldr	r0, [pc, #4]	; (80045d0 <__malloc_unlock+0x8>)
 80045ca:	f7ff bf84 	b.w	80044d6 <__retarget_lock_release_recursive>
 80045ce:	bf00      	nop
 80045d0:	20001488 	.word	0x20001488

080045d4 <_free_r>:
 80045d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045d6:	2900      	cmp	r1, #0
 80045d8:	d048      	beq.n	800466c <_free_r+0x98>
 80045da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045de:	9001      	str	r0, [sp, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f1a1 0404 	sub.w	r4, r1, #4
 80045e6:	bfb8      	it	lt
 80045e8:	18e4      	addlt	r4, r4, r3
 80045ea:	f7ff ffe7 	bl	80045bc <__malloc_lock>
 80045ee:	4a20      	ldr	r2, [pc, #128]	; (8004670 <_free_r+0x9c>)
 80045f0:	9801      	ldr	r0, [sp, #4]
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	4615      	mov	r5, r2
 80045f6:	b933      	cbnz	r3, 8004606 <_free_r+0x32>
 80045f8:	6063      	str	r3, [r4, #4]
 80045fa:	6014      	str	r4, [r2, #0]
 80045fc:	b003      	add	sp, #12
 80045fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004602:	f7ff bfe1 	b.w	80045c8 <__malloc_unlock>
 8004606:	42a3      	cmp	r3, r4
 8004608:	d90b      	bls.n	8004622 <_free_r+0x4e>
 800460a:	6821      	ldr	r1, [r4, #0]
 800460c:	1862      	adds	r2, r4, r1
 800460e:	4293      	cmp	r3, r2
 8004610:	bf04      	itt	eq
 8004612:	681a      	ldreq	r2, [r3, #0]
 8004614:	685b      	ldreq	r3, [r3, #4]
 8004616:	6063      	str	r3, [r4, #4]
 8004618:	bf04      	itt	eq
 800461a:	1852      	addeq	r2, r2, r1
 800461c:	6022      	streq	r2, [r4, #0]
 800461e:	602c      	str	r4, [r5, #0]
 8004620:	e7ec      	b.n	80045fc <_free_r+0x28>
 8004622:	461a      	mov	r2, r3
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	b10b      	cbz	r3, 800462c <_free_r+0x58>
 8004628:	42a3      	cmp	r3, r4
 800462a:	d9fa      	bls.n	8004622 <_free_r+0x4e>
 800462c:	6811      	ldr	r1, [r2, #0]
 800462e:	1855      	adds	r5, r2, r1
 8004630:	42a5      	cmp	r5, r4
 8004632:	d10b      	bne.n	800464c <_free_r+0x78>
 8004634:	6824      	ldr	r4, [r4, #0]
 8004636:	4421      	add	r1, r4
 8004638:	1854      	adds	r4, r2, r1
 800463a:	42a3      	cmp	r3, r4
 800463c:	6011      	str	r1, [r2, #0]
 800463e:	d1dd      	bne.n	80045fc <_free_r+0x28>
 8004640:	681c      	ldr	r4, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	6053      	str	r3, [r2, #4]
 8004646:	4421      	add	r1, r4
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	e7d7      	b.n	80045fc <_free_r+0x28>
 800464c:	d902      	bls.n	8004654 <_free_r+0x80>
 800464e:	230c      	movs	r3, #12
 8004650:	6003      	str	r3, [r0, #0]
 8004652:	e7d3      	b.n	80045fc <_free_r+0x28>
 8004654:	6825      	ldr	r5, [r4, #0]
 8004656:	1961      	adds	r1, r4, r5
 8004658:	428b      	cmp	r3, r1
 800465a:	bf04      	itt	eq
 800465c:	6819      	ldreq	r1, [r3, #0]
 800465e:	685b      	ldreq	r3, [r3, #4]
 8004660:	6063      	str	r3, [r4, #4]
 8004662:	bf04      	itt	eq
 8004664:	1949      	addeq	r1, r1, r5
 8004666:	6021      	streq	r1, [r4, #0]
 8004668:	6054      	str	r4, [r2, #4]
 800466a:	e7c7      	b.n	80045fc <_free_r+0x28>
 800466c:	b003      	add	sp, #12
 800466e:	bd30      	pop	{r4, r5, pc}
 8004670:	20001090 	.word	0x20001090

08004674 <_init>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	bf00      	nop
 8004678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467a:	bc08      	pop	{r3}
 800467c:	469e      	mov	lr, r3
 800467e:	4770      	bx	lr

08004680 <_fini>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr
