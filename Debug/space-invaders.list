
space-invaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e8  080070e8  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  080070e8  080070e8  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070e8  080070e8  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  080070f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          00001f9c  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000216c  2000216c  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002336d  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043fb  00000000  00000000  0004356d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001978  00000000  00000000  00047968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017b8  00000000  00000000  000492e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021879  00000000  00000000  0004aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e934  00000000  00000000  0006c311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c32da  00000000  00000000  0008ac45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014df1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e58  00000000  00000000  0014df74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fd0 	.word	0x08006fd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	08006fd0 	.word	0x08006fd0

080001d0 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b08e      	sub	sp, #56	; 0x38
 80001d4:	af0a      	add	r7, sp, #40	; 0x28
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	4608      	mov	r0, r1
 80001da:	4611      	mov	r1, r2
 80001dc:	461a      	mov	r2, r3
 80001de:	4603      	mov	r3, r0
 80001e0:	817b      	strh	r3, [r7, #10]
 80001e2:	460b      	mov	r3, r1
 80001e4:	813b      	strh	r3, [r7, #8]
 80001e6:	4613      	mov	r3, r2
 80001e8:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80001ea:	4b1d      	ldr	r3, [pc, #116]	; (8000260 <LiquidCrystal+0x90>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d019      	beq.n	8000226 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80001f2:	8939      	ldrh	r1, [r7, #8]
 80001f4:	897a      	ldrh	r2, [r7, #10]
 80001f6:	2300      	movs	r3, #0
 80001f8:	9308      	str	r3, [sp, #32]
 80001fa:	2300      	movs	r3, #0
 80001fc:	9307      	str	r3, [sp, #28]
 80001fe:	2300      	movs	r3, #0
 8000200:	9306      	str	r3, [sp, #24]
 8000202:	2300      	movs	r3, #0
 8000204:	9305      	str	r3, [sp, #20]
 8000206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000208:	9304      	str	r3, [sp, #16]
 800020a:	8c3b      	ldrh	r3, [r7, #32]
 800020c:	9303      	str	r3, [sp, #12]
 800020e:	8bbb      	ldrh	r3, [r7, #28]
 8000210:	9302      	str	r3, [sp, #8]
 8000212:	8b3b      	ldrh	r3, [r7, #24]
 8000214:	9301      	str	r3, [sp, #4]
 8000216:	88fb      	ldrh	r3, [r7, #6]
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	460b      	mov	r3, r1
 800021c:	68f9      	ldr	r1, [r7, #12]
 800021e:	2001      	movs	r0, #1
 8000220:	f000 f820 	bl	8000264 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000224:	e018      	b.n	8000258 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000226:	8939      	ldrh	r1, [r7, #8]
 8000228:	897a      	ldrh	r2, [r7, #10]
 800022a:	2300      	movs	r3, #0
 800022c:	9308      	str	r3, [sp, #32]
 800022e:	2300      	movs	r3, #0
 8000230:	9307      	str	r3, [sp, #28]
 8000232:	2300      	movs	r3, #0
 8000234:	9306      	str	r3, [sp, #24]
 8000236:	2300      	movs	r3, #0
 8000238:	9305      	str	r3, [sp, #20]
 800023a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800023c:	9304      	str	r3, [sp, #16]
 800023e:	8c3b      	ldrh	r3, [r7, #32]
 8000240:	9303      	str	r3, [sp, #12]
 8000242:	8bbb      	ldrh	r3, [r7, #28]
 8000244:	9302      	str	r3, [sp, #8]
 8000246:	8b3b      	ldrh	r3, [r7, #24]
 8000248:	9301      	str	r3, [sp, #4]
 800024a:	88fb      	ldrh	r3, [r7, #6]
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	460b      	mov	r3, r1
 8000250:	68f9      	ldr	r1, [r7, #12]
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f806 	bl	8000264 <init>
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000000 	.word	0x20000000

08000264 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	60b9      	str	r1, [r7, #8]
 800026c:	4611      	mov	r1, r2
 800026e:	461a      	mov	r2, r3
 8000270:	4603      	mov	r3, r0
 8000272:	73fb      	strb	r3, [r7, #15]
 8000274:	460b      	mov	r3, r1
 8000276:	81bb      	strh	r3, [r7, #12]
 8000278:	4613      	mov	r3, r2
 800027a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800027c:	4a1a      	ldr	r2, [pc, #104]	; (80002e8 <init+0x84>)
 800027e:	89bb      	ldrh	r3, [r7, #12]
 8000280:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000282:	4a1a      	ldr	r2, [pc, #104]	; (80002ec <init+0x88>)
 8000284:	88fb      	ldrh	r3, [r7, #6]
 8000286:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000288:	4a19      	ldr	r2, [pc, #100]	; (80002f0 <init+0x8c>)
 800028a:	8b3b      	ldrh	r3, [r7, #24]
 800028c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800028e:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <init+0x90>)
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000294:	4a18      	ldr	r2, [pc, #96]	; (80002f8 <init+0x94>)
 8000296:	8bbb      	ldrh	r3, [r7, #28]
 8000298:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800029a:	4a17      	ldr	r2, [pc, #92]	; (80002f8 <init+0x94>)
 800029c:	8c3b      	ldrh	r3, [r7, #32]
 800029e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 80002a0:	4a15      	ldr	r2, [pc, #84]	; (80002f8 <init+0x94>)
 80002a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002a4:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 80002a6:	4a14      	ldr	r2, [pc, #80]	; (80002f8 <init+0x94>)
 80002a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80002aa:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80002ac:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <init+0x94>)
 80002ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80002b0:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80002b2:	4a11      	ldr	r2, [pc, #68]	; (80002f8 <init+0x94>)
 80002b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80002b6:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80002b8:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <init+0x94>)
 80002ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80002bc:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <init+0x94>)
 80002c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002c2:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80002c4:	7bfb      	ldrb	r3, [r7, #15]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d003      	beq.n	80002d2 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <init+0x98>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
 80002d0:	e002      	b.n	80002d8 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <init+0x98>)
 80002d4:	2210      	movs	r2, #16
 80002d6:	701a      	strb	r2, [r3, #0]
  
  begin(20, 4);
 80002d8:	2104      	movs	r1, #4
 80002da:	2014      	movs	r0, #20
 80002dc:	f000 f810 	bl	8000300 <begin>
}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20001d28 	.word	0x20001d28
 80002ec:	20001d08 	.word	0x20001d08
 80002f0:	20001d26 	.word	0x20001d26
 80002f4:	20001d0c 	.word	0x20001d0c
 80002f8:	20001d14 	.word	0x20001d14
 80002fc:	20001d25 	.word	0x20001d25

08000300 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	460a      	mov	r2, r1
 800030a:	71fb      	strb	r3, [r7, #7]
 800030c:	4613      	mov	r3, r2
 800030e:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000310:	79bb      	ldrb	r3, [r7, #6]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d906      	bls.n	8000324 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000316:	4b77      	ldr	r3, [pc, #476]	; (80004f4 <begin+0x1f4>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	b2da      	uxtb	r2, r3
 8000320:	4b74      	ldr	r3, [pc, #464]	; (80004f4 <begin+0x1f4>)
 8000322:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000324:	4a74      	ldr	r2, [pc, #464]	; (80004f8 <begin+0x1f8>)
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 800032a:	79fa      	ldrb	r2, [r7, #7]
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	3340      	adds	r3, #64	; 0x40
 8000330:	2140      	movs	r1, #64	; 0x40
 8000332:	2000      	movs	r0, #0
 8000334:	f000 f988 	bl	8000648 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000338:	4b70      	ldr	r3, [pc, #448]	; (80004fc <begin+0x1fc>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d009      	beq.n	8000354 <begin+0x54>
 8000340:	79bb      	ldrb	r3, [r7, #6]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d106      	bne.n	8000354 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000346:	4b6b      	ldr	r3, [pc, #428]	; (80004f4 <begin+0x1f4>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	f043 0304 	orr.w	r3, r3, #4
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4b68      	ldr	r3, [pc, #416]	; (80004f4 <begin+0x1f4>)
 8000352:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000354:	f000 f8e4 	bl	8000520 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000358:	2303      	movs	r3, #3
 800035a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800035c:	2301      	movs	r3, #1
 800035e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000360:	4b67      	ldr	r3, [pc, #412]	; (8000500 <begin+0x200>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d01b      	beq.n	80003a0 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000368:	4b66      	ldr	r3, [pc, #408]	; (8000504 <begin+0x204>)
 800036a:	881a      	ldrh	r2, [r3, #0]
 800036c:	4b66      	ldr	r3, [pc, #408]	; (8000508 <begin+0x208>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	4313      	orrs	r3, r2
 8000372:	b29a      	uxth	r2, r3
 8000374:	4b65      	ldr	r3, [pc, #404]	; (800050c <begin+0x20c>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	4313      	orrs	r3, r2
 800037a:	b29a      	uxth	r2, r3
 800037c:	4b64      	ldr	r3, [pc, #400]	; (8000510 <begin+0x210>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b62      	ldr	r3, [pc, #392]	; (8000510 <begin+0x210>)
 8000386:	885b      	ldrh	r3, [r3, #2]
 8000388:	4313      	orrs	r3, r2
 800038a:	b29a      	uxth	r2, r3
 800038c:	4b60      	ldr	r3, [pc, #384]	; (8000510 <begin+0x210>)
 800038e:	889b      	ldrh	r3, [r3, #4]
 8000390:	4313      	orrs	r3, r2
 8000392:	b29a      	uxth	r2, r3
 8000394:	4b5e      	ldr	r3, [pc, #376]	; (8000510 <begin+0x210>)
 8000396:	88db      	ldrh	r3, [r3, #6]
 8000398:	4313      	orrs	r3, r2
 800039a:	b29b      	uxth	r3, r3
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	e02a      	b.n	80003f6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003a0:	4b58      	ldr	r3, [pc, #352]	; (8000504 <begin+0x204>)
 80003a2:	881a      	ldrh	r2, [r3, #0]
 80003a4:	4b58      	ldr	r3, [pc, #352]	; (8000508 <begin+0x208>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	b29a      	uxth	r2, r3
 80003ac:	4b57      	ldr	r3, [pc, #348]	; (800050c <begin+0x20c>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003b4:	4b56      	ldr	r3, [pc, #344]	; (8000510 <begin+0x210>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003bc:	4b54      	ldr	r3, [pc, #336]	; (8000510 <begin+0x210>)
 80003be:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003c4:	4b52      	ldr	r3, [pc, #328]	; (8000510 <begin+0x210>)
 80003c6:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c8:	4313      	orrs	r3, r2
 80003ca:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003cc:	4b50      	ldr	r3, [pc, #320]	; (8000510 <begin+0x210>)
 80003ce:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	4b4e      	ldr	r3, [pc, #312]	; (8000510 <begin+0x210>)
 80003d6:	891b      	ldrh	r3, [r3, #8]
 80003d8:	4313      	orrs	r3, r2
 80003da:	b29a      	uxth	r2, r3
 80003dc:	4b4c      	ldr	r3, [pc, #304]	; (8000510 <begin+0x210>)
 80003de:	895b      	ldrh	r3, [r3, #10]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	4b4a      	ldr	r3, [pc, #296]	; (8000510 <begin+0x210>)
 80003e6:	899b      	ldrh	r3, [r3, #12]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	4b48      	ldr	r3, [pc, #288]	; (8000510 <begin+0x210>)
 80003ee:	89db      	ldrh	r3, [r3, #14]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003f4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80003f6:	4b47      	ldr	r3, [pc, #284]	; (8000514 <begin+0x214>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f107 020c 	add.w	r2, r7, #12
 80003fe:	4611      	mov	r1, r2
 8000400:	4618      	mov	r0, r3
 8000402:	f001 f8bb 	bl	800157c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  osDelay(50);
 8000406:	2032      	movs	r0, #50	; 0x32
 8000408:	f003 fc06 	bl	8003c18 <osDelay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 800040c:	4b41      	ldr	r3, [pc, #260]	; (8000514 <begin+0x214>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a3c      	ldr	r2, [pc, #240]	; (8000504 <begin+0x204>)
 8000412:	8811      	ldrh	r1, [r2, #0]
 8000414:	2200      	movs	r2, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f001 fa2a 	bl	8001870 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800041c:	4b3d      	ldr	r3, [pc, #244]	; (8000514 <begin+0x214>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a3a      	ldr	r2, [pc, #232]	; (800050c <begin+0x20c>)
 8000422:	8811      	ldrh	r1, [r2, #0]
 8000424:	2200      	movs	r2, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f001 fa22 	bl	8001870 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 800042c:	4b36      	ldr	r3, [pc, #216]	; (8000508 <begin+0x208>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	2bff      	cmp	r3, #255	; 0xff
 8000432:	d007      	beq.n	8000444 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000434:	4b37      	ldr	r3, [pc, #220]	; (8000514 <begin+0x214>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a33      	ldr	r2, [pc, #204]	; (8000508 <begin+0x208>)
 800043a:	8811      	ldrh	r1, [r2, #0]
 800043c:	2200      	movs	r2, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fa16 	bl	8001870 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000444:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <begin+0x1f4>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	f003 0310 	and.w	r3, r3, #16
 800044c:	2b00      	cmp	r3, #0
 800044e:	d115      	bne.n	800047c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000450:	2003      	movs	r0, #3
 8000452:	f000 fa19 	bl	8000888 <write4bits>
    osDelay(5); // wait min 4.1ms
 8000456:	2005      	movs	r0, #5
 8000458:	f003 fbde 	bl	8003c18 <osDelay>

    // second try
    write4bits(0x03);
 800045c:	2003      	movs	r0, #3
 800045e:	f000 fa13 	bl	8000888 <write4bits>
    osDelay(5); // wait min 4.1ms
 8000462:	2005      	movs	r0, #5
 8000464:	f003 fbd8 	bl	8003c18 <osDelay>
    
    // third go!
    write4bits(0x03); 
 8000468:	2003      	movs	r0, #3
 800046a:	f000 fa0d 	bl	8000888 <write4bits>
    osDelay(1);
 800046e:	2001      	movs	r0, #1
 8000470:	f003 fbd2 	bl	8003c18 <osDelay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000474:	2002      	movs	r0, #2
 8000476:	f000 fa07 	bl	8000888 <write4bits>
 800047a:	e01d      	b.n	80004b8 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <begin+0x1f4>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	f043 0320 	orr.w	r3, r3, #32
 8000484:	b2db      	uxtb	r3, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f000 f979 	bl	800077e <command>
    osDelay(5);  // wait more than 4.1ms
 800048c:	2005      	movs	r0, #5
 800048e:	f003 fbc3 	bl	8003c18 <osDelay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <begin+0x1f4>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f96e 	bl	800077e <command>
    osDelay(1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f003 fbb8 	bl	8003c18 <osDelay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <begin+0x1f4>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	f043 0320 	orr.w	r3, r3, #32
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f963 	bl	800077e <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 80004b8:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <begin+0x1f4>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	f043 0320 	orr.w	r3, r3, #32
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f95b 	bl	800077e <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 80004c8:	4b13      	ldr	r3, [pc, #76]	; (8000518 <begin+0x218>)
 80004ca:	2204      	movs	r2, #4
 80004cc:	701a      	strb	r2, [r3, #0]
  display();
 80004ce:	f000 f917 	bl	8000700 <display>

  // clear it off
  clear();
 80004d2:	f000 f8d9 	bl	8000688 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <begin+0x21c>)
 80004d8:	2202      	movs	r2, #2
 80004da:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <begin+0x21c>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f949 	bl	800077e <command>

}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20001d25 	.word	0x20001d25
 80004f8:	20001d11 	.word	0x20001d11
 80004fc:	200001ec 	.word	0x200001ec
 8000500:	20000000 	.word	0x20000000
 8000504:	20001d28 	.word	0x20001d28
 8000508:	20001d08 	.word	0x20001d08
 800050c:	20001d26 	.word	0x20001d26
 8000510:	20001d14 	.word	0x20001d14
 8000514:	20001d0c 	.word	0x20001d0c
 8000518:	20001d10 	.word	0x20001d10
 800051c:	20001d24 	.word	0x20001d24

08000520 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8000520:	b480      	push	{r7}
 8000522:	b089      	sub	sp, #36	; 0x24
 8000524:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000526:	4b41      	ldr	r3, [pc, #260]	; (800062c <enableClock+0x10c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800052e:	d10c      	bne.n	800054a <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	4b3f      	ldr	r3, [pc, #252]	; (8000630 <enableClock+0x110>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a3e      	ldr	r2, [pc, #248]	; (8000630 <enableClock+0x110>)
 8000536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053a:	6153      	str	r3, [r2, #20]
 800053c:	4b3c      	ldr	r3, [pc, #240]	; (8000630 <enableClock+0x110>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000544:	61fb      	str	r3, [r7, #28]
 8000546:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000548:	e06a      	b.n	8000620 <enableClock+0x100>
  else if(_port == GPIOB)
 800054a:	4b38      	ldr	r3, [pc, #224]	; (800062c <enableClock+0x10c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a39      	ldr	r2, [pc, #228]	; (8000634 <enableClock+0x114>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d10c      	bne.n	800056e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000554:	4b36      	ldr	r3, [pc, #216]	; (8000630 <enableClock+0x110>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	4a35      	ldr	r2, [pc, #212]	; (8000630 <enableClock+0x110>)
 800055a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055e:	6153      	str	r3, [r2, #20]
 8000560:	4b33      	ldr	r3, [pc, #204]	; (8000630 <enableClock+0x110>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000568:	61bb      	str	r3, [r7, #24]
 800056a:	69bb      	ldr	r3, [r7, #24]
}
 800056c:	e058      	b.n	8000620 <enableClock+0x100>
  else if(_port == GPIOB)
 800056e:	4b2f      	ldr	r3, [pc, #188]	; (800062c <enableClock+0x10c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a30      	ldr	r2, [pc, #192]	; (8000634 <enableClock+0x114>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d10c      	bne.n	8000592 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000578:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <enableClock+0x110>)
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	4a2c      	ldr	r2, [pc, #176]	; (8000630 <enableClock+0x110>)
 800057e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000582:	6153      	str	r3, [r2, #20]
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <enableClock+0x110>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	697b      	ldr	r3, [r7, #20]
}
 8000590:	e046      	b.n	8000620 <enableClock+0x100>
	else if(_port == GPIOC)
 8000592:	4b26      	ldr	r3, [pc, #152]	; (800062c <enableClock+0x10c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a28      	ldr	r2, [pc, #160]	; (8000638 <enableClock+0x118>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d10c      	bne.n	80005b6 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <enableClock+0x110>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	4a23      	ldr	r2, [pc, #140]	; (8000630 <enableClock+0x110>)
 80005a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005a6:	6153      	str	r3, [r2, #20]
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <enableClock+0x110>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
}
 80005b4:	e034      	b.n	8000620 <enableClock+0x100>
	else if(_port == GPIOD)
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <enableClock+0x10c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a20      	ldr	r2, [pc, #128]	; (800063c <enableClock+0x11c>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d10c      	bne.n	80005da <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <enableClock+0x110>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <enableClock+0x110>)
 80005c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ca:	6153      	str	r3, [r2, #20]
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <enableClock+0x110>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
}
 80005d8:	e022      	b.n	8000620 <enableClock+0x100>
	else if(_port == GPIOE)
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <enableClock+0x10c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <enableClock+0x120>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d10c      	bne.n	80005fe <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <enableClock+0x110>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	4a11      	ldr	r2, [pc, #68]	; (8000630 <enableClock+0x110>)
 80005ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ee:	6153      	str	r3, [r2, #20]
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <enableClock+0x110>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
}
 80005fc:	e010      	b.n	8000620 <enableClock+0x100>
	else if(_port == GPIOF)
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <enableClock+0x10c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a10      	ldr	r2, [pc, #64]	; (8000644 <enableClock+0x124>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d10b      	bne.n	8000620 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <enableClock+0x110>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a08      	ldr	r2, [pc, #32]	; (8000630 <enableClock+0x110>)
 800060e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000612:	6153      	str	r3, [r2, #20]
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <enableClock+0x110>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
}
 8000620:	bf00      	nop
 8000622:	3724      	adds	r7, #36	; 0x24
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	20001d0c 	.word	0x20001d0c
 8000630:	40021000 	.word	0x40021000
 8000634:	48000400 	.word	0x48000400
 8000638:	48000800 	.word	0x48000800
 800063c:	48000c00 	.word	0x48000c00
 8000640:	48001000 	.word	0x48001000
 8000644:	48001400 	.word	0x48001400

08000648 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <setRowOffsets+0x3c>)
 800065c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <setRowOffsets+0x3c>)
 8000664:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <setRowOffsets+0x3c>)
 800066c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <setRowOffsets+0x3c>)
 8000674:	70da      	strb	r2, [r3, #3]
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20001d04 	.word	0x20001d04

08000688 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f876 	bl	800077e <command>
  osDelay(2);  // this command takes a long time!
 8000692:	2002      	movs	r0, #2
 8000694:	f003 fac0 	bl	8003c18 <osDelay>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  osDelay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80006ac:	2304      	movs	r3, #4
 80006ae:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d803      	bhi.n	80006c0 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	3b01      	subs	r3, #1
 80006be:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <setCursor+0x5c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	79ba      	ldrb	r2, [r7, #6]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d303      	bcc.n	80006d2 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <setCursor+0x5c>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <setCursor+0x60>)
 80006d6:	5cd2      	ldrb	r2, [r2, r3]
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	4413      	add	r3, r2
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f848 	bl	800077e <command>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20001d11 	.word	0x20001d11
 80006fc:	20001d04 	.word	0x20001d04

08000700 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <display+0x28>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <display+0x28>)
 8000710:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <display+0x28>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f82e 	bl	800077e <command>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20001d10 	.word	0x20001d10

0800072c <createChar>:
  return n;
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	b25b      	sxtb	r3, r3
 8000746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074a:	b25b      	sxtb	r3, r3
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f815 	bl	800077e <command>
  for (int i=0; i<8; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	e009      	b.n	800076e <createChar+0x42>
    write(charmap[i]);
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f819 	bl	800079a <write>
  for (int i=0; i<8; i++) {
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2b07      	cmp	r3, #7
 8000772:	ddf2      	ble.n	800075a <createChar+0x2e>
  }
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f813 	bl	80007b8 <send>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <write>:

inline size_t write(uint8_t value) {
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2101      	movs	r1, #1
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f805 	bl	80007b8 <send>
  return 1; // assume sucess
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	460a      	mov	r2, r1
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	4613      	mov	r3, r2
 80007c6:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <send+0x6c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a16      	ldr	r2, [pc, #88]	; (8000828 <send+0x70>)
 80007ce:	8811      	ldrh	r1, [r2, #0]
 80007d0:	79ba      	ldrb	r2, [r7, #6]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f84c 	bl	8001870 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <send+0x74>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	2bff      	cmp	r3, #255	; 0xff
 80007de:	d007      	beq.n	80007f0 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <send+0x6c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <send+0x74>)
 80007e6:	8811      	ldrh	r1, [r2, #0]
 80007e8:	2200      	movs	r2, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 f840 	bl	8001870 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <send+0x78>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	f003 0310 	and.w	r3, r3, #16
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d004      	beq.n	8000806 <send+0x4e>
    write8bits(value); 
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f86c 	bl	80008dc <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000804:	e009      	b.n	800081a <send+0x62>
    write4bits(value>>4);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	091b      	lsrs	r3, r3, #4
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f83b 	bl	8000888 <write4bits>
    write4bits(value);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f837 	bl	8000888 <write4bits>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20001d0c 	.word	0x20001d0c
 8000828:	20001d28 	.word	0x20001d28
 800082c:	20001d08 	.word	0x20001d08
 8000830:	20001d25 	.word	0x20001d25

08000834 <pulseEnable>:

void pulseEnable(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <pulseEnable+0x4c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a11      	ldr	r2, [pc, #68]	; (8000884 <pulseEnable+0x50>)
 800083e:	8811      	ldrh	r1, [r2, #0]
 8000840:	2200      	movs	r2, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f001 f814 	bl	8001870 <HAL_GPIO_WritePin>
  osDelay(1);
 8000848:	2001      	movs	r0, #1
 800084a:	f003 f9e5 	bl	8003c18 <osDelay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <pulseEnable+0x4c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <pulseEnable+0x50>)
 8000854:	8811      	ldrh	r1, [r2, #0]
 8000856:	2201      	movs	r2, #1
 8000858:	4618      	mov	r0, r3
 800085a:	f001 f809 	bl	8001870 <HAL_GPIO_WritePin>
  osDelay(1);    // enable pulse must be >450ns
 800085e:	2001      	movs	r0, #1
 8000860:	f003 f9da 	bl	8003c18 <osDelay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <pulseEnable+0x4c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <pulseEnable+0x50>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fffe 	bl	8001870 <HAL_GPIO_WritePin>
  osDelay(1);   // commands need > 37us to settle
 8000874:	2001      	movs	r0, #1
 8000876:	f003 f9cf 	bl	8003c18 <osDelay>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20001d0c 	.word	0x20001d0c
 8000884:	20001d26 	.word	0x20001d26

08000888 <write4bits>:

void write4bits(uint8_t value) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e013      	b.n	80008c0 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <write4bits+0x4c>)
 800089a:	6818      	ldr	r0, [r3, #0]
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <write4bits+0x50>)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008a4:	79fa      	ldrb	r2, [r7, #7]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	fa42 f303 	asr.w	r3, r2, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	f000 ffdb 	bl	8001870 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3301      	adds	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	dde8      	ble.n	8000898 <write4bits+0x10>
  }

  pulseEnable();
 80008c6:	f7ff ffb5 	bl	8000834 <pulseEnable>
}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20001d0c 	.word	0x20001d0c
 80008d8:	20001d14 	.word	0x20001d14

080008dc <write8bits>:

void write8bits(uint8_t value) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	e013      	b.n	8000914 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <write8bits+0x4c>)
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <write8bits+0x50>)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	fa42 f303 	asr.w	r3, r2, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	461a      	mov	r2, r3
 800090a:	f000 ffb1 	bl	8001870 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	3301      	adds	r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b07      	cmp	r3, #7
 8000918:	dde8      	ble.n	80008ec <write8bits+0x10>
  }
  
  pulseEnable();
 800091a:	f7ff ff8b 	bl	8000834 <pulseEnable>
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20001d0c 	.word	0x20001d0c
 800092c:	20001d14 	.word	0x20001d14

08000930 <setLoc>:
		{ CT_SPACE, CT_HERO, CT_SPACE, CT_SPACE },
};

int copyLcdMat[VERTICAL_LCD_ROWS][VERTICAL_LCD_COLUMNS] = { 0 };

void setLoc(int row, int col) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	setCursor(row, VERTICAL_LCD_COLUMNS - col - 1);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f1c3 0303 	rsb	r3, r3, #3
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	4610      	mov	r0, r2
 800094c:	f7ff fea6 	bl	800069c <setCursor>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <doCopy>:

void doCopy() {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
	for(int r = 0; r < VERTICAL_LCD_ROWS; r++) {
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	e019      	b.n	8000998 <doCopy+0x40>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000964:	2300      	movs	r3, #0
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	e010      	b.n	800098c <doCopy+0x34>
			copyLcdMat[r][c] = lcdMat[r][c];
 800096a:	4910      	ldr	r1, [pc, #64]	; (80009ac <doCopy+0x54>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	009a      	lsls	r2, r3, #2
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	4413      	add	r3, r2
 8000974:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <doCopy+0x58>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	0099      	lsls	r1, r3, #2
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	440b      	add	r3, r1
 8000982:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	ddeb      	ble.n	800096a <doCopy+0x12>
	for(int r = 0; r < VERTICAL_LCD_ROWS; r++) {
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3301      	adds	r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b13      	cmp	r3, #19
 800099c:	dde2      	ble.n	8000964 <doCopy+0xc>
		}
	}
}
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	2000001c 	.word	0x2000001c
 80009b0:	200001f8 	.word	0x200001f8

080009b4 <initLcd>:

void initLcd() {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af04      	add	r7, sp, #16
	osMutexAcquire(lcdMutexHandle, osWaitForever);
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <initLcd+0x78>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f04f 31ff 	mov.w	r1, #4294967295
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 f9f0 	bl	8003da8 <osMutexAcquire>
	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 80009c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009cc:	9303      	str	r3, [sp, #12]
 80009ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d2:	9302      	str	r3, [sp, #8]
 80009d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ec:	4810      	ldr	r0, [pc, #64]	; (8000a30 <initLcd+0x7c>)
 80009ee:	f7ff fbef 	bl	80001d0 <LiquidCrystal>
	begin(VERTICAL_LCD_ROWS, VERTICAL_LCD_COLUMNS);
 80009f2:	2104      	movs	r1, #4
 80009f4:	2014      	movs	r0, #20
 80009f6:	f7ff fc83 	bl	8000300 <begin>
	createChar(CT_SPACE, spaceByte);
 80009fa:	490e      	ldr	r1, [pc, #56]	; (8000a34 <initLcd+0x80>)
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fe95 	bl	800072c <createChar>
	createChar(CT_HERO, heroByte);
 8000a02:	490d      	ldr	r1, [pc, #52]	; (8000a38 <initLcd+0x84>)
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fe91 	bl	800072c <createChar>
	createChar(CT_ENEMY, enemyByte);
 8000a0a:	490c      	ldr	r1, [pc, #48]	; (8000a3c <initLcd+0x88>)
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f7ff fe8d 	bl	800072c <createChar>
	createChar(CT_BULLET, bulletByte);
 8000a12:	490b      	ldr	r1, [pc, #44]	; (8000a40 <initLcd+0x8c>)
 8000a14:	2003      	movs	r0, #3
 8000a16:	f7ff fe89 	bl	800072c <createChar>
	osMutexRelease(lcdMutexHandle);
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <initLcd+0x78>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fa20 	bl	8003e64 <osMutexRelease>
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20001d30 	.word	0x20001d30
 8000a30:	48000c00 	.word	0x48000c00
 8000a34:	200001f0 	.word	0x200001f0
 8000a38:	2000000c 	.word	0x2000000c
 8000a3c:	20000004 	.word	0x20000004
 8000a40:	20000014 	.word	0x20000014

08000a44 <updateLcd>:

void updateLcd() {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
	for(int r = 0; r < VERTICAL_LCD_ROWS; r++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e03a      	b.n	8000ac6 <updateLcd+0x82>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	e031      	b.n	8000aba <updateLcd+0x76>
			if(copyLcdMat[r][c] == lcdMat[r][c])
 8000a56:	4920      	ldr	r1, [pc, #128]	; (8000ad8 <updateLcd+0x94>)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	009a      	lsls	r2, r3, #2
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4413      	add	r3, r2
 8000a60:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000a64:	481d      	ldr	r0, [pc, #116]	; (8000adc <updateLcd+0x98>)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	0099      	lsls	r1, r3, #2
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d01d      	beq.n	8000ab2 <updateLcd+0x6e>
				continue;

			osMutexAcquire(lcdMutexHandle, osWaitForever);
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <updateLcd+0x9c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f992 	bl	8003da8 <osMutexAcquire>
			setLoc(r, c);
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff ff52 	bl	8000930 <setLoc>
			int type = lcdMat[r][c];
 8000a8c:	4913      	ldr	r1, [pc, #76]	; (8000adc <updateLcd+0x98>)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	009a      	lsls	r2, r3, #2
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	4413      	add	r3, r2
 8000a96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a9a:	607b      	str	r3, [r7, #4]
			write(type);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fe7a 	bl	800079a <write>
			osMutexRelease(lcdMutexHandle);
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <updateLcd+0x9c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 f9da 	bl	8003e64 <osMutexRelease>
 8000ab0:	e000      	b.n	8000ab4 <updateLcd+0x70>
				continue;
 8000ab2:	bf00      	nop
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	ddca      	ble.n	8000a56 <updateLcd+0x12>
	for(int r = 0; r < VERTICAL_LCD_ROWS; r++) {
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2b13      	cmp	r3, #19
 8000aca:	ddc1      	ble.n	8000a50 <updateLcd+0xc>
		}
	}

	doCopy();
 8000acc:	f7ff ff44 	bl	8000958 <doCopy>
}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200001f8 	.word	0x200001f8
 8000adc:	2000001c 	.word	0x2000001c
 8000ae0:	20001d30 	.word	0x20001d30

08000ae4 <findFirstRowOfEnemies>:

	clearAt(HERO_ROW, currentCol);
	lcdMat[HERO_ROW][prevCol] = CT_HERO;
}

int findFirstRowOfEnemies() {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
	for(int r = 0; r < VERTICAL_LCD_ROWS; r++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	e016      	b.n	8000b1e <findFirstRowOfEnemies+0x3a>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000af0:	2300      	movs	r3, #0
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	e00d      	b.n	8000b12 <findFirstRowOfEnemies+0x2e>
			if(lcdMat[r][c] == CT_ENEMY)
 8000af6:	490e      	ldr	r1, [pc, #56]	; (8000b30 <findFirstRowOfEnemies+0x4c>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	009a      	lsls	r2, r3, #2
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d101      	bne.n	8000b0c <findFirstRowOfEnemies+0x28>
				return r;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	e00b      	b.n	8000b24 <findFirstRowOfEnemies+0x40>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	ddee      	ble.n	8000af6 <findFirstRowOfEnemies+0x12>
	for(int r = 0; r < VERTICAL_LCD_ROWS; r++) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b13      	cmp	r3, #19
 8000b22:	dde5      	ble.n	8000af0 <findFirstRowOfEnemies+0xc>
		}
	}
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	2000001c 	.word	0x2000001c

08000b34 <findLastRowOfEnemies>:

int findLastRowOfEnemies() {
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
	for(int r = VERTICAL_LCD_ROWS; r >= 0; r--) {
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	e016      	b.n	8000b6e <findLastRowOfEnemies+0x3a>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	e00d      	b.n	8000b62 <findLastRowOfEnemies+0x2e>
			if(lcdMat[r][c] == CT_ENEMY)
 8000b46:	490e      	ldr	r1, [pc, #56]	; (8000b80 <findLastRowOfEnemies+0x4c>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	009a      	lsls	r2, r3, #2
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d101      	bne.n	8000b5c <findLastRowOfEnemies+0x28>
				return r;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	e00b      	b.n	8000b74 <findLastRowOfEnemies+0x40>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	ddee      	ble.n	8000b46 <findLastRowOfEnemies+0x12>
	for(int r = VERTICAL_LCD_ROWS; r >= 0; r--) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dae5      	bge.n	8000b40 <findLastRowOfEnemies+0xc>
		}
	}
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	2000001c 	.word	0x2000001c

08000b84 <moveDown>:

void moveDown(int row, int col) {
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
	int pawn = lcdMat[row][col];
 8000b8e:	490f      	ldr	r1, [pc, #60]	; (8000bcc <moveDown+0x48>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	009a      	lsls	r2, r3, #2
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b9c:	60fb      	str	r3, [r7, #12]
	lcdMat[row + 1][col] = pawn;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	490a      	ldr	r1, [pc, #40]	; (8000bcc <moveDown+0x48>)
 8000ba4:	009a      	lsls	r2, r3, #2
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	4413      	add	r3, r2
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lcdMat[row][col] = CT_SPACE;
 8000bb0:	4906      	ldr	r1, [pc, #24]	; (8000bcc <moveDown+0x48>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	009a      	lsls	r2, r3, #2
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	2000001c 	.word	0x2000001c

08000bd0 <moveEnemiesDown>:

void moveEnemiesDown() {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
	int startRow = findFirstRowOfEnemies();
 8000bd6:	f7ff ff85 	bl	8000ae4 <findFirstRowOfEnemies>
 8000bda:	6078      	str	r0, [r7, #4]
	int endRow = findLastRowOfEnemies();
 8000bdc:	f7ff ffaa 	bl	8000b34 <findLastRowOfEnemies>
 8000be0:	6038      	str	r0, [r7, #0]

	for(int r = endRow; r >= startRow; r--) {
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e018      	b.n	8000c1a <moveEnemiesDown+0x4a>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	e00f      	b.n	8000c0e <moveEnemiesDown+0x3e>
			if(lcdMat[r][c] == CT_ENEMY)
 8000bee:	490f      	ldr	r1, [pc, #60]	; (8000c2c <moveEnemiesDown+0x5c>)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	009a      	lsls	r2, r3, #2
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d103      	bne.n	8000c08 <moveEnemiesDown+0x38>
				moveDown(r, c);
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff ffbe 	bl	8000b84 <moveDown>
		for(int c = 0; c < VERTICAL_LCD_COLUMNS; c++) {
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	ddec      	ble.n	8000bee <moveEnemiesDown+0x1e>
	for(int r = endRow; r >= startRow; r--) {
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dae2      	bge.n	8000be8 <moveEnemiesDown+0x18>
		}
	}
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000001c 	.word	0x2000001c

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c34:	f000 fb8a 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f826 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f000 f926 	bl	8000e8c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c40:	f000 f884 	bl	8000d4c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c44:	f000 f8c2 	bl	8000dcc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000c48:	f000 f8fe 	bl	8000e48 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c4c:	f002 fed2 	bl	80039f4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  lcdMutexHandle = osMutexNew(&lcdMutex_attributes);
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <main+0x44>)
 8000c52:	f003 f80f 	bl	8003c74 <osMutexNew>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <main+0x48>)
 8000c5a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of updateLcdTask */
  updateLcdTaskHandle = osThreadNew(StartUpdateLcdTask, NULL, &updateLcdTask_attributes);
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <main+0x4c>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4807      	ldr	r0, [pc, #28]	; (8000c80 <main+0x50>)
 8000c62:	f002 ff2f 	bl	8003ac4 <osThreadNew>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <main+0x54>)
 8000c6a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c6c:	f002 fef6 	bl	8003a5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <main+0x40>
 8000c72:	bf00      	nop
 8000c74:	08007040 	.word	0x08007040
 8000c78:	20001d30 	.word	0x20001d30
 8000c7c:	0800701c 	.word	0x0800701c
 8000c80:	08000fb5 	.word	0x08000fb5
 8000c84:	20001d2c 	.word	0x20001d2c

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09e      	sub	sp, #120	; 0x78
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c92:	2228      	movs	r2, #40	; 0x28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f006 f8cc 	bl	8006e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	223c      	movs	r2, #60	; 0x3c
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f006 f8be 	bl	8006e34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cdc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 ffe0 	bl	8001ca8 <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000cee:	f000 f983 	bl	8000ff8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fed2 	bl	8002ab8 <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d1a:	f000 f96d 	bl	8000ff8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <SystemClock_Config+0xc0>)
 8000d20:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 f908 	bl	8002f44 <HAL_RCCEx_PeriphCLKConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d3a:	f000 f95d 	bl	8000ff8 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3778      	adds	r7, #120	; 0x78
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	00020020 	.word	0x00020020

08000d4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000d52:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <MX_I2C1_Init+0x78>)
 8000d54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000d58:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <MX_I2C1_Init+0x7c>)
 8000d5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d86:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000d88:	f000 fd8a 	bl	80018a0 <HAL_I2C_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d92:	f000 f931 	bl	8000ff8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000d9a:	f000 fe10 	bl	80019be <HAL_I2CEx_ConfigAnalogFilter>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000da4:	f000 f928 	bl	8000ff8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000da8:	2100      	movs	r1, #0
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_I2C1_Init+0x74>)
 8000dac:	f000 fe52 	bl	8001a54 <HAL_I2CEx_ConfigDigitalFilter>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000db6:	f000 f91f 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20001d34 	.word	0x20001d34
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	2000090e 	.word	0x2000090e

08000dcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	; (8000e44 <MX_SPI1_Init+0x78>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000dd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ddc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000de6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000dea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e02:	2208      	movs	r2, #8
 8000e04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e26:	2208      	movs	r2, #8
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e2c:	f002 fa3a 	bl	80032a4 <HAL_SPI_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e36:	f000 f8df 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20001d80 	.word	0x20001d80
 8000e44:	40013000 	.word	0x40013000

08000e48 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <MX_USB_PCD_Init+0x3c>)
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <MX_USB_PCD_Init+0x40>)
 8000e50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_USB_PCD_Init+0x3c>)
 8000e54:	2208      	movs	r2, #8
 8000e56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_USB_PCD_Init+0x3c>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_USB_PCD_Init+0x3c>)
 8000e60:	2202      	movs	r2, #2
 8000e62:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <MX_USB_PCD_Init+0x3c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_USB_PCD_Init+0x3c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_USB_PCD_Init+0x3c>)
 8000e72:	f000 fe3b 	bl	8001aec <HAL_PCD_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000e7c:	f000 f8bc 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20001de4 	.word	0x20001de4
 8000e88:	40005c00 	.word	0x40005c00

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea2:	4b42      	ldr	r3, [pc, #264]	; (8000fac <MX_GPIO_Init+0x120>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a41      	ldr	r2, [pc, #260]	; (8000fac <MX_GPIO_Init+0x120>)
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b3f      	ldr	r3, [pc, #252]	; (8000fac <MX_GPIO_Init+0x120>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b3c      	ldr	r3, [pc, #240]	; (8000fac <MX_GPIO_Init+0x120>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	4a3b      	ldr	r2, [pc, #236]	; (8000fac <MX_GPIO_Init+0x120>)
 8000ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ec4:	6153      	str	r3, [r2, #20]
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <MX_GPIO_Init+0x120>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed2:	4b36      	ldr	r3, [pc, #216]	; (8000fac <MX_GPIO_Init+0x120>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4a35      	ldr	r2, [pc, #212]	; (8000fac <MX_GPIO_Init+0x120>)
 8000ed8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000edc:	6153      	str	r3, [r2, #20]
 8000ede:	4b33      	ldr	r3, [pc, #204]	; (8000fac <MX_GPIO_Init+0x120>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b30      	ldr	r3, [pc, #192]	; (8000fac <MX_GPIO_Init+0x120>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <MX_GPIO_Init+0x120>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	6153      	str	r3, [r2, #20]
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <MX_GPIO_Init+0x120>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <MX_GPIO_Init+0x120>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a29      	ldr	r2, [pc, #164]	; (8000fac <MX_GPIO_Init+0x120>)
 8000f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <MX_GPIO_Init+0x120>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000f20:	4823      	ldr	r0, [pc, #140]	; (8000fb0 <MX_GPIO_Init+0x124>)
 8000f22:	f000 fca5 	bl	8001870 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2106      	movs	r1, #6
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f000 fc9f 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f32:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000f36:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <MX_GPIO_Init+0x124>)
 8000f4c:	f000 fb16 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
 8000f50:	2331      	movs	r3, #49	; 0x31
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f54:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <MX_GPIO_Init+0x124>)
 8000f66:	f000 fb09 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f000 fafc 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000f84:	2306      	movs	r3, #6
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9e:	f000 faed 	bl	800157c <HAL_GPIO_Init>

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48001000 	.word	0x48001000

08000fb4 <StartUpdateLcdTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUpdateLcdTask */
void StartUpdateLcdTask(void *argument)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	initLcd();
 8000fbc:	f7ff fcfa 	bl	80009b4 <initLcd>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000fc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc4:	f002 fe28 	bl	8003c18 <osDelay>
	updateLcd();
 8000fc8:	f7ff fd3c 	bl	8000a44 <updateLcd>
	moveEnemiesDown();
 8000fcc:	f7ff fe00 	bl	8000bd0 <moveEnemiesDown>
  {
 8000fd0:	e7f6      	b.n	8000fc0 <StartUpdateLcdTask+0xc>
	...

08000fd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fe6:	f000 f9c7 	bl	8001378 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40012c00 	.word	0x40012c00

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	e7fe      	b.n	8001000 <Error_Handler+0x8>
	...

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_MspInit+0x4c>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_MspInit+0x4c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6193      	str	r3, [r2, #24]
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_MspInit+0x4c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_MspInit+0x4c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_MspInit+0x4c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_MspInit+0x4c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	210f      	movs	r1, #15
 800103e:	f06f 0001 	mvn.w	r0, #1
 8001042:	f000 fa71 	bl	8001528 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <HAL_I2C_MspInit+0x7c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d127      	bne.n	80010c6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_I2C_MspInit+0x80>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <HAL_I2C_MspInit+0x80>)
 800107c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001080:	6153      	str	r3, [r2, #20]
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_I2C_MspInit+0x80>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800108e:	23c0      	movs	r3, #192	; 0xc0
 8001090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001092:	2312      	movs	r3, #18
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001096:	2301      	movs	r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800109e:	2304      	movs	r3, #4
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <HAL_I2C_MspInit+0x84>)
 80010aa:	f000 fa67 	bl	800157c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_I2C_MspInit+0x80>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_I2C_MspInit+0x80>)
 80010b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_I2C_MspInit+0x80>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40005400 	.word	0x40005400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	48000400 	.word	0x48000400

080010dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_SPI_MspInit+0x7c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d128      	bne.n	8001150 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_SPI_MspInit+0x80>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a16      	ldr	r2, [pc, #88]	; (800115c <HAL_SPI_MspInit+0x80>)
 8001104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_SPI_MspInit+0x80>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_SPI_MspInit+0x80>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <HAL_SPI_MspInit+0x80>)
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	6153      	str	r3, [r2, #20]
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_SPI_MspInit+0x80>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800112e:	23e0      	movs	r3, #224	; 0xe0
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800113e:	2305      	movs	r3, #5
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f000 fa16 	bl	800157c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40013000 	.word	0x40013000
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_PCD_MspInit+0x80>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d129      	bne.n	80011d6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_PCD_MspInit+0x84>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <HAL_PCD_MspInit+0x84>)
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_PCD_MspInit+0x84>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800119a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011ac:	230e      	movs	r3, #14
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f000 f9df 	bl	800157c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_PCD_MspInit+0x84>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_PCD_MspInit+0x84>)
 80011c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_PCD_MspInit+0x84>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40005c00 	.word	0x40005c00
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	2019      	movs	r0, #25
 80011fe:	f000 f993 	bl	8001528 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001202:	2019      	movs	r0, #25
 8001204:	f000 f9ac 	bl	8001560 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <HAL_InitTick+0x9c>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_InitTick+0x9c>)
 800120e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_InitTick+0x9c>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001220:	f107 0210 	add.w	r2, r7, #16
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fe58 	bl	8002ee0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001230:	f001 fe34 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
 8001234:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	4a13      	ldr	r2, [pc, #76]	; (8001288 <HAL_InitTick+0xa0>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0c9b      	lsrs	r3, r3, #18
 8001240:	3b01      	subs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_InitTick+0xa4>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <HAL_InitTick+0xa8>)
 8001248:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_InitTick+0xa4>)
 800124c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001250:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001252:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_InitTick+0xa4>)
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_InitTick+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_InitTick+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <HAL_InitTick+0xa4>)
 8001266:	f002 f8c8 	bl	80033fa <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d104      	bne.n	800127a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001270:	4806      	ldr	r0, [pc, #24]	; (800128c <HAL_InitTick+0xa4>)
 8001272:	f002 f923 	bl	80034bc <HAL_TIM_Base_Start_IT>
 8001276:	4603      	mov	r3, r0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3730      	adds	r7, #48	; 0x30
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40021000 	.word	0x40021000
 8001288:	431bde83 	.word	0x431bde83
 800128c:	200020d0 	.word	0x200020d0
 8001290:	40012c00 	.word	0x40012c00

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80012c6:	f002 f963 	bl	8003590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200020d0 	.word	0x200020d0

080012d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <SystemInit+0x20>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <SystemInit+0x20>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001330 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fe:	490e      	ldr	r1, [pc, #56]	; (8001338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001300:	4a0e      	ldr	r2, [pc, #56]	; (800133c <LoopForever+0xe>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001314:	4c0b      	ldr	r4, [pc, #44]	; (8001344 <LoopForever+0x16>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001322:	f7ff ffd7 	bl	80012d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001326:	f005 fd51 	bl	8006dcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800132a:	f7ff fc81 	bl	8000c30 <main>

0800132e <LoopForever>:

LoopForever:
    b LoopForever
 800132e:	e7fe      	b.n	800132e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001330:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 800133c:	080070f0 	.word	0x080070f0
  ldr r2, =_sbss
 8001340:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001344:	2000216c 	.word	0x2000216c

08001348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_2_IRQHandler>
	...

0800134c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_Init+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_Init+0x28>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f8d8 	bl	8001512 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	200f      	movs	r0, #15
 8001364:	f7ff ff40 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff fe4c 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40022000 	.word	0x40022000

08001378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000164 	.word	0x20000164
 800139c:	2000211c 	.word	0x2000211c

080013a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	2000211c 	.word	0x2000211c

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db0b      	blt.n	8001446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <__NVIC_EnableIRQ+0x38>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ff4c 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153a:	f7ff ff61 	bl	8001400 <__NVIC_GetPriorityGrouping>
 800153e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	6978      	ldr	r0, [r7, #20]
 8001546:	f7ff ffb1 	bl	80014ac <NVIC_EncodePriority>
 800154a:	4602      	mov	r2, r0
 800154c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff80 	bl	8001458 <__NVIC_SetPriority>
}
 8001558:	bf00      	nop
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff54 	bl	800141c <__NVIC_EnableIRQ>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e154      	b.n	8001836 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8146 	beq.w	8001830 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d005      	beq.n	80015bc <HAL_GPIO_Init+0x40>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d130      	bne.n	800161e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f2:	2201      	movs	r2, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	f003 0201 	and.w	r2, r3, #1
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b03      	cmp	r3, #3
 8001628:	d017      	beq.n	800165a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d123      	bne.n	80016ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3208      	adds	r2, #8
 800166e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0203 	and.w	r2, r3, #3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80a0 	beq.w	8001830 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f0:	4b58      	ldr	r3, [pc, #352]	; (8001854 <HAL_GPIO_Init+0x2d8>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a57      	ldr	r2, [pc, #348]	; (8001854 <HAL_GPIO_Init+0x2d8>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b55      	ldr	r3, [pc, #340]	; (8001854 <HAL_GPIO_Init+0x2d8>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001708:	4a53      	ldr	r2, [pc, #332]	; (8001858 <HAL_GPIO_Init+0x2dc>)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001732:	d019      	beq.n	8001768 <HAL_GPIO_Init+0x1ec>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a49      	ldr	r2, [pc, #292]	; (800185c <HAL_GPIO_Init+0x2e0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d013      	beq.n	8001764 <HAL_GPIO_Init+0x1e8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a48      	ldr	r2, [pc, #288]	; (8001860 <HAL_GPIO_Init+0x2e4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00d      	beq.n	8001760 <HAL_GPIO_Init+0x1e4>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a47      	ldr	r2, [pc, #284]	; (8001864 <HAL_GPIO_Init+0x2e8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d007      	beq.n	800175c <HAL_GPIO_Init+0x1e0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a46      	ldr	r2, [pc, #280]	; (8001868 <HAL_GPIO_Init+0x2ec>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d101      	bne.n	8001758 <HAL_GPIO_Init+0x1dc>
 8001754:	2304      	movs	r3, #4
 8001756:	e008      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001758:	2305      	movs	r3, #5
 800175a:	e006      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 800175c:	2303      	movs	r3, #3
 800175e:	e004      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001760:	2302      	movs	r3, #2
 8001762:	e002      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_GPIO_Init+0x1ee>
 8001768:	2300      	movs	r3, #0
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	f002 0203 	and.w	r2, r2, #3
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	4093      	lsls	r3, r2
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800177a:	4937      	ldr	r1, [pc, #220]	; (8001858 <HAL_GPIO_Init+0x2dc>)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <HAL_GPIO_Init+0x2f0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017ac:	4a2f      	ldr	r2, [pc, #188]	; (800186c <HAL_GPIO_Init+0x2f0>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_GPIO_Init+0x2f0>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017d6:	4a25      	ldr	r2, [pc, #148]	; (800186c <HAL_GPIO_Init+0x2f0>)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_GPIO_Init+0x2f0>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_GPIO_Init+0x2f0>)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_GPIO_Init+0x2f0>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_GPIO_Init+0x2f0>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	f47f aea3 	bne.w	800158c <HAL_GPIO_Init+0x10>
  }
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000
 800185c:	48000400 	.word	0x48000400
 8001860:	48000800 	.word	0x48000800
 8001864:	48000c00 	.word	0x48000c00
 8001868:	48001000 	.word	0x48001000
 800186c:	40010400 	.word	0x40010400

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800188c:	e002      	b.n	8001894 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e081      	b.n	80019b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fbc4 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2224      	movs	r2, #36	; 0x24
 80018d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001900:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	e006      	b.n	8001928 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001926:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d104      	bne.n	800193a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001938:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800195c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69d9      	ldr	r1, [r3, #28]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1a      	ldr	r2, [r3, #32]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2220      	movs	r2, #32
 80019a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d138      	bne.n	8001a46 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019de:	2302      	movs	r3, #2
 80019e0:	e032      	b.n	8001a48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2224      	movs	r2, #36	; 0x24
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a10:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6819      	ldr	r1, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0201 	orr.w	r2, r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a46:	2302      	movs	r3, #2
  }
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	d139      	bne.n	8001ade <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e033      	b.n	8001ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ade:	2302      	movs	r3, #2
  }
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aee:	b08b      	sub	sp, #44	; 0x2c
 8001af0:	af06      	add	r7, sp, #24
 8001af2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0d0      	b.n	8001ca0 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fb24 	bl	8001160 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 ff29 	bl	800397c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	e04c      	b.n	8001bca <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	3301      	adds	r3, #1
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	b298      	uxth	r0, r3
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3336      	adds	r3, #54	; 0x36
 8001b6e:	4602      	mov	r2, r0
 8001b70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	3303      	adds	r3, #3
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	3338      	adds	r3, #56	; 0x38
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	333c      	adds	r3, #60	; 0x3c
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3340      	adds	r3, #64	; 0x40
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3ad      	bcc.n	8001b30 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e044      	b.n	8001c64 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	3301      	adds	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d3b5      	bcc.n	8001bda <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	687e      	ldr	r6, [r7, #4]
 8001c76:	466d      	mov	r5, sp
 8001c78:	f106 0410 	add.w	r4, r6, #16
 8001c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	602b      	str	r3, [r5, #0]
 8001c84:	1d33      	adds	r3, r6, #4
 8001c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c88:	6838      	ldr	r0, [r7, #0]
 8001c8a:	f001 fe92 	bl	80039b2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f000 bef4 	b.w	8002aaa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 816a 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cd2:	4bb3      	ldr	r3, [pc, #716]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cde:	4bb0      	ldr	r3, [pc, #704]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d159      	bne.n	8001d9e <HAL_RCC_OscConfig+0xf6>
 8001cea:	4bad      	ldr	r3, [pc, #692]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf6:	d152      	bne.n	8001d9e <HAL_RCC_OscConfig+0xf6>
 8001cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d0c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d102      	bne.n	8001d2a <HAL_RCC_OscConfig+0x82>
 8001d24:	4b9e      	ldr	r3, [pc, #632]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	e015      	b.n	8001d56 <HAL_RCC_OscConfig+0xae>
 8001d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d42:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d46:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001d52:	4b93      	ldr	r3, [pc, #588]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d5a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001d5e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d62:	fa92 f2a2 	rbit	r2, r2
 8001d66:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001d6a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001d6e:	fab2 f282 	clz	r2, r2
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f042 0220 	orr.w	r2, r2, #32
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	f002 021f 	and.w	r2, r2, #31
 8001d7e:	2101      	movs	r1, #1
 8001d80:	fa01 f202 	lsl.w	r2, r1, r2
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 810c 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x2fc>
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f040 8106 	bne.w	8001fa4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f000 be86 	b.w	8002aaa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da8:	d106      	bne.n	8001db8 <HAL_RCC_OscConfig+0x110>
 8001daa:	4b7d      	ldr	r3, [pc, #500]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7c      	ldr	r2, [pc, #496]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e030      	b.n	8001e1a <HAL_RCC_OscConfig+0x172>
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x134>
 8001dc2:	4b77      	ldr	r3, [pc, #476]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a76      	ldr	r2, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b74      	ldr	r3, [pc, #464]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a73      	ldr	r2, [pc, #460]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e01e      	b.n	8001e1a <HAL_RCC_OscConfig+0x172>
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x15a>
 8001de8:	4b6d      	ldr	r3, [pc, #436]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a6c      	ldr	r2, [pc, #432]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a69      	ldr	r2, [pc, #420]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e00b      	b.n	8001e1a <HAL_RCC_OscConfig+0x172>
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a66      	ldr	r2, [pc, #408]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b64      	ldr	r3, [pc, #400]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a63      	ldr	r2, [pc, #396]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e18:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e1a:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	f023 020f 	bic.w	r2, r3, #15
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	495d      	ldr	r1, [pc, #372]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d059      	beq.n	8001eec <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fab2 	bl	80013a0 <HAL_GetTick>
 8001e3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e42:	f7ff faad 	bl	80013a0 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d902      	bls.n	8001e58 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	f000 be29 	b.w	8002aaa <HAL_RCC_OscConfig+0xe02>
 8001e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001e6c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d102      	bne.n	8001e8a <HAL_RCC_OscConfig+0x1e2>
 8001e84:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x20e>
 8001e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ea6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ebe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ec2:	fa92 f2a2 	rbit	r2, r2
 8001ec6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001eca:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ece:	fab2 f282 	clz	r2, r2
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	f042 0220 	orr.w	r2, r2, #32
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f002 021f 	and.w	r2, r2, #31
 8001ede:	2101      	movs	r1, #1
 8001ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0ab      	beq.n	8001e42 <HAL_RCC_OscConfig+0x19a>
 8001eea:	e05c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff fa58 	bl	80013a0 <HAL_GetTick>
 8001ef0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef6:	f7ff fa53 	bl	80013a0 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d902      	bls.n	8001f0c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	f000 bdcf 	b.w	8002aaa <HAL_RCC_OscConfig+0xe02>
 8001f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f10:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001f20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d102      	bne.n	8001f3e <HAL_RCC_OscConfig+0x296>
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	e015      	b.n	8001f6a <HAL_RCC_OscConfig+0x2c2>
 8001f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f42:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f56:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_RCC_OscConfig+0x2f8>)
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f6e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001f72:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f76:	fa92 f2a2 	rbit	r2, r2
 8001f7a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001f7e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001f82:	fab2 f282 	clz	r2, r2
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f042 0220 	orr.w	r2, r2, #32
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f002 021f 	and.w	r2, r2, #31
 8001f92:	2101      	movs	r1, #1
 8001f94:	fa01 f202 	lsl.w	r2, r1, r2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ab      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x24e>
 8001f9e:	e002      	b.n	8001fa6 <HAL_RCC_OscConfig+0x2fe>
 8001fa0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 816f 	beq.w	8002294 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fb6:	4bd0      	ldr	r3, [pc, #832]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fc2:	4bcd      	ldr	r3, [pc, #820]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d16c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x400>
 8001fce:	4bca      	ldr	r3, [pc, #808]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d166      	bne.n	80020a8 <HAL_RCC_OscConfig+0x400>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001fec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d102      	bne.n	800200a <HAL_RCC_OscConfig+0x362>
 8002004:	4bbc      	ldr	r3, [pc, #752]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	e013      	b.n	8002032 <HAL_RCC_OscConfig+0x38a>
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800201c:	2302      	movs	r3, #2
 800201e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002022:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800202e:	4bb2      	ldr	r3, [pc, #712]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	2202      	movs	r2, #2
 8002034:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002038:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800203c:	fa92 f2a2 	rbit	r2, r2
 8002040:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002044:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002048:	fab2 f282 	clz	r2, r2
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	f042 0220 	orr.w	r2, r2, #32
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f002 021f 	and.w	r2, r2, #31
 8002058:	2101      	movs	r1, #1
 800205a:	fa01 f202 	lsl.w	r2, r1, r2
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <HAL_RCC_OscConfig+0x3cc>
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d002      	beq.n	8002074 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f000 bd1b 	b.w	8002aaa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4ba0      	ldr	r3, [pc, #640]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	21f8      	movs	r1, #248	; 0xf8
 8002084:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800208c:	fa91 f1a1 	rbit	r1, r1
 8002090:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002094:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002098:	fab1 f181 	clz	r1, r1
 800209c:	b2c9      	uxtb	r1, r1
 800209e:	408b      	lsls	r3, r1
 80020a0:	4995      	ldr	r1, [pc, #596]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	e0f5      	b.n	8002294 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8085 	beq.w	80021be <HAL_RCC_OscConfig+0x516>
 80020b4:	2301      	movs	r3, #1
 80020b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80020c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	461a      	mov	r2, r3
 80020dc:	2301      	movs	r3, #1
 80020de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff f95e 	bl	80013a0 <HAL_GetTick>
 80020e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff f959 	bl	80013a0 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d902      	bls.n	8002100 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	f000 bcd5 	b.w	8002aaa <HAL_RCC_OscConfig+0xe02>
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002112:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	095b      	lsrs	r3, r3, #5
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d102      	bne.n	8002130 <HAL_RCC_OscConfig+0x488>
 800212a:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	e013      	b.n	8002158 <HAL_RCC_OscConfig+0x4b0>
 8002130:	2302      	movs	r3, #2
 8002132:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002142:	2302      	movs	r3, #2
 8002144:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002148:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002154:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	2202      	movs	r2, #2
 800215a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800215e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002162:	fa92 f2a2 	rbit	r2, r2
 8002166:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800216a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800216e:	fab2 f282 	clz	r2, r2
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	f042 0220 	orr.w	r2, r2, #32
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f002 021f 	and.w	r2, r2, #31
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f202 	lsl.w	r2, r1, r2
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0af      	beq.n	80020ea <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	21f8      	movs	r1, #248	; 0xf8
 800219a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80021a2:	fa91 f1a1 	rbit	r1, r1
 80021a6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80021aa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80021ae:	fab1 f181 	clz	r1, r1
 80021b2:	b2c9      	uxtb	r1, r1
 80021b4:	408b      	lsls	r3, r1
 80021b6:	4950      	ldr	r1, [pc, #320]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
 80021bc:	e06a      	b.n	8002294 <HAL_RCC_OscConfig+0x5ec>
 80021be:	2301      	movs	r3, #1
 80021c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80021d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	461a      	mov	r2, r3
 80021e6:	2300      	movs	r3, #0
 80021e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff f8d9 	bl	80013a0 <HAL_GetTick>
 80021ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	e00a      	b.n	800220a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f4:	f7ff f8d4 	bl	80013a0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d902      	bls.n	800220a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	f000 bc50 	b.w	8002aaa <HAL_RCC_OscConfig+0xe02>
 800220a:	2302      	movs	r3, #2
 800220c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800221c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	b2db      	uxtb	r3, r3
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d102      	bne.n	800223a <HAL_RCC_OscConfig+0x592>
 8002234:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	e013      	b.n	8002262 <HAL_RCC_OscConfig+0x5ba>
 800223a:	2302      	movs	r3, #2
 800223c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800224c:	2302      	movs	r3, #2
 800224e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002252:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800225e:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <HAL_RCC_OscConfig+0x650>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	2202      	movs	r2, #2
 8002264:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002268:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800226c:	fa92 f2a2 	rbit	r2, r2
 8002270:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002274:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002278:	fab2 f282 	clz	r2, r2
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	f042 0220 	orr.w	r2, r2, #32
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f002 021f 	and.w	r2, r2, #31
 8002288:	2101      	movs	r1, #1
 800228a:	fa01 f202 	lsl.w	r2, r1, r2
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1af      	bne.n	80021f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80da 	beq.w	8002458 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d069      	beq.n	8002382 <HAL_RCC_OscConfig+0x6da>
 80022ae:	2301      	movs	r3, #1
 80022b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80022c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_OscConfig+0x654>)
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	461a      	mov	r2, r3
 80022d4:	2301      	movs	r3, #1
 80022d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7ff f862 	bl	80013a0 <HAL_GetTick>
 80022dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e0:	e00e      	b.n	8002300 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e2:	f7ff f85d 	bl	80013a0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d906      	bls.n	8002300 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e3d9      	b.n	8002aaa <HAL_RCC_OscConfig+0xe02>
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	10908120 	.word	0x10908120
 8002300:	2302      	movs	r3, #2
 8002302:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002312:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002316:	2202      	movs	r2, #2
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	fa93 f2a3 	rbit	r2, r3
 8002324:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800232e:	2202      	movs	r2, #2
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002340:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	4ba5      	ldr	r3, [pc, #660]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002346:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800234a:	2102      	movs	r1, #2
 800234c:	6019      	str	r1, [r3, #0]
 800234e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	fa93 f1a3 	rbit	r1, r3
 8002358:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800235c:	6019      	str	r1, [r3, #0]
  return result;
 800235e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0b0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x63a>
 8002380:	e06a      	b.n	8002458 <HAL_RCC_OscConfig+0x7b0>
 8002382:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	fa93 f2a3 	rbit	r2, r3
 8002394:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002398:	601a      	str	r2, [r3, #0]
  return result;
 800239a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800239e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b8c      	ldr	r3, [pc, #560]	; (80025dc <HAL_RCC_OscConfig+0x934>)
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	461a      	mov	r2, r3
 80023b0:	2300      	movs	r3, #0
 80023b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b4:	f7fe fff4 	bl	80013a0 <HAL_GetTick>
 80023b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	e009      	b.n	80023d2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023be:	f7fe ffef 	bl	80013a0 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e36b      	b.n	8002aaa <HAL_RCC_OscConfig+0xe02>
 80023d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023d6:	2202      	movs	r2, #2
 80023d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	fa93 f2a3 	rbit	r2, r3
 80023e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023ee:	2202      	movs	r2, #2
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	fa93 f2a3 	rbit	r2, r3
 80023fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002406:	2202      	movs	r2, #2
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002418:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241a:	4b6f      	ldr	r3, [pc, #444]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 800241c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002422:	2102      	movs	r1, #2
 8002424:	6019      	str	r1, [r3, #0]
 8002426:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	fa93 f1a3 	rbit	r1, r3
 8002430:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002434:	6019      	str	r1, [r3, #0]
  return result;
 8002436:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1b2      	bne.n	80023be <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8158 	beq.w	8002718 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d112      	bne.n	80024a0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b57      	ldr	r3, [pc, #348]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a56      	ldr	r2, [pc, #344]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	61d3      	str	r3, [r2, #28]
 8002486:	4b54      	ldr	r3, [pc, #336]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800248e:	f107 0308 	add.w	r3, r7, #8
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	4b4f      	ldr	r3, [pc, #316]	; (80025e0 <HAL_RCC_OscConfig+0x938>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d11a      	bne.n	80024e2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ac:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <HAL_RCC_OscConfig+0x938>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a4b      	ldr	r2, [pc, #300]	; (80025e0 <HAL_RCC_OscConfig+0x938>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b8:	f7fe ff72 	bl	80013a0 <HAL_GetTick>
 80024bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	e009      	b.n	80024d6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7fe ff6d 	bl	80013a0 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e2e9      	b.n	8002aaa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <HAL_RCC_OscConfig+0x938>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0ef      	beq.n	80024c2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x852>
 80024ec:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a39      	ldr	r2, [pc, #228]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6213      	str	r3, [r2, #32]
 80024f8:	e02f      	b.n	800255a <HAL_RCC_OscConfig+0x8b2>
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10c      	bne.n	800251e <HAL_RCC_OscConfig+0x876>
 8002504:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a33      	ldr	r2, [pc, #204]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a30      	ldr	r2, [pc, #192]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002516:	f023 0304 	bic.w	r3, r3, #4
 800251a:	6213      	str	r3, [r2, #32]
 800251c:	e01d      	b.n	800255a <HAL_RCC_OscConfig+0x8b2>
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b05      	cmp	r3, #5
 8002526:	d10c      	bne.n	8002542 <HAL_RCC_OscConfig+0x89a>
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	e00b      	b.n	800255a <HAL_RCC_OscConfig+0x8b2>
 8002542:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d06b      	beq.n	800263c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002564:	f7fe ff1c 	bl	80013a0 <HAL_GetTick>
 8002568:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	e00b      	b.n	8002586 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe ff17 	bl	80013a0 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e291      	b.n	8002aaa <HAL_RCC_OscConfig+0xe02>
 8002586:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800258a:	2202      	movs	r2, #2
 800258c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	fa93 f2a3 	rbit	r2, r3
 8002598:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025a2:	2202      	movs	r2, #2
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fa93 f2a3 	rbit	r2, r3
 80025b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025b4:	601a      	str	r2, [r3, #0]
  return result;
 80025b6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f043 0302 	orr.w	r3, r3, #2
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d109      	bne.n	80025e4 <HAL_RCC_OscConfig+0x93c>
 80025d0:	4b01      	ldr	r3, [pc, #4]	; (80025d8 <HAL_RCC_OscConfig+0x930>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	e014      	b.n	8002600 <HAL_RCC_OscConfig+0x958>
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	10908120 	.word	0x10908120
 80025e0:	40007000 	.word	0x40007000
 80025e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025e8:	2202      	movs	r2, #2
 80025ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	fa93 f2a3 	rbit	r2, r3
 80025f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	4bbb      	ldr	r3, [pc, #748]	; (80028ec <HAL_RCC_OscConfig+0xc44>)
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002604:	2102      	movs	r1, #2
 8002606:	6011      	str	r1, [r2, #0]
 8002608:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	fa92 f1a2 	rbit	r1, r2
 8002612:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002616:	6011      	str	r1, [r2, #0]
  return result;
 8002618:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	fab2 f282 	clz	r2, r2
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	f002 021f 	and.w	r2, r2, #31
 800262e:	2101      	movs	r1, #1
 8002630:	fa01 f202 	lsl.w	r2, r1, r2
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d099      	beq.n	800256e <HAL_RCC_OscConfig+0x8c6>
 800263a:	e063      	b.n	8002704 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263c:	f7fe feb0 	bl	80013a0 <HAL_GetTick>
 8002640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	e00b      	b.n	800265e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe feab 	bl	80013a0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e225      	b.n	8002aaa <HAL_RCC_OscConfig+0xe02>
 800265e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002662:	2202      	movs	r2, #2
 8002664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fa93 f2a3 	rbit	r2, r3
 8002670:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800267a:	2202      	movs	r2, #2
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	fa93 f2a3 	rbit	r2, r3
 8002688:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800268c:	601a      	str	r2, [r3, #0]
  return result;
 800268e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002692:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d102      	bne.n	80026ae <HAL_RCC_OscConfig+0xa06>
 80026a8:	4b90      	ldr	r3, [pc, #576]	; (80028ec <HAL_RCC_OscConfig+0xc44>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	e00d      	b.n	80026ca <HAL_RCC_OscConfig+0xa22>
 80026ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026b2:	2202      	movs	r2, #2
 80026b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	4b89      	ldr	r3, [pc, #548]	; (80028ec <HAL_RCC_OscConfig+0xc44>)
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026ce:	2102      	movs	r1, #2
 80026d0:	6011      	str	r1, [r2, #0]
 80026d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	fa92 f1a2 	rbit	r1, r2
 80026dc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80026e0:	6011      	str	r1, [r2, #0]
  return result;
 80026e2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	fab2 f282 	clz	r2, r2
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f002 021f 	and.w	r2, r2, #31
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1a0      	bne.n	8002646 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002704:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270c:	4b77      	ldr	r3, [pc, #476]	; (80028ec <HAL_RCC_OscConfig+0xc44>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	4a76      	ldr	r2, [pc, #472]	; (80028ec <HAL_RCC_OscConfig+0xc44>)
 8002712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002716:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 81c2 	beq.w	8002aa8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002724:	4b71      	ldr	r3, [pc, #452]	; (80028ec <HAL_RCC_OscConfig+0xc44>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	f000 819c 	beq.w	8002a6a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b02      	cmp	r3, #2
 800273a:	f040 8114 	bne.w	8002966 <HAL_RCC_OscConfig+0xcbe>
 800273e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002742:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	fa93 f2a3 	rbit	r2, r3
 8002752:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002756:	601a      	str	r2, [r3, #0]
  return result;
 8002758:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800275c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002768:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	461a      	mov	r2, r3
 8002770:	2300      	movs	r3, #0
 8002772:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fe fe14 	bl	80013a0 <HAL_GetTick>
 8002778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277c:	e009      	b.n	8002792 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277e:	f7fe fe0f 	bl	80013a0 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e18b      	b.n	8002aaa <HAL_RCC_OscConfig+0xe02>
 8002792:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002796:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027aa:	601a      	str	r2, [r3, #0]
  return result;
 80027ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_OscConfig+0xb24>
 80027c6:	4b49      	ldr	r3, [pc, #292]	; (80028ec <HAL_RCC_OscConfig+0xc44>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e01b      	b.n	8002804 <HAL_RCC_OscConfig+0xb5c>
 80027cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	fa93 f2a3 	rbit	r2, r3
 80027e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	fa93 f2a3 	rbit	r2, r3
 80027fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <HAL_RCC_OscConfig+0xc44>)
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002808:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800280c:	6011      	str	r1, [r2, #0]
 800280e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	fa92 f1a2 	rbit	r1, r2
 8002818:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800281c:	6011      	str	r1, [r2, #0]
  return result;
 800281e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	fab2 f282 	clz	r2, r2
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	f042 0220 	orr.w	r2, r2, #32
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	f002 021f 	and.w	r2, r2, #31
 8002834:	2101      	movs	r1, #1
 8002836:	fa01 f202 	lsl.w	r2, r1, r2
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d19e      	bne.n	800277e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002840:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <HAL_RCC_OscConfig+0xc44>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	430b      	orrs	r3, r1
 8002856:	4925      	ldr	r1, [pc, #148]	; (80028ec <HAL_RCC_OscConfig+0xc44>)
 8002858:	4313      	orrs	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
 800285c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002864:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002874:	601a      	str	r2, [r3, #0]
  return result;
 8002876:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800287a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002886:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	461a      	mov	r2, r3
 800288e:	2301      	movs	r3, #1
 8002890:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fd85 	bl	80013a0 <HAL_GetTick>
 8002896:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800289a:	e009      	b.n	80028b0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe fd80 	bl	80013a0 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0fc      	b.n	8002aaa <HAL_RCC_OscConfig+0xe02>
 80028b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	fa93 f2a3 	rbit	r2, r3
 80028c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028c8:	601a      	str	r2, [r3, #0]
  return result;
 80028ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_RCC_OscConfig+0xc48>
 80028e4:	4b01      	ldr	r3, [pc, #4]	; (80028ec <HAL_RCC_OscConfig+0xc44>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	e01e      	b.n	8002928 <HAL_RCC_OscConfig+0xc80>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fa93 f2a3 	rbit	r2, r3
 8002904:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800290e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	fa93 f2a3 	rbit	r2, r3
 800291e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_RCC_OscConfig+0xe0c>)
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800292c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002930:	6011      	str	r1, [r2, #0]
 8002932:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	fa92 f1a2 	rbit	r1, r2
 800293c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002940:	6011      	str	r1, [r2, #0]
  return result;
 8002942:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	fab2 f282 	clz	r2, r2
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	f002 021f 	and.w	r2, r2, #31
 8002958:	2101      	movs	r1, #1
 800295a:	fa01 f202 	lsl.w	r2, r1, r2
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d09b      	beq.n	800289c <HAL_RCC_OscConfig+0xbf4>
 8002964:	e0a0      	b.n	8002aa8 <HAL_RCC_OscConfig+0xe00>
 8002966:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800296a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800296e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800297e:	601a      	str	r2, [r3, #0]
  return result;
 8002980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002984:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002990:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	461a      	mov	r2, r3
 8002998:	2300      	movs	r3, #0
 800299a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fe fd00 	bl	80013a0 <HAL_GetTick>
 80029a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a4:	e009      	b.n	80029ba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe fcfb 	bl	80013a0 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e077      	b.n	8002aaa <HAL_RCC_OscConfig+0xe02>
 80029ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	fa93 f2a3 	rbit	r2, r3
 80029ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d2:	601a      	str	r2, [r3, #0]
  return result;
 80029d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_OscConfig+0xd4c>
 80029ee:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_RCC_OscConfig+0xe0c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	e01b      	b.n	8002a2c <HAL_RCC_OscConfig+0xd84>
 80029f4:	f107 0320 	add.w	r3, r7, #32
 80029f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f107 0320 	add.w	r3, r7, #32
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f107 0318 	add.w	r3, r7, #24
 8002a12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f107 0318 	add.w	r3, r7, #24
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	fa93 f2a3 	rbit	r2, r3
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <HAL_RCC_OscConfig+0xe0c>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	f107 0210 	add.w	r2, r7, #16
 8002a30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a34:	6011      	str	r1, [r2, #0]
 8002a36:	f107 0210 	add.w	r2, r7, #16
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	fa92 f1a2 	rbit	r1, r2
 8002a40:	f107 020c 	add.w	r2, r7, #12
 8002a44:	6011      	str	r1, [r2, #0]
  return result;
 8002a46:	f107 020c 	add.w	r2, r7, #12
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	fab2 f282 	clz	r2, r2
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	f042 0220 	orr.w	r2, r2, #32
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	f002 021f 	and.w	r2, r2, #31
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d19e      	bne.n	80029a6 <HAL_RCC_OscConfig+0xcfe>
 8002a68:	e01e      	b.n	8002aa8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e018      	b.n	8002aaa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <HAL_RCC_OscConfig+0xe0c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a80:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b09e      	sub	sp, #120	; 0x78
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e162      	b.n	8002d96 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b90      	ldr	r3, [pc, #576]	; (8002d14 <HAL_RCC_ClockConfig+0x25c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d910      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b8d      	ldr	r3, [pc, #564]	; (8002d14 <HAL_RCC_ClockConfig+0x25c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0207 	bic.w	r2, r3, #7
 8002ae6:	498b      	ldr	r1, [pc, #556]	; (8002d14 <HAL_RCC_ClockConfig+0x25c>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <HAL_RCC_ClockConfig+0x25c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e14a      	b.n	8002d96 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b82      	ldr	r3, [pc, #520]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	497f      	ldr	r1, [pc, #508]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80dc 	beq.w	8002ce4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d13c      	bne.n	8002bae <HAL_RCC_ClockConfig+0xf6>
 8002b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d102      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xa6>
 8002b58:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	e00f      	b.n	8002b7e <HAL_RCC_ClockConfig+0xc6>
 8002b5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	667b      	str	r3, [r7, #100]	; 0x64
 8002b6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b70:	663b      	str	r3, [r7, #96]	; 0x60
 8002b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b7a:	4b67      	ldr	r3, [pc, #412]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b82:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b86:	fa92 f2a2 	rbit	r2, r2
 8002b8a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b8e:	fab2 f282 	clz	r2, r2
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	f042 0220 	orr.w	r2, r2, #32
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f002 021f 	and.w	r2, r2, #31
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d17b      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0f3      	b.n	8002d96 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d13c      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x178>
 8002bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d102      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x128>
 8002bda:	4b4f      	ldr	r3, [pc, #316]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	e00f      	b.n	8002c00 <HAL_RCC_ClockConfig+0x148>
 8002be0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	647b      	str	r3, [r7, #68]	; 0x44
 8002bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8002bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfc:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c04:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c08:	fa92 f2a2 	rbit	r2, r2
 8002c0c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f042 0220 	orr.w	r2, r2, #32
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f002 021f 	and.w	r2, r2, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f202 	lsl.w	r2, r1, r2
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d13a      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0b2      	b.n	8002d96 <HAL_RCC_ClockConfig+0x2de>
 8002c30:	2302      	movs	r3, #2
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d102      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x1a0>
 8002c52:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	e00d      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1bc>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	2302      	movs	r3, #2
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2202      	movs	r2, #2
 8002c76:	61ba      	str	r2, [r7, #24]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	fa92 f2a2 	rbit	r2, r2
 8002c7e:	617a      	str	r2, [r7, #20]
  return result;
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	fab2 f282 	clz	r2, r2
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f042 0220 	orr.w	r2, r2, #32
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f002 021f 	and.w	r2, r2, #31
 8002c92:	2101      	movs	r1, #1
 8002c94:	fa01 f202 	lsl.w	r2, r1, r2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e079      	b.n	8002d96 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	491a      	ldr	r1, [pc, #104]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb4:	f7fe fb74 	bl	80013a0 <HAL_GetTick>
 8002cb8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fe fb70 	bl	80013a0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e061      	b.n	8002d96 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_RCC_ClockConfig+0x260>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 020c 	and.w	r2, r3, #12
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1eb      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_ClockConfig+0x25c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d214      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_RCC_ClockConfig+0x25c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 0207 	bic.w	r2, r3, #7
 8002cfa:	4906      	ldr	r1, [pc, #24]	; (8002d14 <HAL_RCC_ClockConfig+0x25c>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <HAL_RCC_ClockConfig+0x25c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e040      	b.n	8002d96 <HAL_RCC_ClockConfig+0x2de>
 8002d14:	40022000 	.word	0x40022000
 8002d18:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	491a      	ldr	r1, [pc, #104]	; (8002da0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4912      	ldr	r1, [pc, #72]	; (8002da0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d5a:	f000 f829 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4601      	mov	r1, r0
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <HAL_RCC_ClockConfig+0x2e8>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d68:	22f0      	movs	r2, #240	; 0xf0
 8002d6a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	fa92 f2a2 	rbit	r2, r2
 8002d72:	60fa      	str	r2, [r7, #12]
  return result;
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	fab2 f282 	clz	r2, r2
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	40d3      	lsrs	r3, r2
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_RCC_ClockConfig+0x2ec>)
 8002d80:	5cd3      	ldrb	r3, [r2, r3]
 8002d82:	fa21 f303 	lsr.w	r3, r1, r3
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <HAL_RCC_ClockConfig+0x2f0>)
 8002d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_RCC_ClockConfig+0x2f4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fa2a 	bl	80011e8 <HAL_InitTick>
  
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3778      	adds	r7, #120	; 0x78
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08007050 	.word	0x08007050
 8002da8:	2000015c 	.word	0x2000015c
 8002dac:	20000160 	.word	0x20000160

08002db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b08b      	sub	sp, #44	; 0x2c
 8002db4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002dca:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d002      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x30>
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dde:	e03c      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de0:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002de2:	623b      	str	r3, [r7, #32]
      break;
 8002de4:	e03c      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002dec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002df0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	fa92 f2a2 	rbit	r2, r2
 8002df8:	607a      	str	r2, [r7, #4]
  return result;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	fab2 f282 	clz	r2, r2
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	40d3      	lsrs	r3, r2
 8002e04:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	220f      	movs	r2, #15
 8002e14:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	fa92 f2a2 	rbit	r2, r2
 8002e1c:	60fa      	str	r2, [r7, #12]
  return result;
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	fab2 f282 	clz	r2, r2
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	40d3      	lsrs	r3, r2
 8002e28:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e2a:	5cd3      	ldrb	r3, [r2, r3]
 8002e2c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
 8002e48:	e004      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	623b      	str	r3, [r7, #32]
      break;
 8002e58:	e002      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e5c:	623b      	str	r3, [r7, #32]
      break;
 8002e5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e60:	6a3b      	ldr	r3, [r7, #32]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	372c      	adds	r7, #44	; 0x2c
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	007a1200 	.word	0x007a1200
 8002e78:	08007068 	.word	0x08007068
 8002e7c:	08007078 	.word	0x08007078
 8002e80:	003d0900 	.word	0x003d0900

08002e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	2000015c 	.word	0x2000015c

08002e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ea2:	f7ff ffef 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002ea6:	4601      	mov	r1, r0
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002eb0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002eb4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	fa92 f2a2 	rbit	r2, r2
 8002ebc:	603a      	str	r2, [r7, #0]
  return result;
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	fab2 f282 	clz	r2, r2
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	40d3      	lsrs	r3, r2
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002eca:	5cd3      	ldrb	r3, [r2, r3]
 8002ecc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08007060 	.word	0x08007060

08002ee0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	220f      	movs	r2, #15
 8002eee:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_RCC_GetClockConfig+0x5c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0203 	and.w	r2, r3, #3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <HAL_RCC_GetClockConfig+0x5c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_RCC_GetClockConfig+0x5c>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_RCC_GetClockConfig+0x5c>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	08db      	lsrs	r3, r3, #3
 8002f1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <HAL_RCC_GetClockConfig+0x60>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0207 	and.w	r2, r3, #7
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	601a      	str	r2, [r3, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40022000 	.word	0x40022000

08002f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b092      	sub	sp, #72	; 0x48
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80d4 	beq.w	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f68:	4b4e      	ldr	r3, [pc, #312]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10e      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f74:	4b4b      	ldr	r3, [pc, #300]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4a4a      	ldr	r2, [pc, #296]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	61d3      	str	r3, [r2, #28]
 8002f80:	4b48      	ldr	r3, [pc, #288]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b45      	ldr	r3, [pc, #276]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b42      	ldr	r3, [pc, #264]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a41      	ldr	r2, [pc, #260]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fe f9f9 	bl	80013a0 <HAL_GetTick>
 8002fae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fe f9f5 	bl	80013a0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b64      	cmp	r3, #100	; 0x64
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e169      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fd0:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8084 	beq.w	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d07c      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff0:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ffe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	4b26      	ldr	r3, [pc, #152]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	461a      	mov	r2, r3
 800301a:	2301      	movs	r3, #1
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	461a      	mov	r2, r3
 800303e:	2300      	movs	r3, #0
 8003040:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003042:	4a18      	ldr	r2, [pc, #96]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003046:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d04b      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fe f9a5 	bl	80013a0 <HAL_GetTick>
 8003056:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003058:	e00a      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe f9a1 	bl	80013a0 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	; 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e113      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003070:	2302      	movs	r3, #2
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
 800307c:	2302      	movs	r3, #2
 800307e:	623b      	str	r3, [r7, #32]
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	61fb      	str	r3, [r7, #28]
  return result;
 8003088:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d108      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800309e:	4b01      	ldr	r3, [pc, #4]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	e00d      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40007000 	.word	0x40007000
 80030ac:	10908100 	.word	0x10908100
 80030b0:	2302      	movs	r3, #2
 80030b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	4b78      	ldr	r3, [pc, #480]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	2202      	movs	r2, #2
 80030c2:	613a      	str	r2, [r7, #16]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	fa92 f2a2 	rbit	r2, r2
 80030ca:	60fa      	str	r2, [r7, #12]
  return result;
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	fab2 f282 	clz	r2, r2
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	f002 021f 	and.w	r2, r2, #31
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f202 	lsl.w	r2, r1, r2
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0b7      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80030ea:	4b6d      	ldr	r3, [pc, #436]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	496a      	ldr	r1, [pc, #424]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003104:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	4a65      	ldr	r2, [pc, #404]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800310a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800311c:	4b60      	ldr	r3, [pc, #384]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	f023 0203 	bic.w	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	495d      	ldr	r1, [pc, #372]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800312a:	4313      	orrs	r3, r2
 800312c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800313a:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	4956      	ldr	r1, [pc, #344]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003148:	4313      	orrs	r3, r2
 800314a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003158:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	494e      	ldr	r1, [pc, #312]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003166:	4313      	orrs	r3, r2
 8003168:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003176:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f023 0210 	bic.w	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4947      	ldr	r1, [pc, #284]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003184:	4313      	orrs	r3, r2
 8003186:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003194:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	493f      	ldr	r1, [pc, #252]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031b2:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f023 0220 	bic.w	r2, r3, #32
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4938      	ldr	r1, [pc, #224]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031d0:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	4930      	ldr	r1, [pc, #192]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031ee:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	4929      	ldr	r1, [pc, #164]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800320c:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	4921      	ldr	r1, [pc, #132]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	491a      	ldr	r1, [pc, #104]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003238:	4313      	orrs	r3, r2
 800323a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	4912      	ldr	r1, [pc, #72]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003256:	4313      	orrs	r3, r2
 8003258:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	490b      	ldr	r1, [pc, #44]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003274:	4313      	orrs	r3, r2
 8003276:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	4903      	ldr	r1, [pc, #12]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3748      	adds	r7, #72	; 0x48
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000

080032a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e09d      	b.n	80033f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d108      	bne.n	80032d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032c6:	d009      	beq.n	80032dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	61da      	str	r2, [r3, #28]
 80032ce:	e005      	b.n	80032dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd fef0 	bl	80010dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003312:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800331c:	d902      	bls.n	8003324 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e002      	b.n	800332a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003328:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003332:	d007      	beq.n	8003344 <HAL_SPI_Init+0xa0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800333c:	d002      	beq.n	8003344 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003386:	ea42 0103 	orr.w	r1, r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	0c1b      	lsrs	r3, r3, #16
 80033a0:	f003 0204 	and.w	r2, r3, #4
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033c0:	ea42 0103 	orr.w	r1, r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e049      	b.n	80034a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d106      	bne.n	8003426 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f841 	bl	80034a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3304      	adds	r3, #4
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f000 f9f1 	bl	8003820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d001      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e04a      	b.n	800356a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a21      	ldr	r2, [pc, #132]	; (8003578 <HAL_TIM_Base_Start_IT+0xbc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d018      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x6c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fe:	d013      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x6c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1d      	ldr	r2, [pc, #116]	; (800357c <HAL_TIM_Base_Start_IT+0xc0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00e      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x6c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_TIM_Base_Start_IT+0xc4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d009      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x6c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <HAL_TIM_Base_Start_IT+0xc8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x6c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a19      	ldr	r2, [pc, #100]	; (8003588 <HAL_TIM_Base_Start_IT+0xcc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d115      	bne.n	8003554 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	4b17      	ldr	r3, [pc, #92]	; (800358c <HAL_TIM_Base_Start_IT+0xd0>)
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b06      	cmp	r3, #6
 8003538:	d015      	beq.n	8003566 <HAL_TIM_Base_Start_IT+0xaa>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d011      	beq.n	8003566 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	e008      	b.n	8003566 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e000      	b.n	8003568 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003566:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40012c00 	.word	0x40012c00
 800357c:	40000400 	.word	0x40000400
 8003580:	40000800 	.word	0x40000800
 8003584:	40013400 	.word	0x40013400
 8003588:	40014000 	.word	0x40014000
 800358c:	00010007 	.word	0x00010007

08003590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d122      	bne.n	80035ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d11b      	bne.n	80035ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0202 	mvn.w	r2, #2
 80035bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f905 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 80035d8:	e005      	b.n	80035e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8f7 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f908 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b04      	cmp	r3, #4
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0204 	mvn.w	r2, #4
 8003610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f8db 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8cd 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f8de 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b08      	cmp	r3, #8
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b08      	cmp	r3, #8
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0208 	mvn.w	r2, #8
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2204      	movs	r2, #4
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8b1 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8a3 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f8b4 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0210 	mvn.w	r2, #16
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2208      	movs	r2, #8
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f887 	bl	80037e2 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f879 	bl	80037ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f88a 	bl	80037f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d10e      	bne.n	8003714 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d107      	bne.n	8003714 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0201 	mvn.w	r2, #1
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd fc60 	bl	8000fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	2b80      	cmp	r3, #128	; 0x80
 8003720:	d10e      	bne.n	8003740 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d107      	bne.n	8003740 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f90a 	bl	8003954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374e:	d10e      	bne.n	800376e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b80      	cmp	r3, #128	; 0x80
 800375c:	d107      	bne.n	800376e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f8fd 	bl	8003968 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d10e      	bne.n	800379a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d107      	bne.n	800379a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f838 	bl	800380a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d10e      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d107      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f06f 0220 	mvn.w	r2, #32
 80037be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8bd 	bl	8003940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <TIM_Base_SetConfig+0x104>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00f      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a39      	ldr	r2, [pc, #228]	; (8003928 <TIM_Base_SetConfig+0x108>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a38      	ldr	r2, [pc, #224]	; (800392c <TIM_Base_SetConfig+0x10c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0x38>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a37      	ldr	r2, [pc, #220]	; (8003930 <TIM_Base_SetConfig+0x110>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d108      	bne.n	800386a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2d      	ldr	r2, [pc, #180]	; (8003924 <TIM_Base_SetConfig+0x104>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01b      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003878:	d017      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <TIM_Base_SetConfig+0x108>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a29      	ldr	r2, [pc, #164]	; (800392c <TIM_Base_SetConfig+0x10c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00f      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a28      	ldr	r2, [pc, #160]	; (8003930 <TIM_Base_SetConfig+0x110>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00b      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a27      	ldr	r2, [pc, #156]	; (8003934 <TIM_Base_SetConfig+0x114>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a26      	ldr	r2, [pc, #152]	; (8003938 <TIM_Base_SetConfig+0x118>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_Base_SetConfig+0x8a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a25      	ldr	r2, [pc, #148]	; (800393c <TIM_Base_SetConfig+0x11c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d108      	bne.n	80038bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a10      	ldr	r2, [pc, #64]	; (8003924 <TIM_Base_SetConfig+0x104>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00f      	beq.n	8003908 <TIM_Base_SetConfig+0xe8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a11      	ldr	r2, [pc, #68]	; (8003930 <TIM_Base_SetConfig+0x110>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00b      	beq.n	8003908 <TIM_Base_SetConfig+0xe8>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a10      	ldr	r2, [pc, #64]	; (8003934 <TIM_Base_SetConfig+0x114>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d007      	beq.n	8003908 <TIM_Base_SetConfig+0xe8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <TIM_Base_SetConfig+0x118>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_Base_SetConfig+0xe8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a0e      	ldr	r2, [pc, #56]	; (800393c <TIM_Base_SetConfig+0x11c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d103      	bne.n	8003910 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	615a      	str	r2, [r3, #20]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800
 8003930:	40013400 	.word	0x40013400
 8003934:	40014000 	.word	0x40014000
 8003938:	40014400 	.word	0x40014400
 800393c:	40014800 	.word	0x40014800

08003940 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003984:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003988:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	b29b      	uxth	r3, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	b29b      	uxth	r3, r3
 800399a:	4013      	ands	r3, r2
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039b2:	b084      	sub	sp, #16
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	f107 0014 	add.w	r0, r7, #20
 80039c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	b004      	add	sp, #16
 80039f2:	4770      	bx	lr

080039f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039fa:	f3ef 8305 	mrs	r3, IPSR
 80039fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10f      	bne.n	8003a26 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a06:	f3ef 8310 	mrs	r3, PRIMASK
 8003a0a:	607b      	str	r3, [r7, #4]
  return(result);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <osKernelInitialize+0x32>
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <osKernelInitialize+0x64>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d109      	bne.n	8003a2e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8003a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003a26:	f06f 0305 	mvn.w	r3, #5
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e00c      	b.n	8003a48 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <osKernelInitialize+0x64>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d105      	bne.n	8003a42 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <osKernelInitialize+0x64>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e002      	b.n	8003a48 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003a48:	68fb      	ldr	r3, [r7, #12]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000338 	.word	0x20000338

08003a5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a62:	f3ef 8305 	mrs	r3, IPSR
 8003a66:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a72:	607b      	str	r3, [r7, #4]
  return(result);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <osKernelStart+0x32>
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <osKernelStart+0x64>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d109      	bne.n	8003a96 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a82:	f3ef 8311 	mrs	r3, BASEPRI
 8003a86:	603b      	str	r3, [r7, #0]
  return(result);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003a8e:	f06f 0305 	mvn.w	r3, #5
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e00e      	b.n	8003ab4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <osKernelStart+0x64>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d107      	bne.n	8003aae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <osKernelStart+0x64>)
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003aa4:	f001 fbfa 	bl	800529c <vTaskStartScheduler>
      stat = osOK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	e002      	b.n	8003ab4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000338 	.word	0x20000338

08003ac4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b092      	sub	sp, #72	; 0x48
 8003ac8:	af04      	add	r7, sp, #16
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad4:	f3ef 8305 	mrs	r3, IPSR
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f040 8094 	bne.w	8003c0a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae6:	623b      	str	r3, [r7, #32]
  return(result);
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 808d 	bne.w	8003c0a <osThreadNew+0x146>
 8003af0:	4b48      	ldr	r3, [pc, #288]	; (8003c14 <osThreadNew+0x150>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d106      	bne.n	8003b06 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003af8:	f3ef 8311 	mrs	r3, BASEPRI
 8003afc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f040 8082 	bne.w	8003c0a <osThreadNew+0x146>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d07e      	beq.n	8003c0a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003b10:	2318      	movs	r3, #24
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003b14:	2300      	movs	r3, #0
 8003b16:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003b18:	f107 031b 	add.w	r3, r7, #27
 8003b1c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d045      	beq.n	8003bb6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <osThreadNew+0x74>
        name = attr->name;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <osThreadNew+0x9a>
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	2b38      	cmp	r3, #56	; 0x38
 8003b50:	d805      	bhi.n	8003b5e <osThreadNew+0x9a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <osThreadNew+0x9e>
        return (NULL);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e054      	b.n	8003c0c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00e      	beq.n	8003b98 <osThreadNew+0xd4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2bbb      	cmp	r3, #187	; 0xbb
 8003b80:	d90a      	bls.n	8003b98 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d006      	beq.n	8003b98 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <osThreadNew+0xd4>
        mem = 1;
 8003b92:	2301      	movs	r3, #1
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b96:	e010      	b.n	8003bba <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10c      	bne.n	8003bba <osThreadNew+0xf6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d108      	bne.n	8003bba <osThreadNew+0xf6>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d104      	bne.n	8003bba <osThreadNew+0xf6>
          mem = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb4:	e001      	b.n	8003bba <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d110      	bne.n	8003be2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bc8:	9202      	str	r2, [sp, #8]
 8003bca:	9301      	str	r3, [sp, #4]
 8003bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f001 f97c 	bl	8004ed4 <xTaskCreateStatic>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e013      	b.n	8003c0a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d110      	bne.n	8003c0a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f001 f9c6 	bl	8004f8c <xTaskCreate>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d001      	beq.n	8003c0a <osThreadNew+0x146>
          hTask = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c0a:	697b      	ldr	r3, [r7, #20]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3738      	adds	r7, #56	; 0x38
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20000338 	.word	0x20000338

08003c18 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c20:	f3ef 8305 	mrs	r3, IPSR
 8003c24:	613b      	str	r3, [r7, #16]
  return(result);
 8003c26:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10f      	bne.n	8003c4c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c30:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <osDelay+0x34>
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <osDelay+0x58>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d109      	bne.n	8003c54 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c40:	f3ef 8311 	mrs	r3, BASEPRI
 8003c44:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <osDelay+0x3c>
    stat = osErrorISR;
 8003c4c:	f06f 0305 	mvn.w	r3, #5
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e007      	b.n	8003c64 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f001 fae8 	bl	8005234 <vTaskDelay>
    }
  }

  return (stat);
 8003c64:	697b      	ldr	r3, [r7, #20]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000338 	.word	0x20000338

08003c74 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c80:	f3ef 8305 	mrs	r3, IPSR
 8003c84:	613b      	str	r3, [r7, #16]
  return(result);
 8003c86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f040 8085 	bne.w	8003d98 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c92:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d17e      	bne.n	8003d98 <osMutexNew+0x124>
 8003c9a:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <osMutexNew+0x130>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d105      	bne.n	8003cae <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ca2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ca6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d174      	bne.n	8003d98 <osMutexNew+0x124>
    if (attr != NULL) {
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <osMutexNew+0x48>
      type = attr->attr_bits;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	e001      	b.n	8003cc0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <osMutexNew+0x5c>
      rmtx = 1U;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e001      	b.n	8003cd4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d15c      	bne.n	8003d98 <osMutexNew+0x124>
      mem = -1;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d015      	beq.n	8003d16 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d006      	beq.n	8003d00 <osMutexNew+0x8c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b4f      	cmp	r3, #79	; 0x4f
 8003cf8:	d902      	bls.n	8003d00 <osMutexNew+0x8c>
          mem = 1;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	e00c      	b.n	8003d1a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d108      	bne.n	8003d1a <osMutexNew+0xa6>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d104      	bne.n	8003d1a <osMutexNew+0xa6>
            mem = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e001      	b.n	8003d1a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d112      	bne.n	8003d46 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	2004      	movs	r0, #4
 8003d2e:	f000 fb43 	bl	80043b8 <xQueueCreateMutexStatic>
 8003d32:	6278      	str	r0, [r7, #36]	; 0x24
 8003d34:	e016      	b.n	8003d64 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f000 fb3b 	bl	80043b8 <xQueueCreateMutexStatic>
 8003d42:	6278      	str	r0, [r7, #36]	; 0x24
 8003d44:	e00e      	b.n	8003d64 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8003d52:	2004      	movs	r0, #4
 8003d54:	f000 fb18 	bl	8004388 <xQueueCreateMutex>
 8003d58:	6278      	str	r0, [r7, #36]	; 0x24
 8003d5a:	e003      	b.n	8003d64 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f000 fb13 	bl	8004388 <xQueueCreateMutex>
 8003d62:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00c      	beq.n	8003d84 <osMutexNew+0x110>
        if (attr != NULL) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <osMutexNew+0x104>
          name = attr->name;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	e001      	b.n	8003d7c <osMutexNew+0x108>
        } else {
          name = NULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8003d7c:	6979      	ldr	r1, [r7, #20]
 8003d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d80:	f001 f84a 	bl	8004e18 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d006      	beq.n	8003d98 <osMutexNew+0x124>
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3728      	adds	r7, #40	; 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000338 	.word	0x20000338

08003da8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dc6:	f3ef 8305 	mrs	r3, IPSR
 8003dca:	613b      	str	r3, [r7, #16]
  return(result);
 8003dcc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <osMutexAcquire+0x4a>
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <osMutexAcquire+0xb8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d109      	bne.n	8003dfa <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003de6:	f3ef 8311 	mrs	r3, BASEPRI
 8003dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <osMutexAcquire+0x52>
    stat = osErrorISR;
 8003df2:	f06f 0305 	mvn.w	r3, #5
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	e02c      	b.n	8003e54 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d103      	bne.n	8003e08 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8003e00:	f06f 0303 	mvn.w	r3, #3
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	e025      	b.n	8003e54 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d011      	beq.n	8003e32 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	69b8      	ldr	r0, [r7, #24]
 8003e12:	f000 fb20 	bl	8004456 <xQueueTakeMutexRecursive>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d01b      	beq.n	8003e54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8003e22:	f06f 0301 	mvn.w	r3, #1
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	e014      	b.n	8003e54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003e2a:	f06f 0302 	mvn.w	r3, #2
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	e010      	b.n	8003e54 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003e32:	6839      	ldr	r1, [r7, #0]
 8003e34:	69b8      	ldr	r0, [r7, #24]
 8003e36:	f000 fdbb 	bl	80049b0 <xQueueSemaphoreTake>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d009      	beq.n	8003e54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8003e46:	f06f 0301 	mvn.w	r3, #1
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	e002      	b.n	8003e54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003e4e:	f06f 0302 	mvn.w	r3, #2
 8003e52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003e54:	69fb      	ldr	r3, [r7, #28]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000338 	.word	0x20000338

08003e64 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e80:	f3ef 8305 	mrs	r3, IPSR
 8003e84:	613b      	str	r3, [r7, #16]
  return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10f      	bne.n	8003eac <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e90:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <osMutexRelease+0x48>
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <osMutexRelease+0x9c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d109      	bne.n	8003eb4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ea4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8003eac:	f06f 0305 	mvn.w	r3, #5
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	e01f      	b.n	8003ef4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8003eba:	f06f 0303 	mvn.w	r3, #3
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	e018      	b.n	8003ef4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003ec8:	69b8      	ldr	r0, [r7, #24]
 8003eca:	f000 fa90 	bl	80043ee <xQueueGiveMutexRecursive>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d00f      	beq.n	8003ef4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8003ed4:	f06f 0302 	mvn.w	r3, #2
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e00b      	b.n	8003ef4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003edc:	2300      	movs	r3, #0
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	69b8      	ldr	r0, [r7, #24]
 8003ee4:	f000 faee 	bl	80044c4 <xQueueGenericSend>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d002      	beq.n	8003ef4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8003eee:	f06f 0302 	mvn.w	r3, #2
 8003ef2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8003ef4:	69fb      	ldr	r3, [r7, #28]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000338 	.word	0x20000338

08003f04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4a06      	ldr	r2, [pc, #24]	; (8003f34 <vApplicationGetIdleTaskMemory+0x30>)
 8003f1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2280      	movs	r2, #128	; 0x80
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	2000033c 	.word	0x2000033c
 8003f34:	200003f8 	.word	0x200003f8

08003f38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4a06      	ldr	r2, [pc, #24]	; (8003f68 <vApplicationGetTimerTaskMemory+0x30>)
 8003f4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f56:	601a      	str	r2, [r3, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	200005f8 	.word	0x200005f8
 8003f68:	200006b4 	.word	0x200006b4

08003f6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f103 0208 	add.w	r2, r3, #8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f04f 32ff 	mov.w	r2, #4294967295
 8003f84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f103 0208 	add.w	r2, r3, #8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f103 0208 	add.w	r2, r3, #8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	601a      	str	r2, [r3, #0]
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d103      	bne.n	800402e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e00c      	b.n	8004048 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3308      	adds	r3, #8
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e002      	b.n	800403c <vListInsert+0x2e>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	d2f6      	bcs.n	8004036 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	601a      	str	r2, [r3, #0]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6892      	ldr	r2, [r2, #8]
 8004096:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6852      	ldr	r2, [r2, #4]
 80040a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d103      	bne.n	80040b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	1e5a      	subs	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80040fe:	f002 fb69 	bl	80067d4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	68f9      	ldr	r1, [r7, #12]
 800410c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800410e:	fb01 f303 	mul.w	r3, r1, r3
 8004112:	441a      	add	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	3b01      	subs	r3, #1
 8004130:	68f9      	ldr	r1, [r7, #12]
 8004132:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	441a      	add	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	22ff      	movs	r2, #255	; 0xff
 8004142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	22ff      	movs	r2, #255	; 0xff
 800414a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d114      	bne.n	800417e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01a      	beq.n	8004192 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3310      	adds	r3, #16
 8004160:	4618      	mov	r0, r3
 8004162:	f001 fb39 	bl	80057d8 <xTaskRemoveFromEventList>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d012      	beq.n	8004192 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <xQueueGenericReset+0xcc>)
 800416e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	e009      	b.n	8004192 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3310      	adds	r3, #16
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fef2 	bl	8003f6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3324      	adds	r3, #36	; 0x24
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff feed 	bl	8003f6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004192:	f002 fb4f 	bl	8006834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004196:	2301      	movs	r3, #1
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08e      	sub	sp, #56	; 0x38
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041ca:	bf00      	nop
 80041cc:	e7fe      	b.n	80041cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <xQueueGenericCreateStatic+0x52>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <xQueueGenericCreateStatic+0x56>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <xQueueGenericCreateStatic+0x58>
 80041fa:	2300      	movs	r3, #0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	623b      	str	r3, [r7, #32]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <xQueueGenericCreateStatic+0x7e>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <xQueueGenericCreateStatic+0x82>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <xQueueGenericCreateStatic+0x84>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10a      	bne.n	8004242 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	61fb      	str	r3, [r7, #28]
}
 800423e:	bf00      	nop
 8004240:	e7fe      	b.n	8004240 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004242:	2350      	movs	r3, #80	; 0x50
 8004244:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b50      	cmp	r3, #80	; 0x50
 800424a:	d00a      	beq.n	8004262 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	61bb      	str	r3, [r7, #24]
}
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004274:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f843 	bl	800430e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800428a:	4618      	mov	r0, r3
 800428c:	3730      	adds	r7, #48	; 0x30
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004292:	b580      	push	{r7, lr}
 8004294:	b08a      	sub	sp, #40	; 0x28
 8004296:	af02      	add	r7, sp, #8
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <xQueueGenericCreate+0x2a>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	613b      	str	r3, [r7, #16]
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d102      	bne.n	80042c8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	e004      	b.n	80042d2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	fb02 f303 	mul.w	r3, r2, r3
 80042d0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	3350      	adds	r3, #80	; 0x50
 80042d6:	4618      	mov	r0, r3
 80042d8:	f002 fb9e 	bl	8006a18 <pvPortMalloc>
 80042dc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00f      	beq.n	8004304 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	3350      	adds	r3, #80	; 0x50
 80042e8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042f2:	79fa      	ldrb	r2, [r7, #7]
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f805 	bl	800430e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004304:	69bb      	ldr	r3, [r7, #24]
	}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e002      	b.n	8004330 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800433c:	2101      	movs	r1, #1
 800433e:	69b8      	ldr	r0, [r7, #24]
 8004340:	f7ff fec8 	bl	80040d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00e      	beq.n	8004380 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004374:	2300      	movs	r3, #0
 8004376:	2200      	movs	r2, #0
 8004378:	2100      	movs	r1, #0
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f8a2 	bl	80044c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004392:	2301      	movs	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	461a      	mov	r2, r3
 800439e:	6939      	ldr	r1, [r7, #16]
 80043a0:	6978      	ldr	r0, [r7, #20]
 80043a2:	f7ff ff76 	bl	8004292 <xQueueGenericCreate>
 80043a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f7ff ffd3 	bl	8004354 <prvInitialiseMutex>

		return pxNewQueue;
 80043ae:	68fb      	ldr	r3, [r7, #12]
	}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	4603      	mov	r3, r0
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043c4:	2301      	movs	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	6939      	ldr	r1, [r7, #16]
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f7ff fee4 	bl	80041a4 <xQueueGenericCreateStatic>
 80043dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff ffb8 	bl	8004354 <prvInitialiseMutex>

		return pxNewQueue;
 80043e4:	68fb      	ldr	r3, [r7, #12]
	}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80043ee:	b590      	push	{r4, r7, lr}
 80043f0:	b087      	sub	sp, #28
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	60fb      	str	r3, [r7, #12]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	685c      	ldr	r4, [r3, #4]
 800441a:	f001 fba5 	bl	8005b68 <xTaskGetCurrentTaskHandle>
 800441e:	4603      	mov	r3, r0
 8004420:	429c      	cmp	r4, r3
 8004422:	d111      	bne.n	8004448 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	1e5a      	subs	r2, r3, #1
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d105      	bne.n	8004442 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004436:	2300      	movs	r3, #0
 8004438:	2200      	movs	r2, #0
 800443a:	2100      	movs	r1, #0
 800443c:	6938      	ldr	r0, [r7, #16]
 800443e:	f000 f841 	bl	80044c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004442:	2301      	movs	r3, #1
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e001      	b.n	800444c <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800444c:	697b      	ldr	r3, [r7, #20]
	}
 800444e:	4618      	mov	r0, r3
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	bd90      	pop	{r4, r7, pc}

08004456 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004456:	b590      	push	{r4, r7, lr}
 8004458:	b087      	sub	sp, #28
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	60fb      	str	r3, [r7, #12]
}
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	685c      	ldr	r4, [r3, #4]
 8004484:	f001 fb70 	bl	8005b68 <xTaskGetCurrentTaskHandle>
 8004488:	4603      	mov	r3, r0
 800448a:	429c      	cmp	r4, r3
 800448c:	d107      	bne.n	800449e <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004498:	2301      	movs	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e00c      	b.n	80044b8 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800449e:	6839      	ldr	r1, [r7, #0]
 80044a0:	6938      	ldr	r0, [r7, #16]
 80044a2:	f000 fa85 	bl	80049b0 <xQueueSemaphoreTake>
 80044a6:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80044b8:	697b      	ldr	r3, [r7, #20]
	}
 80044ba:	4618      	mov	r0, r3
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd90      	pop	{r4, r7, pc}
	...

080044c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08e      	sub	sp, #56	; 0x38
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044d2:	2300      	movs	r3, #0
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <xQueueGenericSend+0x32>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <xQueueGenericSend+0x40>
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <xQueueGenericSend+0x44>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <xQueueGenericSend+0x46>
 8004508:	2300      	movs	r3, #0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <xQueueGenericSend+0x60>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004520:	bf00      	nop
 8004522:	e7fe      	b.n	8004522 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d103      	bne.n	8004532 <xQueueGenericSend+0x6e>
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <xQueueGenericSend+0x72>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <xQueueGenericSend+0x74>
 8004536:	2300      	movs	r3, #0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <xQueueGenericSend+0x8e>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	623b      	str	r3, [r7, #32]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004552:	f001 fb19 	bl	8005b88 <xTaskGetSchedulerState>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <xQueueGenericSend+0x9e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <xQueueGenericSend+0xa2>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xQueueGenericSend+0xa4>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <xQueueGenericSend+0xbe>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	61fb      	str	r3, [r7, #28]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004582:	f002 f927 	bl	80067d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	429a      	cmp	r2, r3
 8004590:	d302      	bcc.n	8004598 <xQueueGenericSend+0xd4>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d129      	bne.n	80045ec <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800459e:	f000 fb2b 	bl	8004bf8 <prvCopyDataToQueue>
 80045a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d010      	beq.n	80045ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	3324      	adds	r3, #36	; 0x24
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 f911 	bl	80057d8 <xTaskRemoveFromEventList>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d013      	beq.n	80045e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045bc:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <xQueueGenericSend+0x1f8>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	e00a      	b.n	80045e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045d4:	4b39      	ldr	r3, [pc, #228]	; (80046bc <xQueueGenericSend+0x1f8>)
 80045d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045e4:	f002 f926 	bl	8006834 <vPortExitCritical>
				return pdPASS;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e063      	b.n	80046b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045f2:	f002 f91f 	bl	8006834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e05c      	b.n	80046b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d106      	bne.n	800460e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004600:	f107 0314 	add.w	r3, r7, #20
 8004604:	4618      	mov	r0, r3
 8004606:	f001 f94b 	bl	80058a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800460a:	2301      	movs	r3, #1
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800460e:	f002 f911 	bl	8006834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004612:	f000 feb3 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004616:	f002 f8dd 	bl	80067d4 <vPortEnterCritical>
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004620:	b25b      	sxtb	r3, r3
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d103      	bne.n	8004630 <xQueueGenericSend+0x16c>
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004636:	b25b      	sxtb	r3, r3
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d103      	bne.n	8004646 <xQueueGenericSend+0x182>
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004646:	f002 f8f5 	bl	8006834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800464a:	1d3a      	adds	r2, r7, #4
 800464c:	f107 0314 	add.w	r3, r7, #20
 8004650:	4611      	mov	r1, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f001 f93a 	bl	80058cc <xTaskCheckForTimeOut>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d124      	bne.n	80046a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800465e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004660:	f000 fbc2 	bl	8004de8 <prvIsQueueFull>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d018      	beq.n	800469c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	3310      	adds	r3, #16
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f001 f860 	bl	8005738 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800467a:	f000 fb4d 	bl	8004d18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800467e:	f000 fe8b 	bl	8005398 <xTaskResumeAll>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	f47f af7c 	bne.w	8004582 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <xQueueGenericSend+0x1f8>)
 800468c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	e772      	b.n	8004582 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800469c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800469e:	f000 fb3b 	bl	8004d18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046a2:	f000 fe79 	bl	8005398 <xTaskResumeAll>
 80046a6:	e76c      	b.n	8004582 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046aa:	f000 fb35 	bl	8004d18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ae:	f000 fe73 	bl	8005398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046b2:	2300      	movs	r3, #0
		}
	}
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3738      	adds	r7, #56	; 0x38
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	e000ed04 	.word	0xe000ed04

080046c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08e      	sub	sp, #56	; 0x38
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d103      	bne.n	80046fc <xQueueGenericSendFromISR+0x3c>
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <xQueueGenericSendFromISR+0x40>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <xQueueGenericSendFromISR+0x42>
 8004700:	2300      	movs	r3, #0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	623b      	str	r3, [r7, #32]
}
 8004718:	bf00      	nop
 800471a:	e7fe      	b.n	800471a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d103      	bne.n	800472a <xQueueGenericSendFromISR+0x6a>
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <xQueueGenericSendFromISR+0x6e>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <xQueueGenericSendFromISR+0x70>
 800472e:	2300      	movs	r3, #0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	61fb      	str	r3, [r7, #28]
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800474a:	f002 f925 	bl	8006998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800474e:	f3ef 8211 	mrs	r2, BASEPRI
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	61ba      	str	r2, [r7, #24]
 8004764:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004766:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	429a      	cmp	r2, r3
 8004774:	d302      	bcc.n	800477c <xQueueGenericSendFromISR+0xbc>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d12c      	bne.n	80047d6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800478c:	f000 fa34 	bl	8004bf8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004790:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d112      	bne.n	80047c0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	3324      	adds	r3, #36	; 0x24
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 f816 	bl	80057d8 <xTaskRemoveFromEventList>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00e      	beq.n	80047d0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e007      	b.n	80047d0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047c4:	3301      	adds	r3, #1
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	b25a      	sxtb	r2, r3
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047d0:	2301      	movs	r3, #1
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80047d4:	e001      	b.n	80047da <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3738      	adds	r7, #56	; 0x38
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08c      	sub	sp, #48	; 0x30
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80047fc:	2300      	movs	r3, #0
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10a      	bne.n	8004820 <xQueueReceive+0x30>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	623b      	str	r3, [r7, #32]
}
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <xQueueReceive+0x3e>
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <xQueueReceive+0x42>
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <xQueueReceive+0x44>
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <xQueueReceive+0x5e>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	61fb      	str	r3, [r7, #28]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800484e:	f001 f99b 	bl	8005b88 <xTaskGetSchedulerState>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <xQueueReceive+0x6e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <xQueueReceive+0x72>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <xQueueReceive+0x74>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <xQueueReceive+0x8e>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	61bb      	str	r3, [r7, #24]
}
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800487e:	f001 ffa9 	bl	80067d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01f      	beq.n	80048ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004892:	f000 fa1b 	bl	8004ccc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	1e5a      	subs	r2, r3, #1
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00f      	beq.n	80048c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	3310      	adds	r3, #16
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 ff94 	bl	80057d8 <xTaskRemoveFromEventList>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d007      	beq.n	80048c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048b6:	4b3d      	ldr	r3, [pc, #244]	; (80049ac <xQueueReceive+0x1bc>)
 80048b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048c6:	f001 ffb5 	bl	8006834 <vPortExitCritical>
				return pdPASS;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e069      	b.n	80049a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d103      	bne.n	80048dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048d4:	f001 ffae 	bl	8006834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048d8:	2300      	movs	r3, #0
 80048da:	e062      	b.n	80049a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048e2:	f107 0310 	add.w	r3, r7, #16
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 ffda 	bl	80058a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048f0:	f001 ffa0 	bl	8006834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048f4:	f000 fd42 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048f8:	f001 ff6c 	bl	80067d4 <vPortEnterCritical>
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004902:	b25b      	sxtb	r3, r3
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d103      	bne.n	8004912 <xQueueReceive+0x122>
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004918:	b25b      	sxtb	r3, r3
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	d103      	bne.n	8004928 <xQueueReceive+0x138>
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004928:	f001 ff84 	bl	8006834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800492c:	1d3a      	adds	r2, r7, #4
 800492e:	f107 0310 	add.w	r3, r7, #16
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f000 ffc9 	bl	80058cc <xTaskCheckForTimeOut>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d123      	bne.n	8004988 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004942:	f000 fa3b 	bl	8004dbc <prvIsQueueEmpty>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d017      	beq.n	800497c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	3324      	adds	r3, #36	; 0x24
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	4611      	mov	r1, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f000 feef 	bl	8005738 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800495a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800495c:	f000 f9dc 	bl	8004d18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004960:	f000 fd1a 	bl	8005398 <xTaskResumeAll>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d189      	bne.n	800487e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <xQueueReceive+0x1bc>)
 800496c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	e780      	b.n	800487e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800497c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800497e:	f000 f9cb 	bl	8004d18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004982:	f000 fd09 	bl	8005398 <xTaskResumeAll>
 8004986:	e77a      	b.n	800487e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800498a:	f000 f9c5 	bl	8004d18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800498e:	f000 fd03 	bl	8005398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004994:	f000 fa12 	bl	8004dbc <prvIsQueueEmpty>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	f43f af6f 	beq.w	800487e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3730      	adds	r7, #48	; 0x30
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	e000ed04 	.word	0xe000ed04

080049b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08e      	sub	sp, #56	; 0x38
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	623b      	str	r3, [r7, #32]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	61fb      	str	r3, [r7, #28]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a00:	f001 f8c2 	bl	8005b88 <xTaskGetSchedulerState>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <xQueueSemaphoreTake+0x60>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <xQueueSemaphoreTake+0x64>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <xQueueSemaphoreTake+0x66>
 8004a14:	2300      	movs	r3, #0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10a      	bne.n	8004a30 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	61bb      	str	r3, [r7, #24]
}
 8004a2c:	bf00      	nop
 8004a2e:	e7fe      	b.n	8004a2e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a30:	f001 fed0 	bl	80067d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d024      	beq.n	8004a8a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	1e5a      	subs	r2, r3, #1
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004a50:	f001 fa1a 	bl	8005e88 <pvTaskIncrementMutexHeldCount>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00f      	beq.n	8004a82 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	3310      	adds	r3, #16
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 feb6 	bl	80057d8 <xTaskRemoveFromEventList>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a72:	4b54      	ldr	r3, [pc, #336]	; (8004bc4 <xQueueSemaphoreTake+0x214>)
 8004a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a82:	f001 fed7 	bl	8006834 <vPortExitCritical>
				return pdPASS;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e097      	b.n	8004bba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d111      	bne.n	8004ab4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	617b      	str	r3, [r7, #20]
}
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004aac:	f001 fec2 	bl	8006834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e082      	b.n	8004bba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aba:	f107 030c 	add.w	r3, r7, #12
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 feee 	bl	80058a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ac8:	f001 feb4 	bl	8006834 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004acc:	f000 fc56 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ad0:	f001 fe80 	bl	80067d4 <vPortEnterCritical>
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d103      	bne.n	8004aea <xQueueSemaphoreTake+0x13a>
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af0:	b25b      	sxtb	r3, r3
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d103      	bne.n	8004b00 <xQueueSemaphoreTake+0x150>
 8004af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b00:	f001 fe98 	bl	8006834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b04:	463a      	mov	r2, r7
 8004b06:	f107 030c 	add.w	r3, r7, #12
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fedd 	bl	80058cc <xTaskCheckForTimeOut>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d132      	bne.n	8004b7e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b1a:	f000 f94f 	bl	8004dbc <prvIsQueueEmpty>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d026      	beq.n	8004b72 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004b2c:	f001 fe52 	bl	80067d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 f845 	bl	8005bc4 <xTaskPriorityInherit>
 8004b3a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b3c:	f001 fe7a 	bl	8006834 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	3324      	adds	r3, #36	; 0x24
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	4611      	mov	r1, r2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fdf5 	bl	8005738 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b50:	f000 f8e2 	bl	8004d18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b54:	f000 fc20 	bl	8005398 <xTaskResumeAll>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f47f af68 	bne.w	8004a30 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004b60:	4b18      	ldr	r3, [pc, #96]	; (8004bc4 <xQueueSemaphoreTake+0x214>)
 8004b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	e75e      	b.n	8004a30 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b74:	f000 f8d0 	bl	8004d18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b78:	f000 fc0e 	bl	8005398 <xTaskResumeAll>
 8004b7c:	e758      	b.n	8004a30 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b80:	f000 f8ca 	bl	8004d18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b84:	f000 fc08 	bl	8005398 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b8a:	f000 f917 	bl	8004dbc <prvIsQueueEmpty>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f43f af4d 	beq.w	8004a30 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00d      	beq.n	8004bb8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004b9c:	f001 fe1a 	bl	80067d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ba2:	f000 f811 	bl	8004bc8 <prvGetDisinheritPriorityAfterTimeout>
 8004ba6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 f8e4 	bl	8005d7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004bb4:	f001 fe3e 	bl	8006834 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3738      	adds	r7, #56	; 0x38
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	e000ed04 	.word	0xe000ed04

08004bc8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d006      	beq.n	8004be6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e001      	b.n	8004bea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004bea:	68fb      	ldr	r3, [r7, #12]
	}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10d      	bne.n	8004c32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d14d      	bne.n	8004cba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f001 f83c 	bl	8005ca0 <xTaskPriorityDisinherit>
 8004c28:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	e043      	b.n	8004cba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d119      	bne.n	8004c6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6898      	ldr	r0, [r3, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	461a      	mov	r2, r3
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	f002 f8e8 	bl	8006e18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	441a      	add	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d32b      	bcc.n	8004cba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	e026      	b.n	8004cba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68d8      	ldr	r0, [r3, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	461a      	mov	r2, r3
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	f002 f8ce 	bl	8006e18 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	425b      	negs	r3, r3
 8004c86:	441a      	add	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d207      	bcs.n	8004ca8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	425b      	negs	r3, r3
 8004ca2:	441a      	add	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d105      	bne.n	8004cba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cc2:	697b      	ldr	r3, [r7, #20]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d018      	beq.n	8004d10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	441a      	add	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d303      	bcc.n	8004d00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68d9      	ldr	r1, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6838      	ldr	r0, [r7, #0]
 8004d0c:	f002 f884 	bl	8006e18 <memcpy>
	}
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d20:	f001 fd58 	bl	80067d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d2c:	e011      	b.n	8004d52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d012      	beq.n	8004d5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3324      	adds	r3, #36	; 0x24
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fd4c 	bl	80057d8 <xTaskRemoveFromEventList>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d46:	f000 fe23 	bl	8005990 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	dce9      	bgt.n	8004d2e <prvUnlockQueue+0x16>
 8004d5a:	e000      	b.n	8004d5e <prvUnlockQueue+0x46>
					break;
 8004d5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d66:	f001 fd65 	bl	8006834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d6a:	f001 fd33 	bl	80067d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d76:	e011      	b.n	8004d9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d012      	beq.n	8004da6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3310      	adds	r3, #16
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fd27 	bl	80057d8 <xTaskRemoveFromEventList>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d90:	f000 fdfe 	bl	8005990 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d94:	7bbb      	ldrb	r3, [r7, #14]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	dce9      	bgt.n	8004d78 <prvUnlockQueue+0x60>
 8004da4:	e000      	b.n	8004da8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004da6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	22ff      	movs	r2, #255	; 0xff
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004db0:	f001 fd40 	bl	8006834 <vPortExitCritical>
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dc4:	f001 fd06 	bl	80067d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e001      	b.n	8004dda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dda:	f001 fd2b 	bl	8006834 <vPortExitCritical>

	return xReturn;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004df0:	f001 fcf0 	bl	80067d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d102      	bne.n	8004e06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	e001      	b.n	8004e0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e0a:	f001 fd13 	bl	8006834 <vPortExitCritical>

	return xReturn;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e014      	b.n	8004e52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e28:	4a0f      	ldr	r2, [pc, #60]	; (8004e68 <vQueueAddToRegistry+0x50>)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e34:	490c      	ldr	r1, [pc, #48]	; (8004e68 <vQueueAddToRegistry+0x50>)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <vQueueAddToRegistry+0x50>)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e4a:	e006      	b.n	8004e5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b07      	cmp	r3, #7
 8004e56:	d9e7      	bls.n	8004e28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20002120 	.word	0x20002120

08004e6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e7c:	f001 fcaa 	bl	80067d4 <vPortEnterCritical>
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e86:	b25b      	sxtb	r3, r3
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d103      	bne.n	8004e96 <vQueueWaitForMessageRestricted+0x2a>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e9c:	b25b      	sxtb	r3, r3
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	d103      	bne.n	8004eac <vQueueWaitForMessageRestricted+0x40>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eac:	f001 fcc2 	bl	8006834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	3324      	adds	r3, #36	; 0x24
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fc5d 	bl	8005780 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ec6:	6978      	ldr	r0, [r7, #20]
 8004ec8:	f7ff ff26 	bl	8004d18 <prvUnlockQueue>
	}
 8004ecc:	bf00      	nop
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08e      	sub	sp, #56	; 0x38
 8004ed8:	af04      	add	r7, sp, #16
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	623b      	str	r3, [r7, #32]
}
 8004efa:	bf00      	nop
 8004efc:	e7fe      	b.n	8004efc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <xTaskCreateStatic+0x46>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	61fb      	str	r3, [r7, #28]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f1a:	23bc      	movs	r3, #188	; 0xbc
 8004f1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2bbc      	cmp	r3, #188	; 0xbc
 8004f22:	d00a      	beq.n	8004f3a <xTaskCreateStatic+0x66>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	61bb      	str	r3, [r7, #24]
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01e      	beq.n	8004f7e <xTaskCreateStatic+0xaa>
 8004f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01b      	beq.n	8004f7e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9303      	str	r3, [sp, #12]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	9302      	str	r3, [sp, #8]
 8004f60:	f107 0314 	add.w	r3, r7, #20
 8004f64:	9301      	str	r3, [sp, #4]
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f851 	bl	8005018 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f78:	f000 f8ec 	bl	8005154 <prvAddNewTaskToReadyList>
 8004f7c:	e001      	b.n	8004f82 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f82:	697b      	ldr	r3, [r7, #20]
	}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3728      	adds	r7, #40	; 0x28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08c      	sub	sp, #48	; 0x30
 8004f90:	af04      	add	r7, sp, #16
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f001 fd39 	bl	8006a18 <pvPortMalloc>
 8004fa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00e      	beq.n	8004fcc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004fae:	20bc      	movs	r0, #188	; 0xbc
 8004fb0:	f001 fd32 	bl	8006a18 <pvPortMalloc>
 8004fb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8004fc2:	e005      	b.n	8004fd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fc4:	6978      	ldr	r0, [r7, #20]
 8004fc6:	f001 fdeb 	bl	8006ba0 <vPortFree>
 8004fca:	e001      	b.n	8004fd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d017      	beq.n	8005006 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fde:	88fa      	ldrh	r2, [r7, #6]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	9303      	str	r3, [sp, #12]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	9302      	str	r3, [sp, #8]
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	9301      	str	r3, [sp, #4]
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f80f 	bl	8005018 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ffa:	69f8      	ldr	r0, [r7, #28]
 8004ffc:	f000 f8aa 	bl	8005154 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005000:	2301      	movs	r3, #1
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	e002      	b.n	800500c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005006:	f04f 33ff 	mov.w	r3, #4294967295
 800500a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800500c:	69bb      	ldr	r3, [r7, #24]
	}
 800500e:	4618      	mov	r0, r3
 8005010:	3720      	adds	r7, #32
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	461a      	mov	r2, r3
 8005030:	21a5      	movs	r1, #165	; 0xa5
 8005032:	f001 feff 	bl	8006e34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005040:	3b01      	subs	r3, #1
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f023 0307 	bic.w	r3, r3, #7
 800504e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <prvInitialiseNewTask+0x58>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	617b      	str	r3, [r7, #20]
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e012      	b.n	800509c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	7819      	ldrb	r1, [r3, #0]
 800507e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	3334      	adds	r3, #52	; 0x34
 8005086:	460a      	mov	r2, r1
 8005088:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	4413      	add	r3, r2
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d006      	beq.n	80050a4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	3301      	adds	r3, #1
 800509a:	61fb      	str	r3, [r7, #28]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b0f      	cmp	r3, #15
 80050a0:	d9e9      	bls.n	8005076 <prvInitialiseNewTask+0x5e>
 80050a2:	e000      	b.n	80050a6 <prvInitialiseNewTask+0x8e>
		{
			break;
 80050a4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	2b37      	cmp	r3, #55	; 0x37
 80050b2:	d901      	bls.n	80050b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050b4:	2337      	movs	r3, #55	; 0x37
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	2200      	movs	r2, #0
 80050c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	3304      	adds	r3, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe ff6c 	bl	8003fac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	3318      	adds	r3, #24
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe ff67 	bl	8003fac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	3354      	adds	r3, #84	; 0x54
 8005108:	2260      	movs	r2, #96	; 0x60
 800510a:	2100      	movs	r1, #0
 800510c:	4618      	mov	r0, r3
 800510e:	f001 fe91 	bl	8006e34 <memset>
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	4a0c      	ldr	r2, [pc, #48]	; (8005148 <prvInitialiseNewTask+0x130>)
 8005116:	659a      	str	r2, [r3, #88]	; 0x58
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	4a0c      	ldr	r2, [pc, #48]	; (800514c <prvInitialiseNewTask+0x134>)
 800511c:	65da      	str	r2, [r3, #92]	; 0x5c
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	4a0b      	ldr	r2, [pc, #44]	; (8005150 <prvInitialiseNewTask+0x138>)
 8005122:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	69b8      	ldr	r0, [r7, #24]
 800512a:	f001 fa27 	bl	800657c <pxPortInitialiseStack>
 800512e:	4602      	mov	r2, r0
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005140:	bf00      	nop
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	080070a8 	.word	0x080070a8
 800514c:	080070c8 	.word	0x080070c8
 8005150:	08007088 	.word	0x08007088

08005154 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800515c:	f001 fb3a 	bl	80067d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005160:	4b2d      	ldr	r3, [pc, #180]	; (8005218 <prvAddNewTaskToReadyList+0xc4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	4a2c      	ldr	r2, [pc, #176]	; (8005218 <prvAddNewTaskToReadyList+0xc4>)
 8005168:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800516a:	4b2c      	ldr	r3, [pc, #176]	; (800521c <prvAddNewTaskToReadyList+0xc8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d109      	bne.n	8005186 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005172:	4a2a      	ldr	r2, [pc, #168]	; (800521c <prvAddNewTaskToReadyList+0xc8>)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005178:	4b27      	ldr	r3, [pc, #156]	; (8005218 <prvAddNewTaskToReadyList+0xc4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d110      	bne.n	80051a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005180:	f000 fc2a 	bl	80059d8 <prvInitialiseTaskLists>
 8005184:	e00d      	b.n	80051a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005186:	4b26      	ldr	r3, [pc, #152]	; (8005220 <prvAddNewTaskToReadyList+0xcc>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800518e:	4b23      	ldr	r3, [pc, #140]	; (800521c <prvAddNewTaskToReadyList+0xc8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	429a      	cmp	r2, r3
 800519a:	d802      	bhi.n	80051a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800519c:	4a1f      	ldr	r2, [pc, #124]	; (800521c <prvAddNewTaskToReadyList+0xc8>)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051a2:	4b20      	ldr	r3, [pc, #128]	; (8005224 <prvAddNewTaskToReadyList+0xd0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <prvAddNewTaskToReadyList+0xd0>)
 80051aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051ac:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <prvAddNewTaskToReadyList+0xd0>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b8:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <prvAddNewTaskToReadyList+0xd4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d903      	bls.n	80051c8 <prvAddNewTaskToReadyList+0x74>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	4a18      	ldr	r2, [pc, #96]	; (8005228 <prvAddNewTaskToReadyList+0xd4>)
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4a15      	ldr	r2, [pc, #84]	; (800522c <prvAddNewTaskToReadyList+0xd8>)
 80051d6:	441a      	add	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f7fe fef1 	bl	8003fc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051e4:	f001 fb26 	bl	8006834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051e8:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <prvAddNewTaskToReadyList+0xcc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <prvAddNewTaskToReadyList+0xc8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d207      	bcs.n	800520e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051fe:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <prvAddNewTaskToReadyList+0xdc>)
 8005200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000f88 	.word	0x20000f88
 800521c:	20000ab4 	.word	0x20000ab4
 8005220:	20000f94 	.word	0x20000f94
 8005224:	20000fa4 	.word	0x20000fa4
 8005228:	20000f90 	.word	0x20000f90
 800522c:	20000ab8 	.word	0x20000ab8
 8005230:	e000ed04 	.word	0xe000ed04

08005234 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d017      	beq.n	8005276 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005246:	4b13      	ldr	r3, [pc, #76]	; (8005294 <vTaskDelay+0x60>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <vTaskDelay+0x30>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	60bb      	str	r3, [r7, #8]
}
 8005260:	bf00      	nop
 8005262:	e7fe      	b.n	8005262 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005264:	f000 f88a 	bl	800537c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005268:	2100      	movs	r1, #0
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fe20 	bl	8005eb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005270:	f000 f892 	bl	8005398 <xTaskResumeAll>
 8005274:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d107      	bne.n	800528c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <vTaskDelay+0x64>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000fb0 	.word	0x20000fb0
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08a      	sub	sp, #40	; 0x28
 80052a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052aa:	463a      	mov	r2, r7
 80052ac:	1d39      	adds	r1, r7, #4
 80052ae:	f107 0308 	add.w	r3, r7, #8
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe fe26 	bl	8003f04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	9202      	str	r2, [sp, #8]
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	2300      	movs	r3, #0
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	2300      	movs	r3, #0
 80052c8:	460a      	mov	r2, r1
 80052ca:	4924      	ldr	r1, [pc, #144]	; (800535c <vTaskStartScheduler+0xc0>)
 80052cc:	4824      	ldr	r0, [pc, #144]	; (8005360 <vTaskStartScheduler+0xc4>)
 80052ce:	f7ff fe01 	bl	8004ed4 <xTaskCreateStatic>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4a23      	ldr	r2, [pc, #140]	; (8005364 <vTaskStartScheduler+0xc8>)
 80052d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052d8:	4b22      	ldr	r3, [pc, #136]	; (8005364 <vTaskStartScheduler+0xc8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052e0:	2301      	movs	r3, #1
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	e001      	b.n	80052ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d102      	bne.n	80052f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052f0:	f000 fe32 	bl	8005f58 <xTimerCreateTimerTask>
 80052f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d11b      	bne.n	8005334 <vTaskStartScheduler+0x98>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	613b      	str	r3, [r7, #16]
}
 800530e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005310:	4b15      	ldr	r3, [pc, #84]	; (8005368 <vTaskStartScheduler+0xcc>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3354      	adds	r3, #84	; 0x54
 8005316:	4a15      	ldr	r2, [pc, #84]	; (800536c <vTaskStartScheduler+0xd0>)
 8005318:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <vTaskStartScheduler+0xd4>)
 800531c:	f04f 32ff 	mov.w	r2, #4294967295
 8005320:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005322:	4b14      	ldr	r3, [pc, #80]	; (8005374 <vTaskStartScheduler+0xd8>)
 8005324:	2201      	movs	r2, #1
 8005326:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005328:	4b13      	ldr	r3, [pc, #76]	; (8005378 <vTaskStartScheduler+0xdc>)
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800532e:	f001 f9af 	bl	8006690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005332:	e00e      	b.n	8005352 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d10a      	bne.n	8005352 <vTaskStartScheduler+0xb6>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	60fb      	str	r3, [r7, #12]
}
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <vTaskStartScheduler+0xb4>
}
 8005352:	bf00      	nop
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	08007004 	.word	0x08007004
 8005360:	080059a9 	.word	0x080059a9
 8005364:	20000fac 	.word	0x20000fac
 8005368:	20000ab4 	.word	0x20000ab4
 800536c:	2000016c 	.word	0x2000016c
 8005370:	20000fa8 	.word	0x20000fa8
 8005374:	20000f94 	.word	0x20000f94
 8005378:	20000f8c 	.word	0x20000f8c

0800537c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <vTaskSuspendAll+0x18>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a03      	ldr	r2, [pc, #12]	; (8005394 <vTaskSuspendAll+0x18>)
 8005388:	6013      	str	r3, [r2, #0]
}
 800538a:	bf00      	nop
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	20000fb0 	.word	0x20000fb0

08005398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053a6:	4b42      	ldr	r3, [pc, #264]	; (80054b0 <xTaskResumeAll+0x118>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	603b      	str	r3, [r7, #0]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053c4:	f001 fa06 	bl	80067d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053c8:	4b39      	ldr	r3, [pc, #228]	; (80054b0 <xTaskResumeAll+0x118>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	4a38      	ldr	r2, [pc, #224]	; (80054b0 <xTaskResumeAll+0x118>)
 80053d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053d2:	4b37      	ldr	r3, [pc, #220]	; (80054b0 <xTaskResumeAll+0x118>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d162      	bne.n	80054a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053da:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <xTaskResumeAll+0x11c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d05e      	beq.n	80054a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053e2:	e02f      	b.n	8005444 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80053e4:	4b34      	ldr	r3, [pc, #208]	; (80054b8 <xTaskResumeAll+0x120>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3318      	adds	r3, #24
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fe fe45 	bl	8004080 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe fe40 	bl	8004080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005404:	4b2d      	ldr	r3, [pc, #180]	; (80054bc <xTaskResumeAll+0x124>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d903      	bls.n	8005414 <xTaskResumeAll+0x7c>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	4a2a      	ldr	r2, [pc, #168]	; (80054bc <xTaskResumeAll+0x124>)
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <xTaskResumeAll+0x128>)
 8005422:	441a      	add	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f7fe fdcb 	bl	8003fc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <xTaskResumeAll+0x12c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	429a      	cmp	r2, r3
 800543c:	d302      	bcc.n	8005444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800543e:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <xTaskResumeAll+0x130>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005444:	4b1c      	ldr	r3, [pc, #112]	; (80054b8 <xTaskResumeAll+0x120>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1cb      	bne.n	80053e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005452:	f000 fb63 	bl	8005b1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <xTaskResumeAll+0x134>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d010      	beq.n	8005484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005462:	f000 f847 	bl	80054f4 <xTaskIncrementTick>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800546c:	4b16      	ldr	r3, [pc, #88]	; (80054c8 <xTaskResumeAll+0x130>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3b01      	subs	r3, #1
 8005476:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f1      	bne.n	8005462 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800547e:	4b13      	ldr	r3, [pc, #76]	; (80054cc <xTaskResumeAll+0x134>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005484:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <xTaskResumeAll+0x130>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <xTaskResumeAll+0x138>)
 8005492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054a0:	f001 f9c8 	bl	8006834 <vPortExitCritical>

	return xAlreadyYielded;
 80054a4:	68bb      	ldr	r3, [r7, #8]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000fb0 	.word	0x20000fb0
 80054b4:	20000f88 	.word	0x20000f88
 80054b8:	20000f48 	.word	0x20000f48
 80054bc:	20000f90 	.word	0x20000f90
 80054c0:	20000ab8 	.word	0x20000ab8
 80054c4:	20000ab4 	.word	0x20000ab4
 80054c8:	20000f9c 	.word	0x20000f9c
 80054cc:	20000f98 	.word	0x20000f98
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <xTaskGetTickCount+0x1c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054e0:	687b      	ldr	r3, [r7, #4]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000f8c 	.word	0x20000f8c

080054f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054fe:	4b51      	ldr	r3, [pc, #324]	; (8005644 <xTaskIncrementTick+0x150>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 808e 	bne.w	8005624 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005508:	4b4f      	ldr	r3, [pc, #316]	; (8005648 <xTaskIncrementTick+0x154>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3301      	adds	r3, #1
 800550e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005510:	4a4d      	ldr	r2, [pc, #308]	; (8005648 <xTaskIncrementTick+0x154>)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d120      	bne.n	800555e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800551c:	4b4b      	ldr	r3, [pc, #300]	; (800564c <xTaskIncrementTick+0x158>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <xTaskIncrementTick+0x48>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	603b      	str	r3, [r7, #0]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <xTaskIncrementTick+0x46>
 800553c:	4b43      	ldr	r3, [pc, #268]	; (800564c <xTaskIncrementTick+0x158>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	4b43      	ldr	r3, [pc, #268]	; (8005650 <xTaskIncrementTick+0x15c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a41      	ldr	r2, [pc, #260]	; (800564c <xTaskIncrementTick+0x158>)
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	4a41      	ldr	r2, [pc, #260]	; (8005650 <xTaskIncrementTick+0x15c>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b40      	ldr	r3, [pc, #256]	; (8005654 <xTaskIncrementTick+0x160>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	4a3f      	ldr	r2, [pc, #252]	; (8005654 <xTaskIncrementTick+0x160>)
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	f000 fadf 	bl	8005b1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800555e:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <xTaskIncrementTick+0x164>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	429a      	cmp	r2, r3
 8005566:	d34e      	bcc.n	8005606 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005568:	4b38      	ldr	r3, [pc, #224]	; (800564c <xTaskIncrementTick+0x158>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <xTaskIncrementTick+0x82>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <xTaskIncrementTick+0x84>
 8005576:	2300      	movs	r3, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800557c:	4b36      	ldr	r3, [pc, #216]	; (8005658 <xTaskIncrementTick+0x164>)
 800557e:	f04f 32ff 	mov.w	r2, #4294967295
 8005582:	601a      	str	r2, [r3, #0]
					break;
 8005584:	e03f      	b.n	8005606 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005586:	4b31      	ldr	r3, [pc, #196]	; (800564c <xTaskIncrementTick+0x158>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d203      	bcs.n	80055a6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800559e:	4a2e      	ldr	r2, [pc, #184]	; (8005658 <xTaskIncrementTick+0x164>)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6013      	str	r3, [r2, #0]
						break;
 80055a4:	e02f      	b.n	8005606 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe fd68 	bl	8004080 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	3318      	adds	r3, #24
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe fd5f 	bl	8004080 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c6:	4b25      	ldr	r3, [pc, #148]	; (800565c <xTaskIncrementTick+0x168>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d903      	bls.n	80055d6 <xTaskIncrementTick+0xe2>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	4a22      	ldr	r2, [pc, #136]	; (800565c <xTaskIncrementTick+0x168>)
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <xTaskIncrementTick+0x16c>)
 80055e4:	441a      	add	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f7fe fcea 	bl	8003fc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <xTaskIncrementTick+0x170>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d3b3      	bcc.n	8005568 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005600:	2301      	movs	r3, #1
 8005602:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005604:	e7b0      	b.n	8005568 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005606:	4b17      	ldr	r3, [pc, #92]	; (8005664 <xTaskIncrementTick+0x170>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560c:	4914      	ldr	r1, [pc, #80]	; (8005660 <xTaskIncrementTick+0x16c>)
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d907      	bls.n	800562e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800561e:	2301      	movs	r3, #1
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e004      	b.n	800562e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005624:	4b10      	ldr	r3, [pc, #64]	; (8005668 <xTaskIncrementTick+0x174>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	4a0f      	ldr	r2, [pc, #60]	; (8005668 <xTaskIncrementTick+0x174>)
 800562c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800562e:	4b0f      	ldr	r3, [pc, #60]	; (800566c <xTaskIncrementTick+0x178>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005636:	2301      	movs	r3, #1
 8005638:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800563a:	697b      	ldr	r3, [r7, #20]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000fb0 	.word	0x20000fb0
 8005648:	20000f8c 	.word	0x20000f8c
 800564c:	20000f40 	.word	0x20000f40
 8005650:	20000f44 	.word	0x20000f44
 8005654:	20000fa0 	.word	0x20000fa0
 8005658:	20000fa8 	.word	0x20000fa8
 800565c:	20000f90 	.word	0x20000f90
 8005660:	20000ab8 	.word	0x20000ab8
 8005664:	20000ab4 	.word	0x20000ab4
 8005668:	20000f98 	.word	0x20000f98
 800566c:	20000f9c 	.word	0x20000f9c

08005670 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005676:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <vTaskSwitchContext+0xb0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800567e:	4b29      	ldr	r3, [pc, #164]	; (8005724 <vTaskSwitchContext+0xb4>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005684:	e046      	b.n	8005714 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005686:	4b27      	ldr	r3, [pc, #156]	; (8005724 <vTaskSwitchContext+0xb4>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800568c:	4b26      	ldr	r3, [pc, #152]	; (8005728 <vTaskSwitchContext+0xb8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	e010      	b.n	80056b6 <vTaskSwitchContext+0x46>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	607b      	str	r3, [r7, #4]
}
 80056ac:	bf00      	nop
 80056ae:	e7fe      	b.n	80056ae <vTaskSwitchContext+0x3e>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	491d      	ldr	r1, [pc, #116]	; (800572c <vTaskSwitchContext+0xbc>)
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0e4      	beq.n	8005694 <vTaskSwitchContext+0x24>
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4a15      	ldr	r2, [pc, #84]	; (800572c <vTaskSwitchContext+0xbc>)
 80056d6:	4413      	add	r3, r2
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	605a      	str	r2, [r3, #4]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	3308      	adds	r3, #8
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d104      	bne.n	80056fa <vTaskSwitchContext+0x8a>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4a0b      	ldr	r2, [pc, #44]	; (8005730 <vTaskSwitchContext+0xc0>)
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <vTaskSwitchContext+0xb8>)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800570a:	4b09      	ldr	r3, [pc, #36]	; (8005730 <vTaskSwitchContext+0xc0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3354      	adds	r3, #84	; 0x54
 8005710:	4a08      	ldr	r2, [pc, #32]	; (8005734 <vTaskSwitchContext+0xc4>)
 8005712:	6013      	str	r3, [r2, #0]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	20000fb0 	.word	0x20000fb0
 8005724:	20000f9c 	.word	0x20000f9c
 8005728:	20000f90 	.word	0x20000f90
 800572c:	20000ab8 	.word	0x20000ab8
 8005730:	20000ab4 	.word	0x20000ab4
 8005734:	2000016c 	.word	0x2000016c

08005738 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	60fb      	str	r3, [r7, #12]
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800575e:	4b07      	ldr	r3, [pc, #28]	; (800577c <vTaskPlaceOnEventList+0x44>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3318      	adds	r3, #24
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fe fc51 	bl	800400e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800576c:	2101      	movs	r1, #1
 800576e:	6838      	ldr	r0, [r7, #0]
 8005770:	f000 fb9e 	bl	8005eb0 <prvAddCurrentTaskToDelayedList>
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20000ab4 	.word	0x20000ab4

08005780 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	617b      	str	r3, [r7, #20]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057a8:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3318      	adds	r3, #24
 80057ae:	4619      	mov	r1, r3
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7fe fc08 	bl	8003fc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80057bc:	f04f 33ff 	mov.w	r3, #4294967295
 80057c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	68b8      	ldr	r0, [r7, #8]
 80057c6:	f000 fb73 	bl	8005eb0 <prvAddCurrentTaskToDelayedList>
	}
 80057ca:	bf00      	nop
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000ab4 	.word	0x20000ab4

080057d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	60fb      	str	r3, [r7, #12]
}
 8005800:	bf00      	nop
 8005802:	e7fe      	b.n	8005802 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	3318      	adds	r3, #24
 8005808:	4618      	mov	r0, r3
 800580a:	f7fe fc39 	bl	8004080 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800580e:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <xTaskRemoveFromEventList+0xb0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d11d      	bne.n	8005852 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	3304      	adds	r3, #4
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe fc30 	bl	8004080 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4b19      	ldr	r3, [pc, #100]	; (800588c <xTaskRemoveFromEventList+0xb4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d903      	bls.n	8005834 <xTaskRemoveFromEventList+0x5c>
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	4a16      	ldr	r2, [pc, #88]	; (800588c <xTaskRemoveFromEventList+0xb4>)
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4a13      	ldr	r2, [pc, #76]	; (8005890 <xTaskRemoveFromEventList+0xb8>)
 8005842:	441a      	add	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	3304      	adds	r3, #4
 8005848:	4619      	mov	r1, r3
 800584a:	4610      	mov	r0, r2
 800584c:	f7fe fbbb 	bl	8003fc6 <vListInsertEnd>
 8005850:	e005      	b.n	800585e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	3318      	adds	r3, #24
 8005856:	4619      	mov	r1, r3
 8005858:	480e      	ldr	r0, [pc, #56]	; (8005894 <xTaskRemoveFromEventList+0xbc>)
 800585a:	f7fe fbb4 	bl	8003fc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <xTaskRemoveFromEventList+0xc0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	429a      	cmp	r2, r3
 800586a:	d905      	bls.n	8005878 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800586c:	2301      	movs	r3, #1
 800586e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005870:	4b0a      	ldr	r3, [pc, #40]	; (800589c <xTaskRemoveFromEventList+0xc4>)
 8005872:	2201      	movs	r2, #1
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	e001      	b.n	800587c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800587c:	697b      	ldr	r3, [r7, #20]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000fb0 	.word	0x20000fb0
 800588c:	20000f90 	.word	0x20000f90
 8005890:	20000ab8 	.word	0x20000ab8
 8005894:	20000f48 	.word	0x20000f48
 8005898:	20000ab4 	.word	0x20000ab4
 800589c:	20000f9c 	.word	0x20000f9c

080058a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058a8:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <vTaskInternalSetTimeOutState+0x24>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058b0:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <vTaskInternalSetTimeOutState+0x28>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	605a      	str	r2, [r3, #4]
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	20000fa0 	.word	0x20000fa0
 80058c8:	20000f8c 	.word	0x20000f8c

080058cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	613b      	str	r3, [r7, #16]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	60fb      	str	r3, [r7, #12]
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800590e:	f000 ff61 	bl	80067d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005912:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <xTaskCheckForTimeOut+0xbc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d102      	bne.n	8005932 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800592c:	2300      	movs	r3, #0
 800592e:	61fb      	str	r3, [r7, #28]
 8005930:	e023      	b.n	800597a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4b15      	ldr	r3, [pc, #84]	; (800598c <xTaskCheckForTimeOut+0xc0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d007      	beq.n	800594e <xTaskCheckForTimeOut+0x82>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	429a      	cmp	r2, r3
 8005946:	d302      	bcc.n	800594e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005948:	2301      	movs	r3, #1
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e015      	b.n	800597a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	429a      	cmp	r2, r3
 8005956:	d20b      	bcs.n	8005970 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	1ad2      	subs	r2, r2, r3
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff ff9b 	bl	80058a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	e004      	b.n	800597a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005976:	2301      	movs	r3, #1
 8005978:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800597a:	f000 ff5b 	bl	8006834 <vPortExitCritical>

	return xReturn;
 800597e:	69fb      	ldr	r3, [r7, #28]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3720      	adds	r7, #32
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000f8c 	.word	0x20000f8c
 800598c:	20000fa0 	.word	0x20000fa0

08005990 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005994:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <vTaskMissedYield+0x14>)
 8005996:	2201      	movs	r2, #1
 8005998:	601a      	str	r2, [r3, #0]
}
 800599a:	bf00      	nop
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	20000f9c 	.word	0x20000f9c

080059a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059b0:	f000 f852 	bl	8005a58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <prvIdleTask+0x28>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d9f9      	bls.n	80059b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059bc:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <prvIdleTask+0x2c>)
 80059be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059cc:	e7f0      	b.n	80059b0 <prvIdleTask+0x8>
 80059ce:	bf00      	nop
 80059d0:	20000ab8 	.word	0x20000ab8
 80059d4:	e000ed04 	.word	0xe000ed04

080059d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059de:	2300      	movs	r3, #0
 80059e0:	607b      	str	r3, [r7, #4]
 80059e2:	e00c      	b.n	80059fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <prvInitialiseTaskLists+0x60>)
 80059f0:	4413      	add	r3, r2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe faba 	bl	8003f6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3301      	adds	r3, #1
 80059fc:	607b      	str	r3, [r7, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b37      	cmp	r3, #55	; 0x37
 8005a02:	d9ef      	bls.n	80059e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a04:	480d      	ldr	r0, [pc, #52]	; (8005a3c <prvInitialiseTaskLists+0x64>)
 8005a06:	f7fe fab1 	bl	8003f6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a0a:	480d      	ldr	r0, [pc, #52]	; (8005a40 <prvInitialiseTaskLists+0x68>)
 8005a0c:	f7fe faae 	bl	8003f6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a10:	480c      	ldr	r0, [pc, #48]	; (8005a44 <prvInitialiseTaskLists+0x6c>)
 8005a12:	f7fe faab 	bl	8003f6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a16:	480c      	ldr	r0, [pc, #48]	; (8005a48 <prvInitialiseTaskLists+0x70>)
 8005a18:	f7fe faa8 	bl	8003f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a1c:	480b      	ldr	r0, [pc, #44]	; (8005a4c <prvInitialiseTaskLists+0x74>)
 8005a1e:	f7fe faa5 	bl	8003f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a22:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <prvInitialiseTaskLists+0x78>)
 8005a24:	4a05      	ldr	r2, [pc, #20]	; (8005a3c <prvInitialiseTaskLists+0x64>)
 8005a26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <prvInitialiseTaskLists+0x7c>)
 8005a2a:	4a05      	ldr	r2, [pc, #20]	; (8005a40 <prvInitialiseTaskLists+0x68>)
 8005a2c:	601a      	str	r2, [r3, #0]
}
 8005a2e:	bf00      	nop
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000ab8 	.word	0x20000ab8
 8005a3c:	20000f18 	.word	0x20000f18
 8005a40:	20000f2c 	.word	0x20000f2c
 8005a44:	20000f48 	.word	0x20000f48
 8005a48:	20000f5c 	.word	0x20000f5c
 8005a4c:	20000f74 	.word	0x20000f74
 8005a50:	20000f40 	.word	0x20000f40
 8005a54:	20000f44 	.word	0x20000f44

08005a58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a5e:	e019      	b.n	8005a94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a60:	f000 feb8 	bl	80067d4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a64:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <prvCheckTasksWaitingTermination+0x50>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fe fb05 	bl	8004080 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a76:	4b0d      	ldr	r3, [pc, #52]	; (8005aac <prvCheckTasksWaitingTermination+0x54>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	4a0b      	ldr	r2, [pc, #44]	; (8005aac <prvCheckTasksWaitingTermination+0x54>)
 8005a7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <prvCheckTasksWaitingTermination+0x58>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <prvCheckTasksWaitingTermination+0x58>)
 8005a88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a8a:	f000 fed3 	bl	8006834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f810 	bl	8005ab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a94:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <prvCheckTasksWaitingTermination+0x58>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e1      	bne.n	8005a60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a9c:	bf00      	nop
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000f5c 	.word	0x20000f5c
 8005aac:	20000f88 	.word	0x20000f88
 8005ab0:	20000f70 	.word	0x20000f70

08005ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3354      	adds	r3, #84	; 0x54
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 f9cd 	bl	8006e60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d108      	bne.n	8005ae2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 f863 	bl	8006ba0 <vPortFree>
				vPortFree( pxTCB );
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f001 f860 	bl	8006ba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ae0:	e018      	b.n	8005b14 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d103      	bne.n	8005af4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 f857 	bl	8006ba0 <vPortFree>
	}
 8005af2:	e00f      	b.n	8005b14 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d00a      	beq.n	8005b14 <prvDeleteTCB+0x60>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	60fb      	str	r3, [r7, #12]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <prvDeleteTCB+0x5e>
	}
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b22:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <prvResetNextTaskUnblockTime+0x44>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <prvResetNextTaskUnblockTime+0x14>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <prvResetNextTaskUnblockTime+0x16>
 8005b30:	2300      	movs	r3, #0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b36:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <prvResetNextTaskUnblockTime+0x48>)
 8005b38:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b3e:	e008      	b.n	8005b52 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <prvResetNextTaskUnblockTime+0x44>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	4a05      	ldr	r2, [pc, #20]	; (8005b64 <prvResetNextTaskUnblockTime+0x48>)
 8005b50:	6013      	str	r3, [r2, #0]
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000f40 	.word	0x20000f40
 8005b64:	20000fa8 	.word	0x20000fa8

08005b68 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005b6e:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <xTaskGetCurrentTaskHandle+0x1c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005b74:	687b      	ldr	r3, [r7, #4]
	}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000ab4 	.word	0x20000ab4

08005b88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b8e:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <xTaskGetSchedulerState+0x34>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b96:	2301      	movs	r3, #1
 8005b98:	607b      	str	r3, [r7, #4]
 8005b9a:	e008      	b.n	8005bae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b9c:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <xTaskGetSchedulerState+0x38>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	e001      	b.n	8005bae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005baa:	2300      	movs	r3, #0
 8005bac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bae:	687b      	ldr	r3, [r7, #4]
	}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	20000f94 	.word	0x20000f94
 8005bc0:	20000fb0 	.word	0x20000fb0

08005bc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d056      	beq.n	8005c88 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bde:	4b2d      	ldr	r3, [pc, #180]	; (8005c94 <xTaskPriorityInherit+0xd0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d246      	bcs.n	8005c76 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	db06      	blt.n	8005bfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf0:	4b28      	ldr	r3, [pc, #160]	; (8005c94 <xTaskPriorityInherit+0xd0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6959      	ldr	r1, [r3, #20]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4a22      	ldr	r2, [pc, #136]	; (8005c98 <xTaskPriorityInherit+0xd4>)
 8005c10:	4413      	add	r3, r2
 8005c12:	4299      	cmp	r1, r3
 8005c14:	d101      	bne.n	8005c1a <xTaskPriorityInherit+0x56>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <xTaskPriorityInherit+0x58>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d022      	beq.n	8005c66 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe fa2b 	bl	8004080 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c2a:	4b1a      	ldr	r3, [pc, #104]	; (8005c94 <xTaskPriorityInherit+0xd0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c38:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <xTaskPriorityInherit+0xd8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d903      	bls.n	8005c48 <xTaskPriorityInherit+0x84>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <xTaskPriorityInherit+0xd8>)
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4a10      	ldr	r2, [pc, #64]	; (8005c98 <xTaskPriorityInherit+0xd4>)
 8005c56:	441a      	add	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fe f9b1 	bl	8003fc6 <vListInsertEnd>
 8005c64:	e004      	b.n	8005c70 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c66:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <xTaskPriorityInherit+0xd0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c70:	2301      	movs	r3, #1
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e008      	b.n	8005c88 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c7a:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <xTaskPriorityInherit+0xd0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d201      	bcs.n	8005c88 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c84:	2301      	movs	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c88:	68fb      	ldr	r3, [r7, #12]
	}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000ab4 	.word	0x20000ab4
 8005c98:	20000ab8 	.word	0x20000ab8
 8005c9c:	20000f90 	.word	0x20000f90

08005ca0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d056      	beq.n	8005d64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cb6:	4b2e      	ldr	r3, [pc, #184]	; (8005d70 <xTaskPriorityDisinherit+0xd0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d00a      	beq.n	8005cd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	60fb      	str	r3, [r7, #12]
}
 8005cd2:	bf00      	nop
 8005cd4:	e7fe      	b.n	8005cd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	60bb      	str	r3, [r7, #8]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf8:	1e5a      	subs	r2, r3, #1
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d02c      	beq.n	8005d64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d128      	bne.n	8005d64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fe f9b2 	bl	8004080 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <xTaskPriorityDisinherit+0xd4>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d903      	bls.n	8005d44 <xTaskPriorityDisinherit+0xa4>
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <xTaskPriorityDisinherit+0xd4>)
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <xTaskPriorityDisinherit+0xd8>)
 8005d52:	441a      	add	r2, r3
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7fe f933 	bl	8003fc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d60:	2301      	movs	r3, #1
 8005d62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d64:	697b      	ldr	r3, [r7, #20]
	}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000ab4 	.word	0x20000ab4
 8005d74:	20000f90 	.word	0x20000f90
 8005d78:	20000ab8 	.word	0x20000ab8

08005d7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d06f      	beq.n	8005e74 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	60fb      	str	r3, [r7, #12]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d902      	bls.n	8005dc2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	e002      	b.n	8005dc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d050      	beq.n	8005e74 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d14b      	bne.n	8005e74 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ddc:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d10a      	bne.n	8005dfc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	60bb      	str	r3, [r7, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	e7fe      	b.n	8005dfa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	db04      	blt.n	8005e1a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	6959      	ldr	r1, [r3, #20]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4a15      	ldr	r2, [pc, #84]	; (8005e80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005e2a:	4413      	add	r3, r2
 8005e2c:	4299      	cmp	r1, r3
 8005e2e:	d101      	bne.n	8005e34 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005e34:	2300      	movs	r3, #0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01c      	beq.n	8005e74 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe f91e 	bl	8004080 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e48:	4b0e      	ldr	r3, [pc, #56]	; (8005e84 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d903      	bls.n	8005e58 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	4a0b      	ldr	r2, [pc, #44]	; (8005e84 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005e66:	441a      	add	r2, r3
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7fe f8a9 	bl	8003fc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e74:	bf00      	nop
 8005e76:	3720      	adds	r7, #32
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000ab4 	.word	0x20000ab4
 8005e80:	20000ab8 	.word	0x20000ab8
 8005e84:	20000f90 	.word	0x20000f90

08005e88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <pvTaskIncrementMutexHeldCount+0x24>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <pvTaskIncrementMutexHeldCount+0x24>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e9a:	3201      	adds	r2, #1
 8005e9c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005e9e:	4b03      	ldr	r3, [pc, #12]	; (8005eac <pvTaskIncrementMutexHeldCount+0x24>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
	}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	20000ab4 	.word	0x20000ab4

08005eb0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eba:	4b21      	ldr	r3, [pc, #132]	; (8005f40 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ec0:	4b20      	ldr	r3, [pc, #128]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe f8da 	bl	8004080 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d10a      	bne.n	8005eea <prvAddCurrentTaskToDelayedList+0x3a>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4819      	ldr	r0, [pc, #100]	; (8005f48 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ee4:	f7fe f86f 	bl	8003fc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ee8:	e026      	b.n	8005f38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ef2:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d209      	bcs.n	8005f16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f7fe f87d 	bl	800400e <vListInsert>
}
 8005f14:	e010      	b.n	8005f38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f16:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f7fe f873 	bl	800400e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d202      	bcs.n	8005f38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f32:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6013      	str	r3, [r2, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000f8c 	.word	0x20000f8c
 8005f44:	20000ab4 	.word	0x20000ab4
 8005f48:	20000f74 	.word	0x20000f74
 8005f4c:	20000f44 	.word	0x20000f44
 8005f50:	20000f40 	.word	0x20000f40
 8005f54:	20000fa8 	.word	0x20000fa8

08005f58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f62:	f000 facb 	bl	80064fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f66:	4b1c      	ldr	r3, [pc, #112]	; (8005fd8 <xTimerCreateTimerTask+0x80>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d021      	beq.n	8005fb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f76:	1d3a      	adds	r2, r7, #4
 8005f78:	f107 0108 	add.w	r1, r7, #8
 8005f7c:	f107 030c 	add.w	r3, r7, #12
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fd ffd9 	bl	8003f38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	9202      	str	r2, [sp, #8]
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	2302      	movs	r3, #2
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	2300      	movs	r3, #0
 8005f96:	460a      	mov	r2, r1
 8005f98:	4910      	ldr	r1, [pc, #64]	; (8005fdc <xTimerCreateTimerTask+0x84>)
 8005f9a:	4811      	ldr	r0, [pc, #68]	; (8005fe0 <xTimerCreateTimerTask+0x88>)
 8005f9c:	f7fe ff9a 	bl	8004ed4 <xTaskCreateStatic>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4a10      	ldr	r2, [pc, #64]	; (8005fe4 <xTimerCreateTimerTask+0x8c>)
 8005fa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <xTimerCreateTimerTask+0x8c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	613b      	str	r3, [r7, #16]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005fce:	697b      	ldr	r3, [r7, #20]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20000fe4 	.word	0x20000fe4
 8005fdc:	0800700c 	.word	0x0800700c
 8005fe0:	08006105 	.word	0x08006105
 8005fe4:	20000fe8 	.word	0x20000fe8

08005fe8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	623b      	str	r3, [r7, #32]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006016:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <xTimerGenericCommand+0x98>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d02a      	beq.n	8006074 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b05      	cmp	r3, #5
 800602e:	dc18      	bgt.n	8006062 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006030:	f7ff fdaa 	bl	8005b88 <xTaskGetSchedulerState>
 8006034:	4603      	mov	r3, r0
 8006036:	2b02      	cmp	r3, #2
 8006038:	d109      	bne.n	800604e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <xTimerGenericCommand+0x98>)
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	f107 0110 	add.w	r1, r7, #16
 8006042:	2300      	movs	r3, #0
 8006044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006046:	f7fe fa3d 	bl	80044c4 <xQueueGenericSend>
 800604a:	6278      	str	r0, [r7, #36]	; 0x24
 800604c:	e012      	b.n	8006074 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <xTimerGenericCommand+0x98>)
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	f107 0110 	add.w	r1, r7, #16
 8006056:	2300      	movs	r3, #0
 8006058:	2200      	movs	r2, #0
 800605a:	f7fe fa33 	bl	80044c4 <xQueueGenericSend>
 800605e:	6278      	str	r0, [r7, #36]	; 0x24
 8006060:	e008      	b.n	8006074 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <xTimerGenericCommand+0x98>)
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	f107 0110 	add.w	r1, r7, #16
 800606a:	2300      	movs	r3, #0
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	f7fe fb27 	bl	80046c0 <xQueueGenericSendFromISR>
 8006072:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006076:	4618      	mov	r0, r3
 8006078:	3728      	adds	r7, #40	; 0x28
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000fe4 	.word	0x20000fe4

08006084 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af02      	add	r7, sp, #8
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800608e:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <prvProcessExpiredTimer+0x7c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3304      	adds	r3, #4
 800609c:	4618      	mov	r0, r3
 800609e:	f7fd ffef 	bl	8004080 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d122      	bne.n	80060f0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	18d1      	adds	r1, r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	6978      	ldr	r0, [r7, #20]
 80060b8:	f000 f8c8 	bl	800624c <prvInsertTimerInActiveList>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d016      	beq.n	80060f0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060c2:	2300      	movs	r3, #0
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	2300      	movs	r3, #0
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	2100      	movs	r1, #0
 80060cc:	6978      	ldr	r0, [r7, #20]
 80060ce:	f7ff ff8b 	bl	8005fe8 <xTimerGenericCommand>
 80060d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	60fb      	str	r3, [r7, #12]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	6978      	ldr	r0, [r7, #20]
 80060f6:	4798      	blx	r3
}
 80060f8:	bf00      	nop
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20000fdc 	.word	0x20000fdc

08006104 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800610c:	f107 0308 	add.w	r3, r7, #8
 8006110:	4618      	mov	r0, r3
 8006112:	f000 f857 	bl	80061c4 <prvGetNextExpireTime>
 8006116:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4619      	mov	r1, r3
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f803 	bl	8006128 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006122:	f000 f8d5 	bl	80062d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006126:	e7f1      	b.n	800610c <prvTimerTask+0x8>

08006128 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006132:	f7ff f923 	bl	800537c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006136:	f107 0308 	add.w	r3, r7, #8
 800613a:	4618      	mov	r0, r3
 800613c:	f000 f866 	bl	800620c <prvSampleTimeNow>
 8006140:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d130      	bne.n	80061aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <prvProcessTimerOrBlockTask+0x3c>
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	429a      	cmp	r2, r3
 8006154:	d806      	bhi.n	8006164 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006156:	f7ff f91f 	bl	8005398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800615a:	68f9      	ldr	r1, [r7, #12]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff ff91 	bl	8006084 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006162:	e024      	b.n	80061ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d008      	beq.n	800617c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800616a:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <prvProcessTimerOrBlockTask+0x90>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800617c:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <prvProcessTimerOrBlockTask+0x94>)
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	4619      	mov	r1, r3
 800618a:	f7fe fe6f 	bl	8004e6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800618e:	f7ff f903 	bl	8005398 <xTaskResumeAll>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006198:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <prvProcessTimerOrBlockTask+0x98>)
 800619a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	f3bf 8f6f 	isb	sy
}
 80061a8:	e001      	b.n	80061ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061aa:	f7ff f8f5 	bl	8005398 <xTaskResumeAll>
}
 80061ae:	bf00      	nop
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000fe0 	.word	0x20000fe0
 80061bc:	20000fe4 	.word	0x20000fe4
 80061c0:	e000ed04 	.word	0xe000ed04

080061c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061cc:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <prvGetNextExpireTime+0x44>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d105      	bne.n	80061f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061ea:	4b07      	ldr	r3, [pc, #28]	; (8006208 <prvGetNextExpireTime+0x44>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	e001      	b.n	80061fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061fa:	68fb      	ldr	r3, [r7, #12]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	20000fdc 	.word	0x20000fdc

0800620c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006214:	f7ff f95e 	bl	80054d4 <xTaskGetTickCount>
 8006218:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <prvSampleTimeNow+0x3c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	429a      	cmp	r2, r3
 8006222:	d205      	bcs.n	8006230 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006224:	f000 f908 	bl	8006438 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e002      	b.n	8006236 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006236:	4a04      	ldr	r2, [pc, #16]	; (8006248 <prvSampleTimeNow+0x3c>)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800623c:	68fb      	ldr	r3, [r7, #12]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000fec 	.word	0x20000fec

0800624c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	429a      	cmp	r2, r3
 8006270:	d812      	bhi.n	8006298 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	429a      	cmp	r2, r3
 800627e:	d302      	bcc.n	8006286 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e01b      	b.n	80062be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006286:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <prvInsertTimerInActiveList+0x7c>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3304      	adds	r3, #4
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f7fd febc 	bl	800400e <vListInsert>
 8006296:	e012      	b.n	80062be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d206      	bcs.n	80062ae <prvInsertTimerInActiveList+0x62>
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d302      	bcc.n	80062ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	e007      	b.n	80062be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062ae:	4b07      	ldr	r3, [pc, #28]	; (80062cc <prvInsertTimerInActiveList+0x80>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f7fd fea8 	bl	800400e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062be:	697b      	ldr	r3, [r7, #20]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20000fe0 	.word	0x20000fe0
 80062cc:	20000fdc 	.word	0x20000fdc

080062d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08e      	sub	sp, #56	; 0x38
 80062d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062d6:	e09d      	b.n	8006414 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da18      	bge.n	8006310 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062de:	1d3b      	adds	r3, r7, #4
 80062e0:	3304      	adds	r3, #4
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	61fb      	str	r3, [r7, #28]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006306:	6850      	ldr	r0, [r2, #4]
 8006308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800630a:	6892      	ldr	r2, [r2, #8]
 800630c:	4611      	mov	r1, r2
 800630e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	db7d      	blt.n	8006412 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d004      	beq.n	800632c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	3304      	adds	r3, #4
 8006326:	4618      	mov	r0, r3
 8006328:	f7fd feaa 	bl	8004080 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800632c:	463b      	mov	r3, r7
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ff6c 	bl	800620c <prvSampleTimeNow>
 8006334:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b09      	cmp	r3, #9
 800633a:	d86b      	bhi.n	8006414 <prvProcessReceivedCommands+0x144>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <prvProcessReceivedCommands+0x74>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	0800636d 	.word	0x0800636d
 8006348:	0800636d 	.word	0x0800636d
 800634c:	0800636d 	.word	0x0800636d
 8006350:	08006415 	.word	0x08006415
 8006354:	080063c9 	.word	0x080063c9
 8006358:	08006401 	.word	0x08006401
 800635c:	0800636d 	.word	0x0800636d
 8006360:	0800636d 	.word	0x0800636d
 8006364:	08006415 	.word	0x08006415
 8006368:	080063c9 	.word	0x080063c9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	18d1      	adds	r1, r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800637a:	f7ff ff67 	bl	800624c <prvInsertTimerInActiveList>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d047      	beq.n	8006414 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800638a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d13f      	bne.n	8006414 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	441a      	add	r2, r3
 800639c:	2300      	movs	r3, #0
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	2300      	movs	r3, #0
 80063a2:	2100      	movs	r1, #0
 80063a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a6:	f7ff fe1f 	bl	8005fe8 <xTimerGenericCommand>
 80063aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d130      	bne.n	8006414 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	61bb      	str	r3, [r7, #24]
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	617b      	str	r3, [r7, #20]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	18d1      	adds	r1, r2, r3
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063fa:	f7ff ff27 	bl	800624c <prvInsertTimerInActiveList>
					break;
 80063fe:	e009      	b.n	8006414 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d104      	bne.n	8006414 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800640a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800640c:	f000 fbc8 	bl	8006ba0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006410:	e000      	b.n	8006414 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006412:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006414:	4b07      	ldr	r3, [pc, #28]	; (8006434 <prvProcessReceivedCommands+0x164>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	1d39      	adds	r1, r7, #4
 800641a:	2200      	movs	r2, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f7fe f9e7 	bl	80047f0 <xQueueReceive>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	f47f af57 	bne.w	80062d8 <prvProcessReceivedCommands+0x8>
	}
}
 800642a:	bf00      	nop
 800642c:	bf00      	nop
 800642e:	3730      	adds	r7, #48	; 0x30
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20000fe4 	.word	0x20000fe4

08006438 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800643e:	e045      	b.n	80064cc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006440:	4b2c      	ldr	r3, [pc, #176]	; (80064f4 <prvSwitchTimerLists+0xbc>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800644a:	4b2a      	ldr	r3, [pc, #168]	; (80064f4 <prvSwitchTimerLists+0xbc>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3304      	adds	r3, #4
 8006458:	4618      	mov	r0, r3
 800645a:	f7fd fe11 	bl	8004080 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d12e      	bne.n	80064cc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4413      	add	r3, r2
 8006476:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	429a      	cmp	r2, r3
 800647e:	d90e      	bls.n	800649e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800648c:	4b19      	ldr	r3, [pc, #100]	; (80064f4 <prvSwitchTimerLists+0xbc>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3304      	adds	r3, #4
 8006494:	4619      	mov	r1, r3
 8006496:	4610      	mov	r0, r2
 8006498:	f7fd fdb9 	bl	800400e <vListInsert>
 800649c:	e016      	b.n	80064cc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800649e:	2300      	movs	r3, #0
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	2300      	movs	r3, #0
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	2100      	movs	r1, #0
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f7ff fd9d 	bl	8005fe8 <xTimerGenericCommand>
 80064ae:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <prvSwitchTimerLists+0x94>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	603b      	str	r3, [r7, #0]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064cc:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <prvSwitchTimerLists+0xbc>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1b4      	bne.n	8006440 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064d6:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <prvSwitchTimerLists+0xbc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <prvSwitchTimerLists+0xc0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a04      	ldr	r2, [pc, #16]	; (80064f4 <prvSwitchTimerLists+0xbc>)
 80064e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064e4:	4a04      	ldr	r2, [pc, #16]	; (80064f8 <prvSwitchTimerLists+0xc0>)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	6013      	str	r3, [r2, #0]
}
 80064ea:	bf00      	nop
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20000fdc 	.word	0x20000fdc
 80064f8:	20000fe0 	.word	0x20000fe0

080064fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006502:	f000 f967 	bl	80067d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006506:	4b15      	ldr	r3, [pc, #84]	; (800655c <prvCheckForValidListAndQueue+0x60>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d120      	bne.n	8006550 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800650e:	4814      	ldr	r0, [pc, #80]	; (8006560 <prvCheckForValidListAndQueue+0x64>)
 8006510:	f7fd fd2c 	bl	8003f6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006514:	4813      	ldr	r0, [pc, #76]	; (8006564 <prvCheckForValidListAndQueue+0x68>)
 8006516:	f7fd fd29 	bl	8003f6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800651a:	4b13      	ldr	r3, [pc, #76]	; (8006568 <prvCheckForValidListAndQueue+0x6c>)
 800651c:	4a10      	ldr	r2, [pc, #64]	; (8006560 <prvCheckForValidListAndQueue+0x64>)
 800651e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006520:	4b12      	ldr	r3, [pc, #72]	; (800656c <prvCheckForValidListAndQueue+0x70>)
 8006522:	4a10      	ldr	r2, [pc, #64]	; (8006564 <prvCheckForValidListAndQueue+0x68>)
 8006524:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006526:	2300      	movs	r3, #0
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <prvCheckForValidListAndQueue+0x74>)
 800652c:	4a11      	ldr	r2, [pc, #68]	; (8006574 <prvCheckForValidListAndQueue+0x78>)
 800652e:	2110      	movs	r1, #16
 8006530:	200a      	movs	r0, #10
 8006532:	f7fd fe37 	bl	80041a4 <xQueueGenericCreateStatic>
 8006536:	4603      	mov	r3, r0
 8006538:	4a08      	ldr	r2, [pc, #32]	; (800655c <prvCheckForValidListAndQueue+0x60>)
 800653a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800653c:	4b07      	ldr	r3, [pc, #28]	; (800655c <prvCheckForValidListAndQueue+0x60>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006544:	4b05      	ldr	r3, [pc, #20]	; (800655c <prvCheckForValidListAndQueue+0x60>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	490b      	ldr	r1, [pc, #44]	; (8006578 <prvCheckForValidListAndQueue+0x7c>)
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe fc64 	bl	8004e18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006550:	f000 f970 	bl	8006834 <vPortExitCritical>
}
 8006554:	bf00      	nop
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20000fe4 	.word	0x20000fe4
 8006560:	20000fb4 	.word	0x20000fb4
 8006564:	20000fc8 	.word	0x20000fc8
 8006568:	20000fdc 	.word	0x20000fdc
 800656c:	20000fe0 	.word	0x20000fe0
 8006570:	20001090 	.word	0x20001090
 8006574:	20000ff0 	.word	0x20000ff0
 8006578:	08007014 	.word	0x08007014

0800657c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3b04      	subs	r3, #4
 800658c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3b04      	subs	r3, #4
 800659a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f023 0201 	bic.w	r2, r3, #1
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3b04      	subs	r3, #4
 80065aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065ac:	4a0c      	ldr	r2, [pc, #48]	; (80065e0 <pxPortInitialiseStack+0x64>)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3b14      	subs	r3, #20
 80065b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3b04      	subs	r3, #4
 80065c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f06f 0202 	mvn.w	r2, #2
 80065ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3b20      	subs	r3, #32
 80065d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065d2:	68fb      	ldr	r3, [r7, #12]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	080065e5 	.word	0x080065e5

080065e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065ee:	4b12      	ldr	r3, [pc, #72]	; (8006638 <prvTaskExitError+0x54>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f6:	d00a      	beq.n	800660e <prvTaskExitError+0x2a>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	60fb      	str	r3, [r7, #12]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <prvTaskExitError+0x28>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60bb      	str	r3, [r7, #8]
}
 8006620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006622:	bf00      	nop
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0fc      	beq.n	8006624 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	20000168 	.word	0x20000168
 800663c:	00000000 	.word	0x00000000

08006640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006640:	4b07      	ldr	r3, [pc, #28]	; (8006660 <pxCurrentTCBConst2>)
 8006642:	6819      	ldr	r1, [r3, #0]
 8006644:	6808      	ldr	r0, [r1, #0]
 8006646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664a:	f380 8809 	msr	PSP, r0
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f04f 0000 	mov.w	r0, #0
 8006656:	f380 8811 	msr	BASEPRI, r0
 800665a:	4770      	bx	lr
 800665c:	f3af 8000 	nop.w

08006660 <pxCurrentTCBConst2>:
 8006660:	20000ab4 	.word	0x20000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop

08006668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006668:	4808      	ldr	r0, [pc, #32]	; (800668c <prvPortStartFirstTask+0x24>)
 800666a:	6800      	ldr	r0, [r0, #0]
 800666c:	6800      	ldr	r0, [r0, #0]
 800666e:	f380 8808 	msr	MSP, r0
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f380 8814 	msr	CONTROL, r0
 800667a:	b662      	cpsie	i
 800667c:	b661      	cpsie	f
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	df00      	svc	0
 8006688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800668a:	bf00      	nop
 800668c:	e000ed08 	.word	0xe000ed08

08006690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006696:	4b46      	ldr	r3, [pc, #280]	; (80067b0 <xPortStartScheduler+0x120>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a46      	ldr	r2, [pc, #280]	; (80067b4 <xPortStartScheduler+0x124>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d10a      	bne.n	80066b6 <xPortStartScheduler+0x26>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	613b      	str	r3, [r7, #16]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066b6:	4b3e      	ldr	r3, [pc, #248]	; (80067b0 <xPortStartScheduler+0x120>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a3f      	ldr	r2, [pc, #252]	; (80067b8 <xPortStartScheduler+0x128>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d10a      	bne.n	80066d6 <xPortStartScheduler+0x46>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	60fb      	str	r3, [r7, #12]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066d6:	4b39      	ldr	r3, [pc, #228]	; (80067bc <xPortStartScheduler+0x12c>)
 80066d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	22ff      	movs	r2, #255	; 0xff
 80066e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	4b31      	ldr	r3, [pc, #196]	; (80067c0 <xPortStartScheduler+0x130>)
 80066fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066fe:	4b31      	ldr	r3, [pc, #196]	; (80067c4 <xPortStartScheduler+0x134>)
 8006700:	2207      	movs	r2, #7
 8006702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006704:	e009      	b.n	800671a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006706:	4b2f      	ldr	r3, [pc, #188]	; (80067c4 <xPortStartScheduler+0x134>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3b01      	subs	r3, #1
 800670c:	4a2d      	ldr	r2, [pc, #180]	; (80067c4 <xPortStartScheduler+0x134>)
 800670e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	b2db      	uxtb	r3, r3
 8006718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d0ef      	beq.n	8006706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006726:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <xPortStartScheduler+0x134>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f1c3 0307 	rsb	r3, r3, #7
 800672e:	2b04      	cmp	r3, #4
 8006730:	d00a      	beq.n	8006748 <xPortStartScheduler+0xb8>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	60bb      	str	r3, [r7, #8]
}
 8006744:	bf00      	nop
 8006746:	e7fe      	b.n	8006746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006748:	4b1e      	ldr	r3, [pc, #120]	; (80067c4 <xPortStartScheduler+0x134>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	4a1d      	ldr	r2, [pc, #116]	; (80067c4 <xPortStartScheduler+0x134>)
 8006750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006752:	4b1c      	ldr	r3, [pc, #112]	; (80067c4 <xPortStartScheduler+0x134>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800675a:	4a1a      	ldr	r2, [pc, #104]	; (80067c4 <xPortStartScheduler+0x134>)
 800675c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	b2da      	uxtb	r2, r3
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006766:	4b18      	ldr	r3, [pc, #96]	; (80067c8 <xPortStartScheduler+0x138>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a17      	ldr	r2, [pc, #92]	; (80067c8 <xPortStartScheduler+0x138>)
 800676c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006772:	4b15      	ldr	r3, [pc, #84]	; (80067c8 <xPortStartScheduler+0x138>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a14      	ldr	r2, [pc, #80]	; (80067c8 <xPortStartScheduler+0x138>)
 8006778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800677c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800677e:	f000 f8dd 	bl	800693c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006782:	4b12      	ldr	r3, [pc, #72]	; (80067cc <xPortStartScheduler+0x13c>)
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006788:	f000 f8fc 	bl	8006984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800678c:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <xPortStartScheduler+0x140>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a0f      	ldr	r2, [pc, #60]	; (80067d0 <xPortStartScheduler+0x140>)
 8006792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006798:	f7ff ff66 	bl	8006668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800679c:	f7fe ff68 	bl	8005670 <vTaskSwitchContext>
	prvTaskExitError();
 80067a0:	f7ff ff20 	bl	80065e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	e000ed00 	.word	0xe000ed00
 80067b4:	410fc271 	.word	0x410fc271
 80067b8:	410fc270 	.word	0x410fc270
 80067bc:	e000e400 	.word	0xe000e400
 80067c0:	200010e0 	.word	0x200010e0
 80067c4:	200010e4 	.word	0x200010e4
 80067c8:	e000ed20 	.word	0xe000ed20
 80067cc:	20000168 	.word	0x20000168
 80067d0:	e000ef34 	.word	0xe000ef34

080067d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	607b      	str	r3, [r7, #4]
}
 80067ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067ee:	4b0f      	ldr	r3, [pc, #60]	; (800682c <vPortEnterCritical+0x58>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	4a0d      	ldr	r2, [pc, #52]	; (800682c <vPortEnterCritical+0x58>)
 80067f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067f8:	4b0c      	ldr	r3, [pc, #48]	; (800682c <vPortEnterCritical+0x58>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d10f      	bne.n	8006820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <vPortEnterCritical+0x5c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <vPortEnterCritical+0x4c>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	603b      	str	r3, [r7, #0]
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <vPortEnterCritical+0x4a>
	}
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	20000168 	.word	0x20000168
 8006830:	e000ed04 	.word	0xe000ed04

08006834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800683a:	4b12      	ldr	r3, [pc, #72]	; (8006884 <vPortExitCritical+0x50>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10a      	bne.n	8006858 <vPortExitCritical+0x24>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	607b      	str	r3, [r7, #4]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006858:	4b0a      	ldr	r3, [pc, #40]	; (8006884 <vPortExitCritical+0x50>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3b01      	subs	r3, #1
 800685e:	4a09      	ldr	r2, [pc, #36]	; (8006884 <vPortExitCritical+0x50>)
 8006860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006862:	4b08      	ldr	r3, [pc, #32]	; (8006884 <vPortExitCritical+0x50>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <vPortExitCritical+0x42>
 800686a:	2300      	movs	r3, #0
 800686c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	f383 8811 	msr	BASEPRI, r3
}
 8006874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20000168 	.word	0x20000168
	...

08006890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006890:	f3ef 8009 	mrs	r0, PSP
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	4b15      	ldr	r3, [pc, #84]	; (80068f0 <pxCurrentTCBConst>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	f01e 0f10 	tst.w	lr, #16
 80068a0:	bf08      	it	eq
 80068a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068aa:	6010      	str	r0, [r2, #0]
 80068ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068b4:	f380 8811 	msr	BASEPRI, r0
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f7fe fed6 	bl	8005670 <vTaskSwitchContext>
 80068c4:	f04f 0000 	mov.w	r0, #0
 80068c8:	f380 8811 	msr	BASEPRI, r0
 80068cc:	bc09      	pop	{r0, r3}
 80068ce:	6819      	ldr	r1, [r3, #0]
 80068d0:	6808      	ldr	r0, [r1, #0]
 80068d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d6:	f01e 0f10 	tst.w	lr, #16
 80068da:	bf08      	it	eq
 80068dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068e0:	f380 8809 	msr	PSP, r0
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	f3af 8000 	nop.w

080068f0 <pxCurrentTCBConst>:
 80068f0:	20000ab4 	.word	0x20000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop

080068f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	607b      	str	r3, [r7, #4]
}
 8006910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006912:	f7fe fdef 	bl	80054f4 <xTaskIncrementTick>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800691c:	4b06      	ldr	r3, [pc, #24]	; (8006938 <SysTick_Handler+0x40>)
 800691e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	2300      	movs	r3, #0
 8006926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f383 8811 	msr	BASEPRI, r3
}
 800692e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	e000ed04 	.word	0xe000ed04

0800693c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006940:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <vPortSetupTimerInterrupt+0x34>)
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006946:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <vPortSetupTimerInterrupt+0x38>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <vPortSetupTimerInterrupt+0x3c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a0a      	ldr	r2, [pc, #40]	; (800697c <vPortSetupTimerInterrupt+0x40>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	099b      	lsrs	r3, r3, #6
 8006958:	4a09      	ldr	r2, [pc, #36]	; (8006980 <vPortSetupTimerInterrupt+0x44>)
 800695a:	3b01      	subs	r3, #1
 800695c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800695e:	4b04      	ldr	r3, [pc, #16]	; (8006970 <vPortSetupTimerInterrupt+0x34>)
 8006960:	2207      	movs	r2, #7
 8006962:	601a      	str	r2, [r3, #0]
}
 8006964:	bf00      	nop
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	e000e010 	.word	0xe000e010
 8006974:	e000e018 	.word	0xe000e018
 8006978:	2000015c 	.word	0x2000015c
 800697c:	10624dd3 	.word	0x10624dd3
 8006980:	e000e014 	.word	0xe000e014

08006984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006994 <vPortEnableVFP+0x10>
 8006988:	6801      	ldr	r1, [r0, #0]
 800698a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800698e:	6001      	str	r1, [r0, #0]
 8006990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006992:	bf00      	nop
 8006994:	e000ed88 	.word	0xe000ed88

08006998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800699e:	f3ef 8305 	mrs	r3, IPSR
 80069a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b0f      	cmp	r3, #15
 80069a8:	d914      	bls.n	80069d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069aa:	4a17      	ldr	r2, [pc, #92]	; (8006a08 <vPortValidateInterruptPriority+0x70>)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069b4:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <vPortValidateInterruptPriority+0x74>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	7afa      	ldrb	r2, [r7, #11]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d20a      	bcs.n	80069d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	607b      	str	r3, [r7, #4]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069d4:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <vPortValidateInterruptPriority+0x78>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069dc:	4b0d      	ldr	r3, [pc, #52]	; (8006a14 <vPortValidateInterruptPriority+0x7c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d90a      	bls.n	80069fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	603b      	str	r3, [r7, #0]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <vPortValidateInterruptPriority+0x60>
	}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	e000e3f0 	.word	0xe000e3f0
 8006a0c:	200010e0 	.word	0x200010e0
 8006a10:	e000ed0c 	.word	0xe000ed0c
 8006a14:	200010e4 	.word	0x200010e4

08006a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08a      	sub	sp, #40	; 0x28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a24:	f7fe fcaa 	bl	800537c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a28:	4b58      	ldr	r3, [pc, #352]	; (8006b8c <pvPortMalloc+0x174>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a30:	f000 f910 	bl	8006c54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a34:	4b56      	ldr	r3, [pc, #344]	; (8006b90 <pvPortMalloc+0x178>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f040 808e 	bne.w	8006b5e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01d      	beq.n	8006a84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a48:	2208      	movs	r2, #8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d014      	beq.n	8006a84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f023 0307 	bic.w	r3, r3, #7
 8006a60:	3308      	adds	r3, #8
 8006a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <pvPortMalloc+0x6c>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	617b      	str	r3, [r7, #20]
}
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d069      	beq.n	8006b5e <pvPortMalloc+0x146>
 8006a8a:	4b42      	ldr	r3, [pc, #264]	; (8006b94 <pvPortMalloc+0x17c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d864      	bhi.n	8006b5e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a94:	4b40      	ldr	r3, [pc, #256]	; (8006b98 <pvPortMalloc+0x180>)
 8006a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a98:	4b3f      	ldr	r3, [pc, #252]	; (8006b98 <pvPortMalloc+0x180>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a9e:	e004      	b.n	8006aaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d903      	bls.n	8006abc <pvPortMalloc+0xa4>
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f1      	bne.n	8006aa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006abc:	4b33      	ldr	r3, [pc, #204]	; (8006b8c <pvPortMalloc+0x174>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d04b      	beq.n	8006b5e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2208      	movs	r2, #8
 8006acc:	4413      	add	r3, r2
 8006ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	1ad2      	subs	r2, r2, r3
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d91f      	bls.n	8006b28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4413      	add	r3, r2
 8006aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <pvPortMalloc+0xf8>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	613b      	str	r3, [r7, #16]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	1ad2      	subs	r2, r2, r3
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b22:	69b8      	ldr	r0, [r7, #24]
 8006b24:	f000 f8f8 	bl	8006d18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b28:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <pvPortMalloc+0x17c>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <pvPortMalloc+0x17c>)
 8006b34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b36:	4b17      	ldr	r3, [pc, #92]	; (8006b94 <pvPortMalloc+0x17c>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <pvPortMalloc+0x184>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d203      	bcs.n	8006b4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b42:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <pvPortMalloc+0x17c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <pvPortMalloc+0x184>)
 8006b48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <pvPortMalloc+0x178>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b5e:	f7fe fc1b 	bl	8005398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <pvPortMalloc+0x16a>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	60fb      	str	r3, [r7, #12]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <pvPortMalloc+0x168>
	return pvReturn;
 8006b82:	69fb      	ldr	r3, [r7, #28]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3728      	adds	r7, #40	; 0x28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20001cf0 	.word	0x20001cf0
 8006b90:	20001cfc 	.word	0x20001cfc
 8006b94:	20001cf4 	.word	0x20001cf4
 8006b98:	20001ce8 	.word	0x20001ce8
 8006b9c:	20001cf8 	.word	0x20001cf8

08006ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d048      	beq.n	8006c44 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	425b      	negs	r3, r3
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4413      	add	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	4b21      	ldr	r3, [pc, #132]	; (8006c4c <vPortFree+0xac>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <vPortFree+0x44>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	60fb      	str	r3, [r7, #12]
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00a      	beq.n	8006c02 <vPortFree+0x62>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	60bb      	str	r3, [r7, #8]
}
 8006bfe:	bf00      	nop
 8006c00:	e7fe      	b.n	8006c00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	4b11      	ldr	r3, [pc, #68]	; (8006c4c <vPortFree+0xac>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d019      	beq.n	8006c44 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d115      	bne.n	8006c44 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <vPortFree+0xac>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	43db      	mvns	r3, r3
 8006c22:	401a      	ands	r2, r3
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c28:	f7fe fba8 	bl	800537c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <vPortFree+0xb0>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4413      	add	r3, r2
 8006c36:	4a06      	ldr	r2, [pc, #24]	; (8006c50 <vPortFree+0xb0>)
 8006c38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c3a:	6938      	ldr	r0, [r7, #16]
 8006c3c:	f000 f86c 	bl	8006d18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c40:	f7fe fbaa 	bl	8005398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c44:	bf00      	nop
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	20001cfc 	.word	0x20001cfc
 8006c50:	20001cf4 	.word	0x20001cf4

08006c54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c60:	4b27      	ldr	r3, [pc, #156]	; (8006d00 <prvHeapInit+0xac>)
 8006c62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00c      	beq.n	8006c88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3307      	adds	r3, #7
 8006c72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0307 	bic.w	r3, r3, #7
 8006c7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	4a1f      	ldr	r2, [pc, #124]	; (8006d00 <prvHeapInit+0xac>)
 8006c84:	4413      	add	r3, r2
 8006c86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c8c:	4a1d      	ldr	r2, [pc, #116]	; (8006d04 <prvHeapInit+0xb0>)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c92:	4b1c      	ldr	r3, [pc, #112]	; (8006d04 <prvHeapInit+0xb0>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ca0:	2208      	movs	r2, #8
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	1a9b      	subs	r3, r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0307 	bic.w	r3, r3, #7
 8006cae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4a15      	ldr	r2, [pc, #84]	; (8006d08 <prvHeapInit+0xb4>)
 8006cb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006cb6:	4b14      	ldr	r3, [pc, #80]	; (8006d08 <prvHeapInit+0xb4>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cbe:	4b12      	ldr	r3, [pc, #72]	; (8006d08 <prvHeapInit+0xb4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	1ad2      	subs	r2, r2, r3
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cd4:	4b0c      	ldr	r3, [pc, #48]	; (8006d08 <prvHeapInit+0xb4>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	4a0a      	ldr	r2, [pc, #40]	; (8006d0c <prvHeapInit+0xb8>)
 8006ce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <prvHeapInit+0xbc>)
 8006cea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cec:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <prvHeapInit+0xc0>)
 8006cee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cf2:	601a      	str	r2, [r3, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	200010e8 	.word	0x200010e8
 8006d04:	20001ce8 	.word	0x20001ce8
 8006d08:	20001cf0 	.word	0x20001cf0
 8006d0c:	20001cf8 	.word	0x20001cf8
 8006d10:	20001cf4 	.word	0x20001cf4
 8006d14:	20001cfc 	.word	0x20001cfc

08006d18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d20:	4b28      	ldr	r3, [pc, #160]	; (8006dc4 <prvInsertBlockIntoFreeList+0xac>)
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	e002      	b.n	8006d2c <prvInsertBlockIntoFreeList+0x14>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d8f7      	bhi.n	8006d26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	4413      	add	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d108      	bne.n	8006d5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	441a      	add	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	441a      	add	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d118      	bne.n	8006da0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d00d      	beq.n	8006d96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	441a      	add	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e008      	b.n	8006da8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d96:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	e003      	b.n	8006da8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d002      	beq.n	8006db6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20001ce8 	.word	0x20001ce8
 8006dc8:	20001cf0 	.word	0x20001cf0

08006dcc <__libc_init_array>:
 8006dcc:	b570      	push	{r4, r5, r6, lr}
 8006dce:	4d0d      	ldr	r5, [pc, #52]	; (8006e04 <__libc_init_array+0x38>)
 8006dd0:	4c0d      	ldr	r4, [pc, #52]	; (8006e08 <__libc_init_array+0x3c>)
 8006dd2:	1b64      	subs	r4, r4, r5
 8006dd4:	10a4      	asrs	r4, r4, #2
 8006dd6:	2600      	movs	r6, #0
 8006dd8:	42a6      	cmp	r6, r4
 8006dda:	d109      	bne.n	8006df0 <__libc_init_array+0x24>
 8006ddc:	4d0b      	ldr	r5, [pc, #44]	; (8006e0c <__libc_init_array+0x40>)
 8006dde:	4c0c      	ldr	r4, [pc, #48]	; (8006e10 <__libc_init_array+0x44>)
 8006de0:	f000 f8f6 	bl	8006fd0 <_init>
 8006de4:	1b64      	subs	r4, r4, r5
 8006de6:	10a4      	asrs	r4, r4, #2
 8006de8:	2600      	movs	r6, #0
 8006dea:	42a6      	cmp	r6, r4
 8006dec:	d105      	bne.n	8006dfa <__libc_init_array+0x2e>
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df4:	4798      	blx	r3
 8006df6:	3601      	adds	r6, #1
 8006df8:	e7ee      	b.n	8006dd8 <__libc_init_array+0xc>
 8006dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dfe:	4798      	blx	r3
 8006e00:	3601      	adds	r6, #1
 8006e02:	e7f2      	b.n	8006dea <__libc_init_array+0x1e>
 8006e04:	080070e8 	.word	0x080070e8
 8006e08:	080070e8 	.word	0x080070e8
 8006e0c:	080070e8 	.word	0x080070e8
 8006e10:	080070ec 	.word	0x080070ec

08006e14 <__retarget_lock_acquire_recursive>:
 8006e14:	4770      	bx	lr

08006e16 <__retarget_lock_release_recursive>:
 8006e16:	4770      	bx	lr

08006e18 <memcpy>:
 8006e18:	440a      	add	r2, r1
 8006e1a:	4291      	cmp	r1, r2
 8006e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e20:	d100      	bne.n	8006e24 <memcpy+0xc>
 8006e22:	4770      	bx	lr
 8006e24:	b510      	push	{r4, lr}
 8006e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e2e:	4291      	cmp	r1, r2
 8006e30:	d1f9      	bne.n	8006e26 <memcpy+0xe>
 8006e32:	bd10      	pop	{r4, pc}

08006e34 <memset>:
 8006e34:	4402      	add	r2, r0
 8006e36:	4603      	mov	r3, r0
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d100      	bne.n	8006e3e <memset+0xa>
 8006e3c:	4770      	bx	lr
 8006e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e42:	e7f9      	b.n	8006e38 <memset+0x4>

08006e44 <cleanup_glue>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	460c      	mov	r4, r1
 8006e48:	6809      	ldr	r1, [r1, #0]
 8006e4a:	4605      	mov	r5, r0
 8006e4c:	b109      	cbz	r1, 8006e52 <cleanup_glue+0xe>
 8006e4e:	f7ff fff9 	bl	8006e44 <cleanup_glue>
 8006e52:	4621      	mov	r1, r4
 8006e54:	4628      	mov	r0, r5
 8006e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e5a:	f000 b869 	b.w	8006f30 <_free_r>
	...

08006e60 <_reclaim_reent>:
 8006e60:	4b2c      	ldr	r3, [pc, #176]	; (8006f14 <_reclaim_reent+0xb4>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4283      	cmp	r3, r0
 8006e66:	b570      	push	{r4, r5, r6, lr}
 8006e68:	4604      	mov	r4, r0
 8006e6a:	d051      	beq.n	8006f10 <_reclaim_reent+0xb0>
 8006e6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e6e:	b143      	cbz	r3, 8006e82 <_reclaim_reent+0x22>
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d14a      	bne.n	8006f0c <_reclaim_reent+0xac>
 8006e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e78:	6819      	ldr	r1, [r3, #0]
 8006e7a:	b111      	cbz	r1, 8006e82 <_reclaim_reent+0x22>
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f000 f857 	bl	8006f30 <_free_r>
 8006e82:	6961      	ldr	r1, [r4, #20]
 8006e84:	b111      	cbz	r1, 8006e8c <_reclaim_reent+0x2c>
 8006e86:	4620      	mov	r0, r4
 8006e88:	f000 f852 	bl	8006f30 <_free_r>
 8006e8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e8e:	b111      	cbz	r1, 8006e96 <_reclaim_reent+0x36>
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 f84d 	bl	8006f30 <_free_r>
 8006e96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e98:	b111      	cbz	r1, 8006ea0 <_reclaim_reent+0x40>
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f000 f848 	bl	8006f30 <_free_r>
 8006ea0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ea2:	b111      	cbz	r1, 8006eaa <_reclaim_reent+0x4a>
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f000 f843 	bl	8006f30 <_free_r>
 8006eaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006eac:	b111      	cbz	r1, 8006eb4 <_reclaim_reent+0x54>
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 f83e 	bl	8006f30 <_free_r>
 8006eb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006eb6:	b111      	cbz	r1, 8006ebe <_reclaim_reent+0x5e>
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 f839 	bl	8006f30 <_free_r>
 8006ebe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006ec0:	b111      	cbz	r1, 8006ec8 <_reclaim_reent+0x68>
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 f834 	bl	8006f30 <_free_r>
 8006ec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eca:	b111      	cbz	r1, 8006ed2 <_reclaim_reent+0x72>
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 f82f 	bl	8006f30 <_free_r>
 8006ed2:	69a3      	ldr	r3, [r4, #24]
 8006ed4:	b1e3      	cbz	r3, 8006f10 <_reclaim_reent+0xb0>
 8006ed6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ed8:	4620      	mov	r0, r4
 8006eda:	4798      	blx	r3
 8006edc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006ede:	b1b9      	cbz	r1, 8006f10 <_reclaim_reent+0xb0>
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ee6:	f7ff bfad 	b.w	8006e44 <cleanup_glue>
 8006eea:	5949      	ldr	r1, [r1, r5]
 8006eec:	b941      	cbnz	r1, 8006f00 <_reclaim_reent+0xa0>
 8006eee:	3504      	adds	r5, #4
 8006ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ef2:	2d80      	cmp	r5, #128	; 0x80
 8006ef4:	68d9      	ldr	r1, [r3, #12]
 8006ef6:	d1f8      	bne.n	8006eea <_reclaim_reent+0x8a>
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 f819 	bl	8006f30 <_free_r>
 8006efe:	e7ba      	b.n	8006e76 <_reclaim_reent+0x16>
 8006f00:	680e      	ldr	r6, [r1, #0]
 8006f02:	4620      	mov	r0, r4
 8006f04:	f000 f814 	bl	8006f30 <_free_r>
 8006f08:	4631      	mov	r1, r6
 8006f0a:	e7ef      	b.n	8006eec <_reclaim_reent+0x8c>
 8006f0c:	2500      	movs	r5, #0
 8006f0e:	e7ef      	b.n	8006ef0 <_reclaim_reent+0x90>
 8006f10:	bd70      	pop	{r4, r5, r6, pc}
 8006f12:	bf00      	nop
 8006f14:	2000016c 	.word	0x2000016c

08006f18 <__malloc_lock>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__malloc_lock+0x8>)
 8006f1a:	f7ff bf7b 	b.w	8006e14 <__retarget_lock_acquire_recursive>
 8006f1e:	bf00      	nop
 8006f20:	20002164 	.word	0x20002164

08006f24 <__malloc_unlock>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__malloc_unlock+0x8>)
 8006f26:	f7ff bf76 	b.w	8006e16 <__retarget_lock_release_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	20002164 	.word	0x20002164

08006f30 <_free_r>:
 8006f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f32:	2900      	cmp	r1, #0
 8006f34:	d048      	beq.n	8006fc8 <_free_r+0x98>
 8006f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f3a:	9001      	str	r0, [sp, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f42:	bfb8      	it	lt
 8006f44:	18e4      	addlt	r4, r4, r3
 8006f46:	f7ff ffe7 	bl	8006f18 <__malloc_lock>
 8006f4a:	4a20      	ldr	r2, [pc, #128]	; (8006fcc <_free_r+0x9c>)
 8006f4c:	9801      	ldr	r0, [sp, #4]
 8006f4e:	6813      	ldr	r3, [r2, #0]
 8006f50:	4615      	mov	r5, r2
 8006f52:	b933      	cbnz	r3, 8006f62 <_free_r+0x32>
 8006f54:	6063      	str	r3, [r4, #4]
 8006f56:	6014      	str	r4, [r2, #0]
 8006f58:	b003      	add	sp, #12
 8006f5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f5e:	f7ff bfe1 	b.w	8006f24 <__malloc_unlock>
 8006f62:	42a3      	cmp	r3, r4
 8006f64:	d90b      	bls.n	8006f7e <_free_r+0x4e>
 8006f66:	6821      	ldr	r1, [r4, #0]
 8006f68:	1862      	adds	r2, r4, r1
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	bf04      	itt	eq
 8006f6e:	681a      	ldreq	r2, [r3, #0]
 8006f70:	685b      	ldreq	r3, [r3, #4]
 8006f72:	6063      	str	r3, [r4, #4]
 8006f74:	bf04      	itt	eq
 8006f76:	1852      	addeq	r2, r2, r1
 8006f78:	6022      	streq	r2, [r4, #0]
 8006f7a:	602c      	str	r4, [r5, #0]
 8006f7c:	e7ec      	b.n	8006f58 <_free_r+0x28>
 8006f7e:	461a      	mov	r2, r3
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	b10b      	cbz	r3, 8006f88 <_free_r+0x58>
 8006f84:	42a3      	cmp	r3, r4
 8006f86:	d9fa      	bls.n	8006f7e <_free_r+0x4e>
 8006f88:	6811      	ldr	r1, [r2, #0]
 8006f8a:	1855      	adds	r5, r2, r1
 8006f8c:	42a5      	cmp	r5, r4
 8006f8e:	d10b      	bne.n	8006fa8 <_free_r+0x78>
 8006f90:	6824      	ldr	r4, [r4, #0]
 8006f92:	4421      	add	r1, r4
 8006f94:	1854      	adds	r4, r2, r1
 8006f96:	42a3      	cmp	r3, r4
 8006f98:	6011      	str	r1, [r2, #0]
 8006f9a:	d1dd      	bne.n	8006f58 <_free_r+0x28>
 8006f9c:	681c      	ldr	r4, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	6053      	str	r3, [r2, #4]
 8006fa2:	4421      	add	r1, r4
 8006fa4:	6011      	str	r1, [r2, #0]
 8006fa6:	e7d7      	b.n	8006f58 <_free_r+0x28>
 8006fa8:	d902      	bls.n	8006fb0 <_free_r+0x80>
 8006faa:	230c      	movs	r3, #12
 8006fac:	6003      	str	r3, [r0, #0]
 8006fae:	e7d3      	b.n	8006f58 <_free_r+0x28>
 8006fb0:	6825      	ldr	r5, [r4, #0]
 8006fb2:	1961      	adds	r1, r4, r5
 8006fb4:	428b      	cmp	r3, r1
 8006fb6:	bf04      	itt	eq
 8006fb8:	6819      	ldreq	r1, [r3, #0]
 8006fba:	685b      	ldreq	r3, [r3, #4]
 8006fbc:	6063      	str	r3, [r4, #4]
 8006fbe:	bf04      	itt	eq
 8006fc0:	1949      	addeq	r1, r1, r5
 8006fc2:	6021      	streq	r1, [r4, #0]
 8006fc4:	6054      	str	r4, [r2, #4]
 8006fc6:	e7c7      	b.n	8006f58 <_free_r+0x28>
 8006fc8:	b003      	add	sp, #12
 8006fca:	bd30      	pop	{r4, r5, pc}
 8006fcc:	20001d00 	.word	0x20001d00

08006fd0 <_init>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr

08006fdc <_fini>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr
